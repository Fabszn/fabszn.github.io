<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2020-07-13 21:40"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Coder&#039;s IO</title>
	<link>https://thecoderwriter.wordpress.com</link>
	<description></description>
	<pubDate>Mon, 13 Jul 2020 21:40:02 +0000</pubDate>
	<language></language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://thecoderwriter.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>14541453</wp:author_id><wp:author_login><![CDATA[fabszn]]></wp:author_login><wp:author_email><![CDATA[fabszn@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Fabrice Sznajderman]]></wp:author_display_name><wp:author_first_name><![CDATA[Fabrice]]></wp:author_first_name><wp:author_last_name><![CDATA[Sznajderman]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>73010</wp:term_id><wp:category_nicename>apprendre</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[apprendre]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>10177272</wp:term_id><wp:category_nicename>conference</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[conférence]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>13573165</wp:term_id><wp:category_nicename>devoxx</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Devoxx]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>1017</wp:term_id><wp:category_nicename>java</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Java]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>656273</wp:term_id><wp:category_nicename>lagom</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[lagom]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>36294185</wp:term_id><wp:category_nicename>livre</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[livre]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>9489678</wp:term_id><wp:category_nicename>mooc</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[MOOC]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>312256</wp:term_id><wp:category_nicename>scala</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Scala]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>63429</wp:term_id><wp:category_nicename>spark</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[spark]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>10118394</wp:term_id><wp:category_nicename>tips</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[tips]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>943</wp:term_id><wp:category_nicename>training</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[training]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>1</wp:term_id><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
	<wp:tag><wp:term_id>48041</wp:term_id><wp:tag_slug>2015</wp:tag_slug><wp:tag_name><![CDATA[2015]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11287</wp:term_id><wp:tag_slug>agile</wp:tag_slug><wp:tag_name><![CDATA[Agile]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1551782</wp:term_id><wp:tag_slug>agilite</wp:tag_slug><wp:tag_name><![CDATA[agilité]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>174155</wp:term_id><wp:tag_slug>agnes</wp:tag_slug><wp:tag_name><![CDATA[Agnes]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>641922</wp:term_id><wp:tag_slug>android</wp:tag_slug><wp:tag_name><![CDATA[Android]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>152410</wp:term_id><wp:tag_slug>annonce</wp:tag_slug><wp:tag_name><![CDATA[Annonce]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4276</wp:term_id><wp:tag_slug>api</wp:tag_slug><wp:tag_name><![CDATA[API]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>304367</wp:term_id><wp:tag_slug>apprentissage</wp:tag_slug><wp:tag_name><![CDATA[Apprentissage]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3867</wp:term_id><wp:tag_slug>article</wp:tag_slug><wp:tag_name><![CDATA[Article]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>126376</wp:term_id><wp:tag_slug>avatar</wp:tag_slug><wp:tag_name><![CDATA[Avatar]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4229</wp:term_id><wp:tag_slug>barcamp</wp:tag_slug><wp:tag_name><![CDATA[Barcamp]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>326938291</wp:term_id><wp:tag_slug>basededonn</wp:tag_slug><wp:tag_name><![CDATA[Basededonn]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>75400</wp:term_id><wp:tag_slug>bdd</wp:tag_slug><wp:tag_name><![CDATA[Bdd]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>15968671</wp:term_id><wp:tag_slug>bigdata</wp:tag_slug><wp:tag_name><![CDATA[Bigdata]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2260428</wp:term_id><wp:tag_slug>bluej</wp:tag_slug><wp:tag_name><![CDATA[BlueJ]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>160289</wp:term_id><wp:tag_slug>bonne</wp:tag_slug><wp:tag_name><![CDATA[Bonne]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>114042</wp:term_id><wp:tag_slug>bootstrap</wp:tag_slug><wp:tag_name><![CDATA[Bootstrap]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>59038636</wp:term_id><wp:tag_slug>breizhcamp</wp:tag_slug><wp:tag_name><![CDATA[Breizhcamp]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>134070291</wp:term_id><wp:tag_slug>breizhjug</wp:tag_slug><wp:tag_name><![CDATA[BreizhJug]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>49566</wp:term_id><wp:tag_slug>bytecode</wp:tag_slug><wp:tag_name><![CDATA[Bytecode]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>29733</wp:term_id><wp:tag_slug>cache</wp:tag_slug><wp:tag_name><![CDATA[Cache]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>19867</wp:term_id><wp:tag_slug>challenge</wp:tag_slug><wp:tag_name><![CDATA[Challenge]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4487764</wp:term_id><wp:tag_slug>championne</wp:tag_slug><wp:tag_name><![CDATA[Championne]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3026186</wp:term_id><wp:tag_slug>chargement</wp:tag_slug><wp:tag_name><![CDATA[Chargement]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>98822</wp:term_id><wp:tag_slug>cheatsheet</wp:tag_slug><wp:tag_name><![CDATA[Cheatsheet]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>487049</wp:term_id><wp:tag_slug>classe</wp:tag_slug><wp:tag_name><![CDATA[Classe]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3264111</wp:term_id><wp:tag_slug>classloader</wp:tag_slug><wp:tag_name><![CDATA[Classloader]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9519</wp:term_id><wp:tag_slug>clean</wp:tag_slug><wp:tag_name><![CDATA[Clean]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>17671583</wp:term_id><wp:tag_slug>cleancode</wp:tag_slug><wp:tag_name><![CDATA[Cleancode]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5738990</wp:term_id><wp:tag_slug>clojure</wp:tag_slug><wp:tag_name><![CDATA[Clojure]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>126174</wp:term_id><wp:tag_slug>closure</wp:tag_slug><wp:tag_name><![CDATA[Closure]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>656</wp:term_id><wp:tag_slug>code</wp:tag_slug><wp:tag_name><![CDATA[Code]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>10095</wp:term_id><wp:tag_slug>coder</wp:tag_slug><wp:tag_name><![CDATA[Coder]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>332</wp:term_id><wp:tag_slug>coding</wp:tag_slug><wp:tag_name><![CDATA[Coding]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>29450027</wp:term_id><wp:tag_slug>coffeescript</wp:tag_slug><wp:tag_name><![CDATA[CoffeeScript]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6747</wp:term_id><wp:tag_slug>collection</wp:tag_slug><wp:tag_name><![CDATA[Collection]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>12228</wp:term_id><wp:tag_slug>collector</wp:tag_slug><wp:tag_name><![CDATA[Collector]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>83714</wp:term_id><wp:tag_slug>commons</wp:tag_slug><wp:tag_name><![CDATA[Commons]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>427237</wp:term_id><wp:tag_slug>communaute</wp:tag_slug><wp:tag_name><![CDATA[Communaute]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2089355</wp:term_id><wp:tag_slug>comparaison</wp:tag_slug><wp:tag_name><![CDATA[Comparaison]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2814683</wp:term_id><wp:tag_slug>compareto</wp:tag_slug><wp:tag_name><![CDATA[CompareTo]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1159183</wp:term_id><wp:tag_slug>compil</wp:tag_slug><wp:tag_name><![CDATA[Compil]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>18884</wp:term_id><wp:tag_slug>concept</wp:tag_slug><wp:tag_name><![CDATA[Concept]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>217890</wp:term_id><wp:tag_slug>concurrence</wp:tag_slug><wp:tag_name><![CDATA[Concurrence]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>102587</wp:term_id><wp:tag_slug>conf</wp:tag_slug><wp:tag_name><![CDATA[Conf]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>33525</wp:term_id><wp:tag_slug>conference</wp:tag_slug><wp:tag_name><![CDATA[Conference]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2611</wp:term_id><wp:tag_slug>console</wp:tag_slug><wp:tag_name><![CDATA[Console]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>76917337</wp:term_id><wp:tag_slug>coursera</wp:tag_slug><wp:tag_name><![CDATA[Coursera]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5337649</wp:term_id><wp:tag_slug>covariance</wp:tag_slug><wp:tag_name><![CDATA[Covariance]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7158455</wp:term_id><wp:tag_slug>crepet</wp:tag_slug><wp:tag_name><![CDATA[Crepet]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>22379</wp:term_id><wp:tag_slug>data</wp:tag_slug><wp:tag_name><![CDATA[Data]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>475</wp:term_id><wp:tag_slug>database</wp:tag_slug><wp:tag_name><![CDATA[Database]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>65460562</wp:term_id><wp:tag_slug>datascience</wp:tag_slug><wp:tag_name><![CDATA[datascience]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>54013</wp:term_id><wp:tag_slug>date</wp:tag_slug><wp:tag_name><![CDATA[Date]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4667</wp:term_id><wp:tag_slug>db</wp:tag_slug><wp:tag_name><![CDATA[Db]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1511371</wp:term_id><wp:tag_slug>dbunit</wp:tag_slug><wp:tag_name><![CDATA[Dbunit]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>28136</wp:term_id><wp:tag_slug>debug</wp:tag_slug><wp:tag_name><![CDATA[Debug]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>778386</wp:term_id><wp:tag_slug>decode</wp:tag_slug><wp:tag_name><![CDATA[Decode]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>156147</wp:term_id><wp:tag_slug>decryptage</wp:tag_slug><wp:tag_name><![CDATA[Decryptage]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1535012</wp:term_id><wp:tag_slug>dependance</wp:tag_slug><wp:tag_name><![CDATA[Dependance]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>148</wp:term_id><wp:tag_slug>design</wp:tag_slug><wp:tag_name><![CDATA[Design]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>73808</wp:term_id><wp:tag_slug>detente</wp:tag_slug><wp:tag_name><![CDATA[Detente]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5117589</wp:term_id><wp:tag_slug>devfest</wp:tag_slug><wp:tag_name><![CDATA[Devfest]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>13573165</wp:term_id><wp:tag_slug>devoxx</wp:tag_slug><wp:tag_name><![CDATA[Devoxx]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>85865061</wp:term_id><wp:tag_slug>devoxxfr</wp:tag_slug><wp:tag_name><![CDATA[Devoxxfr]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>326938480</wp:term_id><wp:tag_slug>devoxxfrance</wp:tag_slug><wp:tag_name><![CDATA[DevoxxFrance]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>68057</wp:term_id><wp:tag_slug>doc</wp:tag_slug><wp:tag_name><![CDATA[Doc]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>19551</wp:term_id><wp:tag_slug>documentation</wp:tag_slug><wp:tag_name><![CDATA[Documentation]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>129841</wp:term_id><wp:tag_slug>driver</wp:tag_slug><wp:tag_name><![CDATA[Driver]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>58204</wp:term_id><wp:tag_slug>dsl</wp:tag_slug><wp:tag_name><![CDATA[DSL]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>870039</wp:term_id><wp:tag_slug>duchess</wp:tag_slug><wp:tag_name><![CDATA[Duchess]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>26124</wp:term_id><wp:tag_slug>dump</wp:tag_slug><wp:tag_name><![CDATA[Dump]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>239761</wp:term_id><wp:tag_slug>early</wp:tag_slug><wp:tag_name><![CDATA[Early]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2094549</wp:term_id><wp:tag_slug>easyeclipse</wp:tag_slug><wp:tag_name><![CDATA[EasyEclipse]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>18466</wp:term_id><wp:tag_slug>eclipse</wp:tag_slug><wp:tag_name><![CDATA[Eclipse]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>62677</wp:term_id><wp:tag_slug>eden</wp:tag_slug><wp:tag_name><![CDATA[Eden]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2991866</wp:term_id><wp:tag_slug>efficace</wp:tag_slug><wp:tag_name><![CDATA[Efficace]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>16242682</wp:term_id><wp:tag_slug>efficacit</wp:tag_slug><wp:tag_name><![CDATA[Efficacit]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>190655</wp:term_id><wp:tag_slug>elt</wp:tag_slug><wp:tag_name><![CDATA[ELT]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>271280</wp:term_id><wp:tag_slug>encode</wp:tag_slug><wp:tag_name><![CDATA[Encode]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>40472</wp:term_id><wp:tag_slug>engine</wp:tag_slug><wp:tag_name><![CDATA[Engine]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>137204</wp:term_id><wp:tag_slug>entity</wp:tag_slug><wp:tag_name><![CDATA[Entity]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>21307</wp:term_id><wp:tag_slug>entreprise</wp:tag_slug><wp:tag_name><![CDATA[entreprise]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>220607</wp:term_id><wp:tag_slug>equals</wp:tag_slug><wp:tag_name><![CDATA[equals]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>174620</wp:term_id><wp:tag_slug>ergonomie</wp:tag_slug><wp:tag_name><![CDATA[Ergonomie]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11869</wp:term_id><wp:tag_slug>error</wp:tag_slug><wp:tag_name><![CDATA[Error]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>563381</wp:term_id><wp:tag_slug>exception</wp:tag_slug><wp:tag_name><![CDATA[Exception]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>23527</wp:term_id><wp:tag_slug>expression</wp:tag_slug><wp:tag_name><![CDATA[Expression]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>40044</wp:term_id><wp:tag_slug>fake</wp:tag_slug><wp:tag_name><![CDATA[Fake]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>126759186</wp:term_id><wp:tag_slug>fluentlenium</wp:tag_slug><wp:tag_name><![CDATA[Fluentlenium]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1771509</wp:term_id><wp:tag_slug>flume</wp:tag_slug><wp:tag_name><![CDATA[Flume]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>23053</wp:term_id><wp:tag_slug>folding</wp:tag_slug><wp:tag_name><![CDATA[Folding]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>51787491</wp:term_id><wp:tag_slug>fonctionnalit</wp:tag_slug><wp:tag_name><![CDATA[Fonctionnalit]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1801207</wp:term_id><wp:tag_slug>fonctionnelle</wp:tag_slug><wp:tag_name><![CDATA[Fonctionnelle]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>57359</wp:term_id><wp:tag_slug>formation</wp:tag_slug><wp:tag_name><![CDATA[Formation]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>14442</wp:term_id><wp:tag_slug>fr</wp:tag_slug><wp:tag_name><![CDATA[Fr]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7136</wp:term_id><wp:tag_slug>framework</wp:tag_slug><wp:tag_name><![CDATA[Framework]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4704</wp:term_id><wp:tag_slug>france</wp:tag_slug><wp:tag_name><![CDATA[France]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2850</wp:term_id><wp:tag_slug>future</wp:tag_slug><wp:tag_name><![CDATA[Future]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>115477</wp:term_id><wp:tag_slug>gag</wp:tag_slug><wp:tag_name><![CDATA[Gag]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>42975</wp:term_id><wp:tag_slug>garbage</wp:tag_slug><wp:tag_name><![CDATA[Garbage]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4237327</wp:term_id><wp:tag_slug>gatling</wp:tag_slug><wp:tag_name><![CDATA[Gatling]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4134</wp:term_id><wp:tag_slug>gc</wp:tag_slug><wp:tag_name><![CDATA[Gc]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2775158</wp:term_id><wp:tag_slug>gdg</wp:tag_slug><wp:tag_name><![CDATA[Gdg]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>257</wp:term_id><wp:tag_slug>geek</wp:tag_slug><wp:tag_name><![CDATA[Geek]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>155032</wp:term_id><wp:tag_slug>gestion</wp:tag_slug><wp:tag_name><![CDATA[Gestion]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1065464</wp:term_id><wp:tag_slug>gestionnaire</wp:tag_slug><wp:tag_name><![CDATA[Gestionnaire]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>383897524</wp:term_id><wp:tag_slug>gildedrose</wp:tag_slug><wp:tag_name><![CDATA[GildedRose]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>81</wp:term_id><wp:tag_slug>google</wp:tag_slug><wp:tag_name><![CDATA[Google]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7337327</wp:term_id><wp:tag_slug>googleio</wp:tag_slug><wp:tag_name><![CDATA[Googleio]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>883</wp:term_id><wp:tag_slug>groovy</wp:tag_slug><wp:tag_name><![CDATA[Groovy]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1753091</wp:term_id><wp:tag_slug>guava</wp:tag_slug><wp:tag_name><![CDATA[Guava]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3251196</wp:term_id><wp:tag_slug>hadoop</wp:tag_slug><wp:tag_name><![CDATA[Hadoop]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2810750</wp:term_id><wp:tag_slug>hashcode</wp:tag_slug><wp:tag_name><![CDATA[hashcode]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>90634092</wp:term_id><wp:tag_slug>hibernateogm</wp:tag_slug><wp:tag_name><![CDATA[Hibernateogm]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>27785</wp:term_id><wp:tag_slug>histoire</wp:tag_slug><wp:tag_name><![CDATA[Histoire]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>313764</wp:term_id><wp:tag_slug>hotspot</wp:tag_slug><wp:tag_name><![CDATA[Hotspot]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1064509</wp:term_id><wp:tag_slug>ibatis</wp:tag_slug><wp:tag_name><![CDATA[IBatis]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7746</wp:term_id><wp:tag_slug>ide</wp:tag_slug><wp:tag_name><![CDATA[Ide]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2933</wp:term_id><wp:tag_slug>idea</wp:tag_slug><wp:tag_name><![CDATA[Idea]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>24488895</wp:term_id><wp:tag_slug>infinispan</wp:tag_slug><wp:tag_name><![CDATA[Infinispan]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5053445</wp:term_id><wp:tag_slug>instanceof</wp:tag_slug><wp:tag_name><![CDATA[InstanceOf]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11929</wp:term_id><wp:tag_slug>integration</wp:tag_slug><wp:tag_name><![CDATA[Integration]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>114384</wp:term_id><wp:tag_slug>intellij</wp:tag_slug><wp:tag_name><![CDATA[Intellij]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1277638</wp:term_id><wp:tag_slug>interpret</wp:tag_slug><wp:tag_name><![CDATA[Interpret]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1017</wp:term_id><wp:tag_slug>java</wp:tag_slug><wp:tag_name><![CDATA[Java]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1504219</wp:term_id><wp:tag_slug>javadoc</wp:tag_slug><wp:tag_name><![CDATA[Javadoc]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>196534</wp:term_id><wp:tag_slug>javaee</wp:tag_slug><wp:tag_name><![CDATA[JavaEE]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>457</wp:term_id><wp:tag_slug>javascript</wp:tag_slug><wp:tag_name><![CDATA[Javascript]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>12943</wp:term_id><wp:tag_slug>jboss</wp:tag_slug><wp:tag_name><![CDATA[Jboss]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4970431</wp:term_id><wp:tag_slug>jcg</wp:tag_slug><wp:tag_name><![CDATA[JCG]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1835690</wp:term_id><wp:tag_slug>jconsole</wp:tag_slug><wp:tag_name><![CDATA[Jconsole]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>239322</wp:term_id><wp:tag_slug>jcp</wp:tag_slug><wp:tag_name><![CDATA[JCP]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>321679</wp:term_id><wp:tag_slug>jdk</wp:tag_slug><wp:tag_name><![CDATA[JDK]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>351789</wp:term_id><wp:tag_slug>jenkins</wp:tag_slug><wp:tag_name><![CDATA[Jenkins]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>165328993</wp:term_id><wp:tag_slug>jenv</wp:tag_slug><wp:tag_name><![CDATA[Jenv]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2338496</wp:term_id><wp:tag_slug>jep</wp:tag_slug><wp:tag_name><![CDATA[JEP]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>53798</wp:term_id><wp:tag_slug>jeu</wp:tag_slug><wp:tag_name><![CDATA[Jeu]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>310545</wp:term_id><wp:tag_slug>jigsaw</wp:tag_slug><wp:tag_name><![CDATA[Jigsaw]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>94732555</wp:term_id><wp:tag_slug>jinq</wp:tag_slug><wp:tag_name><![CDATA[Jinq]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1137001</wp:term_id><wp:tag_slug>jit</wp:tag_slug><wp:tag_name><![CDATA[JIT]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>423143</wp:term_id><wp:tag_slug>joda</wp:tag_slug><wp:tag_name><![CDATA[Joda]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2166465</wp:term_id><wp:tag_slug>jongo</wp:tag_slug><wp:tag_name><![CDATA[Jongo]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>326938453</wp:term_id><wp:tag_slug>jroquit</wp:tag_slug><wp:tag_name><![CDATA[Jroquit]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>72721</wp:term_id><wp:tag_slug>json</wp:tag_slug><wp:tag_name><![CDATA[Json]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>239377</wp:term_id><wp:tag_slug>jsr</wp:tag_slug><wp:tag_name><![CDATA[JSR]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>918301</wp:term_id><wp:tag_slug>jug</wp:tag_slug><wp:tag_name><![CDATA[Jug]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>59038623</wp:term_id><wp:tag_slug>jugsummercamp</wp:tag_slug><wp:tag_name><![CDATA[Jugsummercamp]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>461295</wp:term_id><wp:tag_slug>jvm</wp:tag_slug><wp:tag_name><![CDATA[Jvm]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>133657</wp:term_id><wp:tag_slug>kata</wp:tag_slug><wp:tag_name><![CDATA[Kata]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>180742</wp:term_id><wp:tag_slug>keyword</wp:tag_slug><wp:tag_name><![CDATA[Keyword]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>656273</wp:term_id><wp:tag_slug>lagom</wp:tag_slug><wp:tag_name><![CDATA[lagom]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>172054</wp:term_id><wp:tag_slug>lambda</wp:tag_slug><wp:tag_name><![CDATA[Lambda]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>31494989</wp:term_id><wp:tag_slug>lambdaj</wp:tag_slug><wp:tag_name><![CDATA[Lambdaj]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>468162</wp:term_id><wp:tag_slug>langage</wp:tag_slug><wp:tag_name><![CDATA[Langage]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11449116</wp:term_id><wp:tag_slug>larochelle</wp:tag_slug><wp:tag_name><![CDATA[Larochelle]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>40054</wp:term_id><wp:tag_slug>lib</wp:tag_slug><wp:tag_name><![CDATA[Lib]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8393500</wp:term_id><wp:tag_slug>liberee</wp:tag_slug><wp:tag_name><![CDATA[libérée]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>80632918</wp:term_id><wp:tag_slug>liquidbase</wp:tag_slug><wp:tag_name><![CDATA[Liquidbase]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>226036647</wp:term_id><wp:tag_slug>listenablefuture</wp:tag_slug><wp:tag_name><![CDATA[ListenableFuture]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7808</wp:term_id><wp:tag_slug>livre</wp:tag_slug><wp:tag_name><![CDATA[Livre]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>188920</wp:term_id><wp:tag_slug>load</wp:tag_slug><wp:tag_name><![CDATA[Load]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>83047</wp:term_id><wp:tag_slug>lopez</wp:tag_slug><wp:tag_name><![CDATA[Lopez]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>81758</wp:term_id><wp:tag_slug>lyon</wp:tag_slug><wp:tag_name><![CDATA[Lyon]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>14527</wp:term_id><wp:tag_slug>major</wp:tag_slug><wp:tag_name><![CDATA[Major]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>71456</wp:term_id><wp:tag_slug>manipulation</wp:tag_slug><wp:tag_name><![CDATA[Manipulation]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>40477</wp:term_id><wp:tag_slug>map</wp:tag_slug><wp:tag_name><![CDATA[Map]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7927</wp:term_id><wp:tag_slug>memento</wp:tag_slug><wp:tag_name><![CDATA[Memento]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>179880</wp:term_id><wp:tag_slug>memoire</wp:tag_slug><wp:tag_name><![CDATA[Memoire]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1158</wp:term_id><wp:tag_slug>migration</wp:tag_slug><wp:tag_name><![CDATA[Migration]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>21856</wp:term_id><wp:tag_slug>milestone</wp:tag_slug><wp:tag_name><![CDATA[Milestone]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>252607</wp:term_id><wp:tag_slug>minor</wp:tag_slug><wp:tag_name><![CDATA[Minor]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8180</wp:term_id><wp:tag_slug>mix</wp:tag_slug><wp:tag_name><![CDATA[Mix]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>120</wp:term_id><wp:tag_slug>mobile</wp:tag_slug><wp:tag_name><![CDATA[Mobile]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>155377</wp:term_id><wp:tag_slug>mock</wp:tag_slug><wp:tag_name><![CDATA[Mock]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3992763</wp:term_id><wp:tag_slug>mockito</wp:tag_slug><wp:tag_name><![CDATA[Mockito]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>82179</wp:term_id><wp:tag_slug>module</wp:tag_slug><wp:tag_name><![CDATA[Module]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>21954763</wp:term_id><wp:tag_slug>mongodb</wp:tag_slug><wp:tag_name><![CDATA[MongoDB]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9489678</wp:term_id><wp:tag_slug>mooc</wp:tag_slug><wp:tag_name><![CDATA[MOOC]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4203534</wp:term_id><wp:tag_slug>multibag</wp:tag_slug><wp:tag_name><![CDATA[Multibag]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6705450</wp:term_id><wp:tag_slug>multiset</wp:tag_slug><wp:tag_name><![CDATA[Multiset]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>46136643</wp:term_id><wp:tag_slug>mybatis</wp:tag_slug><wp:tag_name><![CDATA[MyBatis]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>12962</wp:term_id><wp:tag_slug>netbeans</wp:tag_slug><wp:tag_name><![CDATA[Netbeans]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>96021</wp:term_id><wp:tag_slug>ninja</wp:tag_slug><wp:tag_name><![CDATA[Ninja]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>71885999</wp:term_id><wp:tag_slug>ninjasquad</wp:tag_slug><wp:tag_name><![CDATA[Ninjasquad]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11017949</wp:term_id><wp:tag_slug>noclassdeffounderror</wp:tag_slug><wp:tag_name><![CDATA[NoclassdeffoundError]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>326937858</wp:term_id><wp:tag_slug>nommenclature</wp:tag_slug><wp:tag_name><![CDATA[Nommenclature]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>22319505</wp:term_id><wp:tag_slug>nosql</wp:tag_slug><wp:tag_name><![CDATA[NoSQL]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>53983</wp:term_id><wp:tag_slug>null</wp:tag_slug><wp:tag_name><![CDATA[Null]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>963316</wp:term_id><wp:tag_slug>oak</wp:tag_slug><wp:tag_name><![CDATA[Oak]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>843149</wp:term_id><wp:tag_slug>optional</wp:tag_slug><wp:tag_name><![CDATA[Optional]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3766</wp:term_id><wp:tag_slug>oracle</wp:tag_slug><wp:tag_name><![CDATA[Oracle]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>43230</wp:term_id><wp:tag_slug>orm</wp:tag_slug><wp:tag_name><![CDATA[Orm]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>42609656</wp:term_id><wp:tag_slug>ormlite</wp:tag_slug><wp:tag_name><![CDATA[OrmLite]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11886</wp:term_id><wp:tag_slug>outils</wp:tag_slug><wp:tag_name><![CDATA[Outils]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9700439</wp:term_id><wp:tag_slug>parisjug</wp:tag_slug><wp:tag_name><![CDATA[Parisjug]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1029805</wp:term_id><wp:tag_slug>parsing</wp:tag_slug><wp:tag_name><![CDATA[parsing]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>72929</wp:term_id><wp:tag_slug>partition</wp:tag_slug><wp:tag_name><![CDATA[Partition]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>40208</wp:term_id><wp:tag_slug>pattern</wp:tag_slug><wp:tag_name><![CDATA[Pattern]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1930</wp:term_id><wp:tag_slug>performance</wp:tag_slug><wp:tag_name><![CDATA[Performance]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>74148</wp:term_id><wp:tag_slug>persistence</wp:tag_slug><wp:tag_name><![CDATA[Persistence]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3965</wp:term_id><wp:tag_slug>plugin</wp:tag_slug><wp:tag_name><![CDATA[Plugin]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1142</wp:term_id><wp:tag_slug>podcast</wp:tag_slug><wp:tag_name><![CDATA[Podcast]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>31344643</wp:term_id><wp:tag_slug>powermock</wp:tag_slug><wp:tag_name><![CDATA[Powermock]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>156459</wp:term_id><wp:tag_slug>pratique</wp:tag_slug><wp:tag_name><![CDATA[Pratique]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9246</wp:term_id><wp:tag_slug>preview</wp:tag_slug><wp:tag_name><![CDATA[Preview]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5059751</wp:term_id><wp:tag_slug>productivit</wp:tag_slug><wp:tag_name><![CDATA[Productivit]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>25369</wp:term_id><wp:tag_slug>profil</wp:tag_slug><wp:tag_name><![CDATA[Profil]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5712</wp:term_id><wp:tag_slug>programmation</wp:tag_slug><wp:tag_name><![CDATA[Programmation]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>16889</wp:term_id><wp:tag_slug>programme</wp:tag_slug><wp:tag_name><![CDATA[Programme]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>196</wp:term_id><wp:tag_slug>programming</wp:tag_slug><wp:tag_name><![CDATA[programming]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>14833833</wp:term_id><wp:tag_slug>proprement</wp:tag_slug><wp:tag_name><![CDATA[Proprement]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>473</wp:term_id><wp:tag_slug>puzzle</wp:tag_slug><wp:tag_name><![CDATA[Puzzle]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>832</wp:term_id><wp:tag_slug>python</wp:tag_slug><wp:tag_name><![CDATA[Python]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5916536</wp:term_id><wp:tag_slug>qualit</wp:tag_slug><wp:tag_name><![CDATA[Qualit]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>395</wp:term_id><wp:tag_slug>question</wp:tag_slug><wp:tag_name><![CDATA[Question]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5466</wp:term_id><wp:tag_slug>quickies</wp:tag_slug><wp:tag_name><![CDATA[Quickies]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>847825</wp:term_id><wp:tag_slug>reactive</wp:tag_slug><wp:tag_name><![CDATA[reactive]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>72341</wp:term_id><wp:tag_slug>real</wp:tag_slug><wp:tag_name><![CDATA[Real]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>343333</wp:term_id><wp:tag_slug>recrutement</wp:tag_slug><wp:tag_name><![CDATA[Recrutement]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>54712</wp:term_id><wp:tag_slug>refactoring</wp:tag_slug><wp:tag_name><![CDATA[Refactoring]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>10919</wp:term_id><wp:tag_slug>reference</wp:tag_slug><wp:tag_name><![CDATA[Reference]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2283599</wp:term_id><wp:tag_slug>regle</wp:tag_slug><wp:tag_name><![CDATA[Regle]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7781</wp:term_id><wp:tag_slug>release</wp:tag_slug><wp:tag_name><![CDATA[Release]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>290708</wp:term_id><wp:tag_slug>rendezvous</wp:tag_slug><wp:tag_name><![CDATA[Rendezvous]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>17573</wp:term_id><wp:tag_slug>report</wp:tag_slug><wp:tag_name><![CDATA[Report]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>52421</wp:term_id><wp:tag_slug>reprise</wp:tag_slug><wp:tag_name><![CDATA[Reprise]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>54452</wp:term_id><wp:tag_slug>ressource</wp:tag_slug><wp:tag_name><![CDATA[Ressource]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>35090</wp:term_id><wp:tag_slug>revision</wp:tag_slug><wp:tag_name><![CDATA[Revision]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>142601</wp:term_id><wp:tag_slug>roadmap</wp:tag_slug><wp:tag_name><![CDATA[Roadmap]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>4872</wp:term_id><wp:tag_slug>ruby</wp:tag_slug><wp:tag_name><![CDATA[Ruby]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>14305</wp:term_id><wp:tag_slug>rule</wp:tag_slug><wp:tag_name><![CDATA[Rule]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>312256</wp:term_id><wp:tag_slug>scala</wp:tag_slug><wp:tag_name><![CDATA[Scala]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>18317491</wp:term_id><wp:tag_slug>scalex</wp:tag_slug><wp:tag_name><![CDATA[Scalex]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>130307</wp:term_id><wp:tag_slug>scout</wp:tag_slug><wp:tag_name><![CDATA[Scout]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2373</wp:term_id><wp:tag_slug>search</wp:tag_slug><wp:tag_name><![CDATA[Search]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>111899</wp:term_id><wp:tag_slug>selenium</wp:tag_slug><wp:tag_name><![CDATA[Selenium]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>181239</wp:term_id><wp:tag_slug>serialisation</wp:tag_slug><wp:tag_name><![CDATA[Serialisation]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>19638</wp:term_id><wp:tag_slug>serie</wp:tag_slug><wp:tag_name><![CDATA[Serie]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>7290247</wp:term_id><wp:tag_slug>sfeir</wp:tag_slug><wp:tag_name><![CDATA[Sfeir]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>10519</wp:term_id><wp:tag_slug>smtp</wp:tag_slug><wp:tag_name><![CDATA[Smtp]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1166</wp:term_id><wp:tag_slug>societe</wp:tag_slug><wp:tag_name><![CDATA[société]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>34998411</wp:term_id><wp:tag_slug>spark</wp:tag_slug><wp:tag_name><![CDATA[Spark]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>9486</wp:term_id><wp:tag_slug>spring</wp:tag_slug><wp:tag_name><![CDATA[Spring]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>221019527</wp:term_id><wp:tag_slug>springboot</wp:tag_slug><wp:tag_name><![CDATA[SpringBoot]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>82535</wp:term_id><wp:tag_slug>squad</wp:tag_slug><wp:tag_name><![CDATA[Squad]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2622</wp:term_id><wp:tag_slug>story</wp:tag_slug><wp:tag_name><![CDATA[Story]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>94039</wp:term_id><wp:tag_slug>stream</wp:tag_slug><wp:tag_name><![CDATA[Stream]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>2616</wp:term_id><wp:tag_slug>stress</wp:tag_slug><wp:tag_name><![CDATA[Stress]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>8</wp:term_id><wp:tag_slug>test</wp:tag_slug><wp:tag_name><![CDATA[Test]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>12932</wp:term_id><wp:tag_slug>thread</wp:tag_slug><wp:tag_name><![CDATA[Thread]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>5087</wp:term_id><wp:tag_slug>time</wp:tag_slug><wp:tag_name><![CDATA[Time]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1788</wp:term_id><wp:tag_slug>tips</wp:tag_slug><wp:tag_name><![CDATA[Tips]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>22353</wp:term_id><wp:tag_slug>tool</wp:tag_slug><wp:tag_name><![CDATA[Tool]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>1981</wp:term_id><wp:tag_slug>tools</wp:tag_slug><wp:tag_name><![CDATA[Tools]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>28301879</wp:term_id><wp:tag_slug>typage</wp:tag_slug><wp:tag_name><![CDATA[Typage]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>84329</wp:term_id><wp:tag_slug>ubiquity</wp:tag_slug><wp:tag_name><![CDATA[Ubiquity]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>143348</wp:term_id><wp:tag_slug>unit</wp:tag_slug><wp:tag_name><![CDATA[Unit]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>11482791</wp:term_id><wp:tag_slug>unitaire</wp:tag_slug><wp:tag_name><![CDATA[Unitaire]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>151020</wp:term_id><wp:tag_slug>unreachable</wp:tag_slug><wp:tag_name><![CDATA[Unreachable]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>309228</wp:term_id><wp:tag_slug>utilitaire</wp:tag_slug><wp:tag_name><![CDATA[Utilitaire]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>10192</wp:term_id><wp:tag_slug>v</wp:tag_slug><wp:tag_name><![CDATA[V]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>13432</wp:term_id><wp:tag_slug>version</wp:tag_slug><wp:tag_name><![CDATA[Version]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>3171430</wp:term_id><wp:tag_slug>versionning</wp:tag_slug><wp:tag_name><![CDATA[Versionning]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>247219</wp:term_id><wp:tag_slug>versus</wp:tag_slug><wp:tag_name><![CDATA[Versus]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>22902862</wp:term_id><wp:tag_slug>vertx</wp:tag_slug><wp:tag_name><![CDATA[Vertx]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>38600</wp:term_id><wp:tag_slug>vmware</wp:tag_slug><wp:tag_name><![CDATA[Vmware]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>10194</wp:term_id><wp:tag_slug>w</wp:tag_slug><wp:tag_name><![CDATA[W]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>185565</wp:term_id><wp:tag_slug>weak</wp:tag_slug><wp:tag_name><![CDATA[Weak]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>151</wp:term_id><wp:tag_slug>web</wp:tag_slug><wp:tag_name><![CDATA[Web]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>6852</wp:term_id><wp:tag_slug>xml</wp:tag_slug><wp:tag_name><![CDATA[Xml]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>45675</wp:term_id><wp:tag_slug>young</wp:tag_slug><wp:tag_name><![CDATA[Young]]></wp:tag_name>
</wp:tag>
	<wp:tag><wp:term_id>425781</wp:term_id><wp:tag_slug>zookeeper</wp:tag_slug><wp:tag_name><![CDATA[zookeeper]]></wp:tag_name>
</wp:tag>

	<generator>http://wordpress.com/</generator>
<image>
		<url>http://s0.wp.com/i/buttonw-com.png</url>
		<title>Coder&#039;s IO</title>
		<link>https://thecoderwriter.wordpress.com</link>
	</image>
		
	<item>
		<title>Breizhcamp2</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/24/breizhcamp2/</link>
		<pubDate>Sat, 24 Mar 2012 00:05:09 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/24/breizhcamp2/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le 14 et 15 juin 2012, une conférence s’annonce à Rennes : Breizhcamp 2. <br /><br />La conférence est organisée par le <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/109563201897730719916">BreizhJUG</a></span> et l’ensemble des communautés techniques de Rennes.<br />Des sujets d’actualité sur les technologies, les méthodes de développement et les outils seront abordés.<br /><br />Pour cette nouvelle édition, la conférence se déroulera sur 2 jours à l’instar de la première édition qui était organisée sur 1 journée.<br /><br />Les thèmes se répartiront de la façon suivante : <br />	<br />	<i>Jour 1, journée “découverte”</i> :<br />		Des sessions longues <b>Universités</b> pour traiter un sujet en profondeur<br />		Des sessions <b>Tools in action</b> dédiées à 100% à la pratique pour découvrir concrètement un sujet.<br />	<i>Jour 2, journée “conférence en parallèle”</i> : <br />		Plusieurs conférences se déroulant en parallèle<br />		Des ateliers, labs, open-space seront mis à disposition pour échanger<br />		Des quickies, sessions courtes de 15 à 30mn.<br /><br />Un Call For Paper est ouvert jusqu’au 15 avril.<br />Aujourd’hui, il n’y a pas encore de programme disponible en ligne, alors n’hésitez pas à faire vos proposition.<br /><br />A noter : cette conférence est éligible au DIF, cela peut être un moyen d’assister à la conférence malgré une entreprise hermétique à l’intérêt que peut représenter un tel rendez-vous.<br /><br />En parallèle de l’annonce officielle de cette conférence, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/117387060365568560076">nicolas de loof</a></span> annonce sur son blog (<a href="http://blog.loof.fr/2012/03/gagnez-une-place-pour-devoxx.html">http://blog.loof.fr/2012/03/gagnez-une-place-pour-devoxx.html</a>) qu’un concours est lancé en partenariat avec <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/107928285156726083292">CloudBees</a></span> (sponsor de la conférence). <br />Le pré-requis de ce concours : être un développeur qui a envie d’exprimer son talent :)<br /><br />L’enjeu de ce concours est de gagner une place (3 jours) pour la grande conférence au mois d’avril : Devoxx France.<br />Que faut-il faire pour gagner ce concours ?<br /><br />Une application “très minimaliste” a été mise en ligne à cette adresse : <a href="http://app.breizhcamp.cloudbees.net">http://app.breizhcamp.cloudbees.net</a><br />Le code source a été déployé sur Github. <br />L’idée est de faire évoluer l’application en apportant de la valeur aux administrateurs, utilisateurs et ceci avec du code de qualité.<br />Pour cela, il faut forker le projet, et une fois modifié, envoyer un pull-request. En fonction des critères décris précédemment, le code sera analysé ainsi que l’application ; et le jury donnera des points. Le développeur ayant collecté le plus grand nombre de points se verra attribuer le fameux sésame.<br /><br />Entre les Calls For Paper et le concours, il y a de quoi faire d’ici le mois de juin... alors ne tardez pas et inscrivez-vous, forkez le projet, envoyez vos “papers” ... :-)<br /><br /><br /><br />#java  #conférence   #breizhcamp    #breizhJug   #devoxxFrance﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>348</wp:post_id>
		<wp:post_date>2012-03-24 00:05:09</wp:post_date>
		<wp:post_date_gmt>2012-03-24 00:05:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>breizhcamp2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="breizhcamp"><![CDATA[Breizhcamp]]></category>
		<category domain="post_tag" nicename="breizhjug"><![CDATA[BreizhJug]]></category>
		<category domain="post_tag" nicename="conf"><![CDATA[Conf]]></category>
		<category domain="post_tag" nicename="devoxxfrance"><![CDATA[DevoxxFrance]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Les mains dans le code : Soirée Clojure</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/21/les-mains-dans-le-code-soiree-clojure/</link>
		<pubDate>Wed, 21 Mar 2012 23:09:32 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/21/les-mains-dans-le-code-soiree-clojure/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Lors d’un précédent post, j’avais présenté les Duchess. <br />La communauté Duchess propose une session <i>les mains dans le code</i> autour de Clojure.<br /><br />Cette soirée aura lieu dans les locaux de Zenika le jeudi 29 mars de 19h30 à 22h00.<br />Les conditions requises pour s’inscrire à la soirée sont très simples : <br />	- un ordinateur portable,<br />	- un éditeur de texte,<br />	- et penser à s’inscrire :-) <a href="http://www.eventbrite.com/event/3196507841">http://www.eventbrite.com/event/3196507841</a><br /><br />Cette présentation sera assurée par deux intervenants de sfeir : <br />	- <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/101469499949599325335">Antoine R. Dumont</a></span> <br />	- <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/118444594775211587708">Denis Labaye</a></span> <br /><br /><b>Qu’est ce que Clojure ?</b><br /><br />Clojure est un langage moderne de <b>programmation fonctionnelle</b>, à destination de la <b>plateforme Java</b>. La principale orientation de ce langage est la <b>programmation concurrente</b>.<br />Il a été créé en 2007 par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/101598622654270873929">Rich Hickey</a></span> sous la licence Eclipse Public License.<br /><br />Clojure est un langage dynamique fortement typé. Il tient ses influences principalement de :<br />	- Lisp,<br />	- ML,<br />	- Haskell,<br />	- Erlang.<br /><br />La syntaxe du langage se base sur les expressions symboliques. Il est un dialecte de Lisp.<br /><br />Quelques caractéristiques du langage : <br />	- Les fonctions sont des objets,<br />	- La programmation par récursion est préférée à l’instar de la programmation par boucle,<br />	- Clojure propose une grande variété de structures de données non mutables et persistantes.<br />	- Clojure s’intègre au langage Java. La compilation d’un programme écrit avec Clojure produit directement du bytecode compréhensible par la JVM.<br /><br />Le langage met à disposition une console permettant de tester la syntaxe du langage.<br />Pour accéder à cette console et commencer à jouer avec le langage, c’est très simple : il suffit de télécharger l’archive directement sur le site de clojure et de lancer une jvm sur la classe clojure.Main.<br /><br />Ce langage offre un grand nombre de possibilités, qu’il serait difficile de traiter de manière exhaustive, mais que vous pourrez découvrir sur le site ainsi qu’à la soirée organisée le 29 mars.<br /><br />#java  #jvm   #clojure﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>349</wp:post_id>
		<wp:post_date>2012-03-21 23:09:32</wp:post_date>
		<wp:post_date_gmt>2012-03-21 23:09:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-mains-dans-le-code-soiree-clojure</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clojure"><![CDATA[Clojure]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jvm"><![CDATA[Jvm]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Duchess</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/20/duchess/</link>
		<pubDate>Tue, 20 Mar 2012 01:12:03 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/20/duchess/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />A l’origine, JDuchess est un JUG féminin né en Hollande. Ce groupe a été fondé par Clara KO en 2007.<br /><br />La communauté compte fin 2011 plus de 400 membres à travers le monde.<br />les Duchess sont présentes principalement dans les pays suivants : <br />	- Hollande<br />	- Suède,<br />	- Allemagne,<br />	- Etats-Unis,<br />	- Brésil, <br />	- Afrique,<br />	- Indonésie.<br />	<br /><br />Les objectifs de la communauté Duchess :<br /><br />	- Faire se rencontrer les femmes passionnées par les technologies autour de java,<br />	- Leur faire de la visibilité au sein du monde Java,<br />	- Supporter les femmes dans leurs carrières,<br />	- Développement du leadership des femmes dans les compétences autour de Java<br />	- Sensibiliser les avantages de la diversité des genres dans le milieu professionnel,<br />	- Améliorer la compréhension des différences et des similitudes entre les genres, <br />	- Promouvoir un changement positif dans l&#039;image de l&#039;informatique,<br />	- Participer à des initiatives visant à accroître l&#039;afflux et la rétention des talents dans les carrières technologiques.<br /><br />Vous l’aurez noté, un groupe de Duchess représente la France au sein de la communauté internationale.<br /><br />L’idée est née au mois de novembre 2009 pendant la conférence Devoxx 09 lors d’une rencontre entre Clara Ko, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/108637836287903721076">Mathilde Rigabert Lemée</a></span> et <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/103893758048662223772">Ellène Dijoux</a></span>.<br />Le groupe sera lancé officiellement en février 2010 lors du deuxième anniversaire du <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/117770243677860856725">ParisJUG</a></span> par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/101641663893160877351">Antonio Goncalves</a></span>. Les Duchess faisaient leur premier talk au <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/117770243677860856725">ParisJUG</a></span> au mois de mars 2010.<br />Après ce lancement, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/100155138787932309893">Claude Falguiere</a></span> et <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/111883133949228858371">Laure Némée</a></span> viendront renforcer l’équipe pour la mise en place de la home page française sur le site <a href="http://jduchess.org">jduchess.org</a>.<br />L’histoire en image de la genèse des Duchess France : <a href="http://jduchess.org/duchess-france/blog/rencontre-a-devoxx/">http://jduchess.org/duchess-france/blog/rencontre-a-devoxx/</a><br /><br />Depuis, l&#039;équipe ne cesse de grandir : <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/112607442971583003195">Audrey Neveu</a></span> , <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/105175156939655748633">Katia Aresti</a></span> , <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/115064794182586862193">Blandine B.</a></span> , <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/116189330666769817164">agnes crepet</a></span> , <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/109852883948598718046">Eric Siber</a></span> (cette liste n&#039;est pas exhaustive)<br /><br />Entre le mois de mars 2010 et le mois de juillet 2010, le nombre d’inscrits a été multiplié par quatre.<br /><br />Les <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/107593008967827992880">Duchess France</a></span> proposent plusieurs rendez-vous et informations : <br /><br /> <b>- Les avant-Jug :</b> Café Vavin 18, Rue Vavin, 75006 Paris à partir de 18h30.<br /><b>- La marmitte :</b> Rendez-vous pour échanger sur des sujets autour du développement et de Java. Les sessions sont composées de 2 parties, l’atelier et l’open space.<br />	<b>- Calendrier des conférences :</b> C’est un calendrier référençant l’ensemble des évènements de la sphère Java.<br />	<b>- Préparation de la certification Java SCJP :</b> L’idée est de créer un groupe de travail afin de préparer la certification.<br /><br />Il est important de préciser que l’ensemble des évènements proposés par la communauté n’est en aucun cas réservé aux femmes et la gente masculine est le bienvenue. <br /><br />Les JDuchess sont naturellement présentes sur les réseaux sociaux : <br />	twitter :@duchessfr<br />	linkedin : <a href="http://www.linkedin.com/groups?mostPopular=&amp;gid=2750811">http://www.linkedin.com/groups?mostPopular=&amp;gid=2750811</a><br />	google group : <a href="https://sites.google.com/site/duchessfr/home">home | duchessfr</a><br /> G+ : <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/107593008967827992880">Duchess France</a></span> <br /><br />Quelques chiffres sur les Duchess : <a href="https://sites.google.com/site/duchessfr/stats">stats | duchessfr</a><br /><br /><br /><br />#java  #duchess   #communaute   #france﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>350</wp:post_id>
		<wp:post_date>2012-03-20 01:12:03</wp:post_date>
		<wp:post_date_gmt>2012-03-20 01:12:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>duchess</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="communaute"><![CDATA[Communaute]]></category>
		<category domain="post_tag" nicename="duchess"><![CDATA[Duchess]]></category>
		<category domain="post_tag" nicename="france"><![CDATA[France]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ORM Lite</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/16/orm-lite/</link>
		<pubDate>Fri, 16 Mar 2012 00:11:52 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/16/orm-lite/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Comme son nom l’indique, ORM Lite offre un framework léger autour du mapping objet/relationnel.<br /><br />La force de cet outil réside dans sa rapidité de mise en place et sa simplicité de prise en main.<br />Après avoir récupéré l’archive de l’outil, il suffit de 2 lignes de configuration de manière programmatique pour qu’il soit opérationnel et prêt à persister vos objets du modèle.<br /><br />De la même manière, ORM Lite fournit une factory (DAOManager) permettant de créer rapidement des DAOs à partir de la classe de l&#039;objet persisté. <br />Au delà des méthodes ‘classiques‘ fournies par les DAOs, un QueryBuilder est proposé afin de pouvoir implémenter des requêtes plus complexes, sur les bases d’un DSL.<br /><br />Les objets du modèle sont déclarés à partir d’un jeu d’annotations simple et expressif.<br /><br />Un système de cache est disponible, ce qui permet d’optimiser sa couche d’accès aux données en termes de temps de réponse et d’activité sur le serveur.<br /><br /><i>Volontairement je ne les nomme pas entity pour éviter de faire référence à l’annotation @Entity qui donne leurs noms aux objets mappés.</i><br /><br />Comme les célèbres frameworks de ce type, ORM Lite donne la possibilité de prendre en charge des spécificités de la base de données sous-jacente (DatabaseType).<br /><br />Les transactions sont supportées d’une manière simple en se basant sur un système de callback.<br /><br />Le projet propose une version adaptée à la plateforme Android. Pour l’avoir déjà utilisé dans ce cadre là, c’est très confortable de pouvoir travailler avec un ORM sur une plateforme où l’octet est compté.<br />L’ensemble des bases de données sont supportées. Si une base spécifique n’est pas supportée, il est possible d’étendre le framework facilement.<br /><br />Une intégration avec Spring est également proposée.<br /><br />Une seule ombre au tableau : on sort des standards par rapport à la spécification régissant l’ORM (JPA).<br /><br />Tous les points évoqués ci-dessus mettent en évidence l’ensemble des fonctionnalités du framework. On peut se rendre compte que, malgré sa simplicité d&#039;utilisation, l’outil est très complet.<br /><br />La documentation est riche et fournit beaucoup d&#039;exemples permettant de monter rapidement en compétence sur le sujet. <br /><br />#java  #orm   #ormLite   #persistence﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>351</wp:post_id>
		<wp:post_date>2012-03-16 00:11:52</wp:post_date>
		<wp:post_date_gmt>2012-03-16 00:11:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>orm-lite</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[Orm]]></category>
		<category domain="post_tag" nicename="ormlite"><![CDATA[OrmLite]]></category>
		<category domain="post_tag" nicename="persistence"><![CDATA[Persistence]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JUC : Jenkins User Conférence Paris 2012</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/13/juc-jenkins-user-conference-paris-2012/</link>
		<pubDate>Tue, 13 Mar 2012 22:50:57 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/13/juc-jenkins-user-conference-paris-2012/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Nous parlions récemment du célèbre outil d’intégration continue : Jenkins. +CloudBees organise une conférence autour de cet outil.<br /><br /><i>Pour rappel, </i><b><i>Cloudbees</i></b><i> (</i><i><a href="http://www.cloudbees.com/">http://www.cloudbees.com/</a></i><i>) est une entreprise proposant une usine logicielle sur le cloud. L’offre proposée est basée principalement sur Jenkins.</i><br /><br />Cette conférence se produira dans plusieurs villes à travers le monde dont Paris : <br /><br /> - <b>Paris, le 17 avril 2012</b><br /> - New York, 17 mai 2012<br /> - San Francisco, 30 septembre 2012<br /> - Anvers, 30 novembre 2012<br /><br />Le lieu : Paris Marriott Rive Gauche Hotel &amp; centre de conférence.<br /><br />Le programme de cette conférence sera très riche. Jenkins sera abordé sous toutes ses coutures : <br />	- Les bonnes pratiques à mettre en œuvre avec Jenkins,<br />	- Présentation de différents plugins,<br />	- Des workshops et démos,<br />	- Rencontrer des experts Jenkins,<br />	- etc<br /><br />Vous trouverez l’agenda complet de la conférence dans le lien du post.<br /><br />La keynote d’ouverture sera faite par le créateur de l’outil : <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/102087504529596572444">Kohsuke Kawaguchi</a></span>.<br /><br />Parmi les speakers, on peut compter un grand nombre de français : <br />	<br /><span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/105461265446151835406">Arnaud Héritier</a></span> et <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/111393145937875554935">Mathieu Hausherr</a></span> présenteront le développement iOS avec Jenkins,<br /><br /><span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/103481206777811579248">Nicolas De Loof</a></span> parlera de comment débuter avec Jenkins et co-présentera une introduction au plugin build-flow avec <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/100224549936132051980">Mathieu ANCELIN</a></span>,<br /><br /><span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/111268326109644121368">Olivier Lamy</a></span> expliquera comment est utilisé Jenkins au sein d’Apache,<br /><br /><span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/105635998831957375971">Benoit Moussaud</a></span> présentera les utilisations avancées de Jenkins.<br /><br />Cette liste n’est pas exhaustive.<br /><br />Cette conférence sera l’occasion de découvrir, re-découvrir, apprendre et partager autour de Jenkins.<br /><br />Tous les détails concernant la conférence sont disponibles dans le lien du post.﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>352</wp:post_id>
		<wp:post_date>2012-03-13 22:50:57</wp:post_date>
		<wp:post_date_gmt>2012-03-13 22:50:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>juc-jenkins-user-conference-paris-2012</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kata de refactoring Java</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/09/kata-de-refactoring-java/</link>
		<pubDate>Fri, 09 Mar 2012 23:11:21 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/09/kata-de-refactoring-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Connaissez vous les <i>katas de refactoring</i> ? J’ai souvent entendu parler de cette discipline sans jamais avoir l’occasion d’y participer. <br /><br />En quoi consiste un kata de refactoring ? <br /><br />C’est un exercice réalisé par un développeur qui va, en live, effectuer le refactoring d’un code en expliquant ses choix.<br /><br />En consultant mon google reader, je suis tombé sur un post du blog <a href="http://www.java-freelance.fr">http://www.java-freelance.fr</a>.<br />L’auteur du blog, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/103375082862953384894">Jean-Baptiste Lemée</a></span> , souhaitait participer au challenge : <i>Code story*</i>. Ecrire du code en live tout en commentant ses actions n’est pas une chose évidente. <br />Pour se préparer à cet exercice, il a décidé de s’enregistrer pendant qu’il effectuait un refactoring complet d’une classe java. La vidéo dure environ 10mn. <br /><br />Je trouve le principe très intéressant, que l’on ait un certain nombre d’années d’expérience ou que l’on débute, on a toujours quelque chose à apprendre.<br /><br /><br />*Pour rappel, Code Story est un challenge organisé par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/100241047121875700803">David Gageot</a></span> et +jean laurent de morlhon. Il a pour but d’écrire en 2 jours à Devoxx France une application devant une centaine <br />de personnes.<br /><br />#java  #refactoring   #kata﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>353</wp:post_id>
		<wp:post_date>2012-03-09 23:11:21</wp:post_date>
		<wp:post_date_gmt>2012-03-09 23:11:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kata-de-refactoring-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="kata"><![CDATA[Kata]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>La covariance dans Java</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/07/la-covariance-dans-java/</link>
		<pubDate>Wed, 07 Mar 2012 23:55:47 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/07/la-covariance-dans-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><i>(Trouvant le sujet vraiment intéressant, je reprends une partie de l’article que j’avais écrit il y a un moment sur ce sujet. L’article complet est en lien sur ce post.)</i><br /><br />La covariance est apparue avec l’arrivée de la version 5 du JDK. Au moment de la sortie de cette version, beaucoup de fonctionnalités ont été mises en avant comme les generics ou l&#039;autoboxing, etc.<br />Avant de commencer cet article sur la présentation de la covariance, je voulais faire un petit rappel sur deux notions importantes impactées par ce sujet : la redéfinition et la surcharge de méthode.<br /><br /><i>Dans le cadre de la </i><b><i>redéfinition</i></b><i> d’une méthode, il faut que la signature de la méthode de la classe fille soit exactement la même que la signature de la classe mère.</i><br /><br /><i>Dans le cadre de la </i><b><i>surcharge</i></b><i> d’une méthode, la méthode de la classe fille se distinguera par ses paramètres (leur nombre et leurs types).</i><br /><br /><b>Qu’est ce que la covariance ?</b><br /><br />Dans les versions antérieures au JDK 1.5, ces deux règles définies ci-dessus étaient valables. Depuis la version 1.5 (et supérieures), ces règles ont légèrement changé.<br /><br />En effet, il est maintenant possible de modifier le type retour d’une méthode que l’on redéfinit. Dans un premier temps, cette nouvelle possibilité peut paraître quelque peu dé-stabilisante.<br /><br />Après réflexion, la covariance des types retour donne la possibilité de s’affranchir de la conversion de type explicite (cast). <br />Le cast, une technique qui introduit des faiblesses dans les programmes et qui met en évidence une faiblesse du typage du langage Java.<br /><br />Une contrainte existe dans la mise en œuvre de la covariance : il faut que le nouveau type retour soit un sous-type du type déclaré dans la super classe. Cette contrainte reste logique et cohérente. En effet, l’héritage raffine (spécialise) le comportement d’une classe, il est logique que les méthodes redéfinies dans les sous-classes spécialisent aussi les types retours de ses méthodes.<br /><br />L’utilisation de la covariance ne doit pas être systématique, il faut que celle-ci présente un réel intérêt.<br /><br />Exemple : <br /><br />public class A {<br /> A method(A x){<br /> return this;<br /> }<br /> }<br /> <br />La classe A ci-dessus déclare une méthode ayant pour signature method: A-&gt;A. <br /><br />public class B extends A {<br /> <br /> B method(A x){<br /> return this;<br /> }<br />}<br /><br />La classe B ci-dessus étend la classe A en redéfinissant la méthode method déclarée.<br />La signature de cette méthode dans la classe B est method: A-&gt;B. <br /><br />public class C extends A {<br /> C method(A x){<br /> return this;<br /> }<br />}<br /><br />La classe C ci-dessus étend la classe A en redéfinissant la méthode method déclarée.<br />La signature de cette méthode dans la classe C est method: A-&gt;C. <br /><br />Dans cet exemple, on voit qu&#039;au fur et à mesure que l&#039;on descend dans l&#039;arbre d&#039;héritage le type retour de la méthode <i>method</i> évolue et se spécialise.<br />Par conséquent, on limite le scope de compatibilité dans les classes filles.<br /><br />En revanche, on pourra s&#039;affranchir de l&#039;utilisation du cast pour manipuler les types retournés par la méthode <i>method</i>. Dans les deux cas (Classe B et C), la méthode est redéfinie et non surchargée. <br /><br />Attention : Ce code compilera avec le compilateur du JDK 1.5. En revanche, des erreurs de type seront générées avec la version 1.4 du compilateur.<br /><br /><i>Dans l’article mis en lien, vous trouverez un exemple concret mettant en évidence les avantages de ce principe de covariance.</i><br /><br />Le mécanisme de la covariance apporte une nouvelle perspective au sein du langage Java. Comme les Generics, ce principe donne la possibilité de détecter les erreurs de typage plus tôt durant le développement. Cela permet de diminuer les erreurs au moment de la liaison tardive. <br /><br />Connaissiez-vous ce principe depuis son apparition au sein du langage ? <br />L’avez vous déjà mis en œuvre ?<br /><br /><br />#java  #covariance   #jdk   #typage﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>354</wp:post_id>
		<wp:post_date>2012-03-07 23:55:47</wp:post_date>
		<wp:post_date_gmt>2012-03-07 23:55:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>la-covariance-dans-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="covariance"><![CDATA[Covariance]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jdk"><![CDATA[JDK]]></category>
		<category domain="post_tag" nicename="typage"><![CDATA[Typage]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ParisJug : rendez-vous le 13 mars</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/05/parisjug-rendez-vous-le-13-mars/</link>
		<pubDate>Mon, 05 Mar 2012 22:51:53 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/05/parisjug-rendez-vous-le-13-mars/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />La prochaine soirée du ParisJug annoncée pour le 13 mars s’annonce passionnante. <br />Comme d’habitude, la soirée sera découpée en deux actes.<br />Le première partie sera présentée par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/101932012361889521527">Alexis Moussine-Pouchkine</a></span>. Il parlera de l’actualité de java principalement au travers des sujets suivants : <br />	- La situation de Java 7 et 8,<br />	- OpenJDK,<br />	-JCP,<br />	- etc<br /><br />Puis il abordera un sujet plus technique, une fonctionnalité très attendue par les développeurs : <b>Jigsaw</b>.<br />Ce projet Jigsaw a pour objectif d’intégrer la notion de modularité au sein de Java. <br /><br />L’intérêt de cette fonctionnalité est de s’affranchir de l’aspect monolithique du langage et de rendre les applications plus légères d’un manière générale. <br />Par contre, pour que cette fonctionnalité soit efficace et performante, cela implique une refonte importante afin que la plateforme Java elle-même soit modulaire.<br /><br />La deuxième partie de la soirée, présentée par Rémi Forax, sera consacrée aux expressions Lambda sous toutes ses coutures. Rémi fera un état des lieux concernant cette nouvelle fonctionnalité qui viendra avec la nouvelle mouture du JDK. Il abordera notamment les sujets suivants : <br />	- Les choix de design ainsi que les raisons,<br />	- les stratégies d’implémentation et d’optimisation,<br />	- les questions encore en suspens.<br /><br />Nous avions vu dans un post précédent un aperçu de ces expressions lambda. Cette présentation vous permettra d’aller plus loin dans les détails d’implémentation.<br /><br />L’agenda de cette soirée contient tous les ingrédients qui permettront de passer un moment aussi convivial qu’enrichissant. Si vous voulez réserver votre place et être sûr d’assister au Paris Jug de ce mois, soyez prêt <b>Jeudi matin prochain</b> à partir de <b>7h</b> pour vous inscrire !! (attention les places partent rapidement)<br /><br />#java  #jsr337   #parisJug   #jigsaw   #lambda﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>355</wp:post_id>
		<wp:post_date>2012-03-05 22:51:53</wp:post_date>
		<wp:post_date_gmt>2012-03-05 22:51:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>parisjug-rendez-vous-le-13-mars</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jigsaw"><![CDATA[Jigsaw]]></category>
		<category domain="post_tag" nicename="jsr"><![CDATA[JSR]]></category>
		<category domain="post_tag" nicename="lambda"><![CDATA[Lambda]]></category>
		<category domain="post_tag" nicename="parisjug"><![CDATA[Parisjug]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hibernate OGM</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/02/hibernate-ogm/</link>
		<pubDate>Fri, 02 Mar 2012 02:02:02 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/02/hibernate-ogm/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><i>OGM</i> pour <b>Object/Grid Mapper</b>. <br /><br />Historiquement, le projet Hibernate avait pour objectif de fournir un ORM permettant de faciliter la persistance de données dans une base relationnelle.<br />Aujourd’hui, Hibernate est devenu le regroupement d’un ensemble de projets en lien avec la persistance de données :<br /> - ORM<br />	- Shards<br />	- Search<br />	- Tools<br />	- Validator<br />	- Metamodel Generator<br /><br />Hibernate OGM est sorti en alpha release en juin 2011. le projet est venu compléter la collection de projets en apportant <i>‘une nouvelle corde à l’arc’</i> d’Hibernate.<br /><br />L’arrivée du mouvement NoSQL a ouvert la porte à un éventail de solutions face aux problématiques de scalabilité et de façon de stocker les données.<br />Hibernate OGM tente d’offrir une couche d’abstraction pour travailler avec des bases de données de type NoSQL en conservant une interface commune (JPA, Hibernate Core) avec Hibernate ORM principalement.<br /><br />En gardant les mêmes concepts (JPA, Hibernate Core), Hibernate OGM veut donner la possibilité aux développeurs d’explorer plus facilement toutes les solutions existantes entre le monde des bases relationnelles et celui des bases NoSQL.<br />Les interfaces de JP-QL sont aussi utilisées pour la recherche de données persistées.<br /><br />Aujourd’hui, Hibernate OGM est capable de persister des entités sous forme de clé/valeur selon les critères techniques vus ci-dessus dans la grille de données Infinispan.<br /><br />Pour rappel, ce projet n’a pas encore atteint tous ses objectifs, c’est encore un projet jeune, néanmoins un certain nombre de fonctionnalités sont actuellement disponibles :<br /><br />- enregistrement de données dans le datagrid infinispan,<br />- opérations CRUD sur des entités,<br />- utilisation du polymorphisme sur les entités,<br />- utilisation d’objet <i>embeddable</i> ,<br />- support des types basiques,<br />- support des associations,<br />- support de la plupart des collections,<br />- support d’Hibernate Search,<br />- support de JPA et l’api Hibernate Core.<br /><br />A moyen terme, le projet se fixe les objectifs suivants :<br /><br />- support d’autres bases de type clé/valeur (aujourd’hui, juste Infinipan est supporté),<br />- support d’autres types de base NoSQL (graph, document, etc),<br />- support de l’agrégation et de jointures complexes.<br /><br />Hibernate OGM est un projet open source. Il est ouvert et chacun peut apporter sa pierre à l’édifice. Il est hébergé sur GitHub :<br /><a href="https://github.com/hibernate/hibernate-ogm">https://github.com/hibernate/hibernate-ogm</a><br /><br />En lien, vous trouverez une présentation très intéressante faite par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/114288822031825705031">Emmanuel Bernard</a></span> lors d&#039;un Ippevent.<br /><br />#java  #noSQL   #hibernateogm   #infinispan   #jboss﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>356</wp:post_id>
		<wp:post_date>2012-03-02 02:02:02</wp:post_date>
		<wp:post_date_gmt>2012-03-02 02:02:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hibernate-ogm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hibernateogm"><![CDATA[Hibernateogm]]></category>
		<category domain="post_tag" nicename="infinispan"><![CDATA[Infinispan]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jboss"><![CDATA[Jboss]]></category>
		<category domain="post_tag" nicename="nosql"><![CDATA[NoSQL]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devoxx France - JDK8</title>
		<link>https://thecoderwriter.wordpress.com/2012/02/28/devoxx-france-jdk8/</link>
		<pubDate>Tue, 28 Feb 2012 19:02:42 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/02/28/devoxx-france-jdk8/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Bientôt se tiendra la grande conférence Devoxx France.<br />L’évènement se tiendra sur 3 jours. Le premier jour (le 18 avril), aura lieu un ensemble de présentations de type &quot;Université&quot;, c’est-à-dire des sessions de 3 heures permettant d’approfondir un sujet technique. Le programme de cette première journée est disponible sur le site de la conférence.<br />Parmi les sessions proposées, une a particulièrement retenu mon attention : <i>JDK 8 demo: lambdas in Action</i>. Comme son nom l’indique, on pourra y voir une démo d’une des nouveautés annoncées dans la prochaine version de Java : <i>les expressions lambdas</i> (JSR 335).<br /><br /><b>Qu&#039;est ce qu&#039;une Expression Lambda et qu&#039;est ce que cela va apporter ?</b><br /><br />une expression lambda ressemble à ça : <br /><br /><i>(parametre1, parametre2) -&gt; {instruction1; instruction2; return resultat}</i><br /><br />Une expression Lambda (ou closure) permet d’écrire de manière plus claire et accessible un bloc de code qui aujourd’hui serait écrit à l’aide d’une classe anonyme. <br />Par conséquent, cette nouvelle fonctionnalité a pour vocation de remplacer ces fameuses classes anonymes basées sur des interfaces à une seule méthode.<br />Les expressions Lambda seront utilisables avec des interfaces de type <i>SAM</i> (Single Abstract Method).<br />Ce bloc de code est affecté à un objet typé par une interface de type SAM comme par exemple <i>Comparator&lt;T&gt;</i> :<br /><br /><i>Comparator&lt;int&gt; monComparator = (int un, int deux) -&gt; {_ligne de code permettant de comparer les deux paramètres</i>; return <i>resultat_}</i><br /><br />Ensuite cette instance pourra être utilisée comme un objet classique.<br /><br />Afin de renforcer le côté concis des expressions lambdas, des petites optimisations syntaxiques seront possibles. Par exemple, si le bloc de code ne contient qu’une seule expression alors on pourra se passer des accolades délimitant le bloc et du mot-clé <i>return</i> :<br /><br /><i>Comparator&lt;String&gt; monComparator = (String un, String deux) -&gt; un.compareToIgnoreCase(deux);</i><br /><br />Une autre possibilité est d’utiliser <b>l’inférence de type</b> (qui viendra avec la version 8 du JDK). Le compilateur sera capable d’évaluer le type des paramètres à partir de la définition du type générique de l’interface : <br /><br /><i>Comparator&lt;String&gt; monComparator = (un, deux) -&gt; un.compareToIgnoreCase(deux);</i><br /><br />Une autre fonctionnalité intéressante : les <i>références de méthode</i>. Jusqu’ici nous avons vu qu’il était possible de référencer un bloc de code. Il sera aussi possible de faire référence à une méthode particulière d’une classe ou d’une instance comme le montre l’exemple ci-dessous : <br /><br /> <i>Comparator&lt;String&gt; monComparator = String#compareTo(String);</i><br /><br />Ici on affecte le comportement de la méthode de comparaison à une instance du type de l’interface Comparator. Ensuite l’instance monComparator pourra être utilisée comme une instance classique.<br /><br />Nous venons de voir un aperçu des expressions Lambda. La présentation qui sera faite à Devoxx France le 18 avril vous permettra d&#039;approfondir ce sujet passionnant.<br /><br />#java  #jdk8   #devoxx   #lambda   #expression﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date>2012-02-28 19:02:42</wp:post_date>
		<wp:post_date_gmt>2012-02-28 19:02:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devoxx-france-jdk8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="compareto"><![CDATA[CompareTo]]></category>
		<category domain="post_tag" nicename="devoxx"><![CDATA[Devoxx]]></category>
		<category domain="post_tag" nicename="expression"><![CDATA[Expression]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jdk"><![CDATA[JDK]]></category>
		<category domain="post_tag" nicename="lambda"><![CDATA[Lambda]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java efficace</title>
		<link>https://thecoderwriter.wordpress.com/2012/02/25/java-efficace/</link>
		<pubDate>Sat, 25 Feb 2012 01:24:42 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/02/25/java-efficace/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Ce livre est une référence pour tout développeur java qui se respecte.<br />Il a été écrit par un acteur majeur dans la vie du langage Java. <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/113200173329286634669">Joshua Bloch</a></span> a été en charge de l’architecture au sein du <i>Core Java Plateform Group</i>. <br /><br />Ses principales réalisations sont :<br /> - Le framework de Collection<br /> - java.math<br /><br />L’ouvrage qu’il a écrit, Java Efficace, est un concentré des meilleurs pratiques à mettre en œuvre lorsque l’on travaille avec le langage Java.<br /><br />Il décrit 57 bonnes pratiques réparties selon différents thèmes :<br /> - Création et destruction d’objets;<br /> - Méthodes communes à tous les objets,<br /> - Classes et interfaces,<br /> - Programmation générale,<br /> - Les exceptions<br /> - Méthodes<br /> - etc<br /><br />Les règles listées sont simples et peuvent être mises en œuvre dans le code de tous les jours.<br /><br />Par exemple, la rubrique <i>création et destruction d’objets</i> traite des méthodes de fabrique statiques qu’il est préférable d’utiliser en lieu et place des constructeurs. J. Bloch explique que dans le cas de la nécessité d’avoir plusieurs constructeurs sur une classe ; il est préférable d’utiliser des méthodes de fabrique statiques. Elles permettront de donner du sens à chaque constructeur.<br />Il parle aussi d’un sujet sur lequel beaucoup d’avis divergent : <i>la gestion des exceptions</i>. Il évoque l’importance d’effectuer la validation des paramètres.<br /><br />Le spectre couvert par ces règles permet d’adresser tout type de lecteur, que l’on soit débutant ou expert.<br /><br />La version originale a été publiée en anglais. Une traduction en français a été faite par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/101932012361889521527">Alexis Moussine-Pouchkine</a></span>. <br /><br />#java  #efficace   #bonne   #pratique   #livre﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>358</wp:post_id>
		<wp:post_date>2012-02-25 01:24:42</wp:post_date>
		<wp:post_date_gmt>2012-02-25 01:24:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-efficace</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bonne"><![CDATA[Bonne]]></category>
		<category domain="post_tag" nicename="efficace"><![CDATA[Efficace]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="livre"><![CDATA[Livre]]></category>
		<category domain="post_tag" nicename="pratique"><![CDATA[Pratique]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Joda Time 2.1</title>
		<link>https://thecoderwriter.wordpress.com/2012/02/22/joda-time-2-1/</link>
		<pubDate>Wed, 22 Feb 2012 23:12:51 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/02/22/joda-time-2-1/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />La manipulation des dates et du temps avec les outils fournis par le JDK est souvent fastidieuse.<br />Concernant le type Date, on se retrouve à se poser la question si l’on doit utiliser la classe issue de <i>java.sql _ ou celle issue de _java.util</i> (par exemple).<br />Un autre point délicat est la manipulation et la conversion des heures.<br /><br />L’api Joda Time se propose d’adresser ces difficultés en mettant à disposition une boite à outils très complète. <br />La librairie permet de convertir des dates, de les comparer, d&#039;afficher des dates formatées, etc.<br />Le projet met également à disposition un jeu de tag lib pour les jsp.<br />Il propose aussi une intégration avec le framework <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/108373352792082122423">Hibernate</a></span>.<br /><br />Cette api permet de produire du code concis et précis.<br />C’est un projet mature et stable. La documentation est très riche.<br /><br />#java  #date   #time   #joda﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>359</wp:post_id>
		<wp:post_date>2012-02-22 23:12:51</wp:post_date>
		<wp:post_date_gmt>2012-02-22 23:12:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>joda-time-2-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="date"><![CDATA[Date]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="joda"><![CDATA[Joda]]></category>
		<category domain="post_tag" nicename="time"><![CDATA[Time]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Hibernate Envers : Entity Version</title>
		<link>https://thecoderwriter.wordpress.com/2012/02/20/hibernate-envers-entity-version/</link>
		<pubDate>Mon, 20 Feb 2012 23:24:06 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/02/20/hibernate-envers-entity-version/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Il n’est pas rare dans une application, au niveau de la base de données, de trouver des champs techniques dans les tables à coté des données métier.<br />En général, ces champs ont pour objectif de fournir des informations sur :<br /> - qui a modifié cette ligne,<br />- qui a créé cette ligne <br />- à quelle date cette ligne a été créée,<br /> - à quelle date cette ligne a été modifiée,<br /> - etc<br /><br />Ces informations sont assez précieuses, en cas de problème, ou de litige.<br />En revanche, on peut voir deux problèmes évidents concernant ces données :<br /> 1) on a un mélange entre les données métiers/techniques,<br /> 2) la gestion de l’historique est très limitée (les données sont écrasées systématiquement)<br /><br />Le projet <b>Envers</b> a pour objectif d’adresser cette problématique de gestion de l’historique des données métier et ceci de manière transparente pour l’application.<br /><br />Le principal pré-requis pour mettre en place cet outil sur un projet est que celui-ci se base sur le framework Hibernate et ses annotations.<br /><br />Pour réaliser cette tâche, Envers fournit une annotation <i>@Audited</i> que l’on posera sur les entités que l’on souhaite suivre. Il faudra ajouter quelques lignes dans le fichier de configuration XML et le tour est joué !<br /><br />A partir de là, Envers se chargera de créer (via une tâche Ant) les tables nécessaires pour gérer l’historique des entités. C’est à dire une table par entité.<br /><br />Le projet fournit aussi une API permettant d’interroger l’historique des entités gérées.<br />Elle permet d’accéder aux informations d’une entité à partir d’un numéro de révision donné.<br />La sélection peut se faire de manière très fine en utilisant des opérateurs de comparaison, des projections et l’ordre de tri.<br /><br />Pour faire un parallèle, ce projet pourrait être présenté, dans son fonctionnement, comme un gestionnaire de source de type SVN.<br /><br />Le point auquel il faut faire attention concerne les performances. La gestion des révisions engendre un coût qui peut multiplier par 1.5 les temps de réponse. Ce point ne doit pas être rédhibitoire. Il indique juste qu’il faut choisir de manière pertinente les entités que l’on va suivre et ne pas hésiter à faire des benchmarks afin de voir les impacts que cela pourrait avoir vis à vis des utilisateurs.<br /><br /> #java   #entity   #version   #database   #revision﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>360</wp:post_id>
		<wp:post_date>2012-02-20 23:24:06</wp:post_date>
		<wp:post_date_gmt>2012-02-20 23:24:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hibernate-envers-entity-version</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="database"><![CDATA[Database]]></category>
		<category domain="post_tag" nicename="entity"><![CDATA[Entity]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="revision"><![CDATA[Revision]]></category>
		<category domain="post_tag" nicename="version"><![CDATA[Version]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>La JVM polyglotte</title>
		<link>https://thecoderwriter.wordpress.com/2012/02/17/la-jvm-polyglotte/</link>
		<pubDate>Fri, 17 Feb 2012 00:30:57 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/02/17/la-jvm-polyglotte/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />La machine virtuelle Java (JVM) à l’origine avait été conçue pour faire fonctionner principalement des programmes écrits en Java.<br />Le principe étant que le développeur écrit son programme, celui-ci sera traduit (‘pré’ compilé) en bytecode (.class) et exécuté par la JVM selon le système sous-jacent. <br /><br />Depuis un certain temps, cette machine virtuelle a vu son champ linguistique s’ouvrir peu à peu. En effet, aujourd’hui on peut lister un nombre impressionnant de langages pouvant être exécutés sur la JVM. <br />Les domaines d’application de ces langages sont assez variés.<br /><br />La JVM va exécuter un programme de manière différente selon le langage dans lequel il a été écrit. <br />Il existe trois possibilités pour la JVM de travailler avec un langage : <br /> - Le code est <b>interprété</b> directement par la JVM (écrit en langage de haut niveau)<br /> - Le code est <b>‘pré’compilé</b> en byte code et ensuite compilé en langage machine à l’exécution.<br /> - Le code est traité par un compilateur <b>Just-in-time compilation</b> (JIT) où la compilation est dynamique. <br /><br /> <i>(JIT brièvement, c’est une approche hybride, où le compilateur va compiler à la volée des portions de byte code. Il appliquera un système de cache pour ces portions de code. Cette approche permet d’obtenir de très bonnes performances)</i><br /><br />Ci-dessous une liste des langages les plus connus : <br /><b>- Clojure:</b> compilé / programmation fonctionnelle<br /><b>- Groovy:</b> langage de script<br /><b>- Scala:</b> compilé / programmation fonctionnelle<br /><b>- JavaFX Script:</b> un langage de script dédié au domaine des RIA<br /><b>- JRuby:</b> une implémentation du langage Ruby<br /><b>- Jython:</b> une implémentation du langage Python<br /><b>- Rhino:</b> une implémentation de Javascript<br /><b>- Ceylon:</b> compilé<br /><br />Cette liste est loin d’être exhaustive. Vous trouverez une liste plus complète sur l’article joint à ce post.<br />D’une manière générale, il peut être intéressant de connaître certains de ces langages. Typiquement, des frameworks tels que Spring accepte des langages de scripts dans ses fichiers de configuration. L’avantage mis en avant concerne l’aspect dynamique de la mise à jour d’une configuration.<br /><br />  #java   #langage   #interpreté   #compilé   #JIT﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>361</wp:post_id>
		<wp:post_date>2012-02-17 00:30:57</wp:post_date>
		<wp:post_date_gmt>2012-02-17 00:30:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>la-jvm-polyglotte</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="compil"><![CDATA[Compil]]></category>
		<category domain="post_tag" nicename="interpret"><![CDATA[Interpret]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jit"><![CDATA[JIT]]></category>
		<category domain="post_tag" nicename="langage"><![CDATA[Langage]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java et sa boite à outils</title>
		<link>https://thecoderwriter.wordpress.com/2012/02/14/java-et-sa-boite-a-outils/</link>
		<pubDate>Tue, 14 Feb 2012 23:38:30 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/02/14/java-et-sa-boite-a-outils/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le JDK fournit un ensemble d’outils intéressants lors de son installation. Ces outils répondent à différents besoins. <br />Ces outils sont généralement peu connus. Nous sommes (trop) habitués à utiliser nos IDEs préférés et à ne pas fouiner dans les répertoires du JDK.<br /><br />Voici donc une liste (non exhaustive) décrivant les outils principaux fournis en standard : <br /><br />Les outils les plus connus : <br /><b>appletviewer</b> : Permet de tester une applet sans navigateur,<br /><b>jar</b> : création et gestion de fichier .jar, <br /><b>java</b> : Lanceur de la JVM (le jre ne sera plus supporté), <br /><b>javac</b> : Compilateur de code source -&gt; bytecode, <br /><b>javadoc</b> : générateur de la javadoc à partir du code source, <br /><b>rmic</b> : Générateur des <i>stubs</i> et <i>skeletons</i> pour un contexte distribué, <br /><b>rmiregistry</b> : Service d’enregistrement de référence d’objet distant<br /><br />Les outils liés à la sécurité : <br /><b>keytool</b> : Gestion des certificats et des <i>keytools</i>, <br /><b>jarsigner</b> : Permet de signer et vérifier un jar<br /><br />Les outils liés au déploiement : <br /> <b>pack200</b> : Optimisation de la compression des jars, <br /><br />Il existe de outils qui sont au stade expérimental. Ces outils n’ont pas la garantie d’être supportés dans les futures releases du langage.<br /><br />Les outils de monitoring : <br /><b>JConsole</b> : Visualisation des indicateurs CPU / Mémoire / Threads / JMX d&#039;une JVM,<br /><b>jps</b> : Visualisation du status des process dans la JVM,<br /><b>jstat</b> : Visualisation d’information statistique sur la JVM, <br /><br />Les outils d’analyse de problème : <br /><b>jinfo</b> : Fournit des informations sur un process en particulier,<br /><b>jhat</b> : Visualisation dans une page web du <i>heap dump file</i>,<br /><b>jmap</b> : Visualisation de l’espace mémoire de la JVM,<br /><b>jstack</b> : Visualisation de la stack trace d’un thread<br /><br />Les outils de scripting : <br /> <b>jrunscript</b> : Script shell pour le langage Java.<br /><br /><i>La liste ci-dessus n’est pas exhaustive, elle donne un petit aperçu</i><br /><br />Pour une bonne culture générale sur le langage Java, il est intéressant de prendre connaissance de ces outils.<br /><br />#java  #outils   #tools   #jdk   #jconsole﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>362</wp:post_id>
		<wp:post_date>2012-02-14 23:38:30</wp:post_date>
		<wp:post_date_gmt>2012-02-14 23:38:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-et-sa-boite-a-outils</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jconsole"><![CDATA[Jconsole]]></category>
		<category domain="post_tag" nicename="jdk"><![CDATA[JDK]]></category>
		<category domain="post_tag" nicename="outils"><![CDATA[Outils]]></category>
		<category domain="post_tag" nicename="tools"><![CDATA[Tools]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>findJar.com</title>
		<link>https://thecoderwriter.wordpress.com/2012/02/11/findjar-com/</link>
		<pubDate>Sat, 11 Feb 2012 00:24:15 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/02/11/findjar-com/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />FindJar. com est un moteur de recherche permettant de retrouver à quelle API appartient une classe.<br /><br />C’est très utile lorsque votre application remonte dans une pile d’exception une erreur du type NoClassDefFoundError nommée : <b>com.inconnue.au.bataillon.SortieDeNullePart.class</b>.<br /><br />Dans la majorité des cas, il est quasiment impossible de déterminer à quel jar appartient cette classe et par conséquent l’ajouter au classpath afin de résoudre les problèmes de dépendance.<br /><br />A partir d’un copier/coller et d’une recherche, vous trouverez dans les pages de résultat, le nom de tous les jars faisant référence à cette classe. Une fois le jar identifié, vous avez la possibilité d&#039;obtenir la dépendance Maven qu’il faut ajouter à votre pom, afin de résoudre au sein du programme, l’erreur vue un peu plus haut.<br /><br />Cet outil est intégrable dans Eclipse via un plugin et aussi dans Firefox.<br /><br />Si vous trouvez une référence en dehors du moteur de recherche et que celle-ci n’existe pas dans la base du moteur, vous avez la possibilité de suggérer cette nouvelle entrée afin d&#039;enrichir le moteur.<br /><br /> #java   #noclassdeffoundError   #search   #engine﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>363</wp:post_id>
		<wp:post_date>2012-02-11 00:24:15</wp:post_date>
		<wp:post_date_gmt>2012-02-11 00:24:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>findjar-com</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="engine"><![CDATA[Engine]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="noclassdeffounderror"><![CDATA[NoclassdeffoundError]]></category>
		<category domain="post_tag" nicename="search"><![CDATA[Search]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clean Code</title>
		<link>https://thecoderwriter.wordpress.com/2012/02/08/clean-code/</link>
		<pubDate>Wed, 08 Feb 2012 23:47:34 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/02/08/clean-code/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Aujourd’hui, je vais faire une petite entorse à la règle et parler d’un sujet périphérique au language Java mais tout aussi important : <i>le code</i>.<br />Le fait de connaître beaucoup d’APIs ou de frameworks n’est pas une fin en soi. <br /><br />Savoir écrire du code n’est pas une notion à prendre à la légère. Beaucoup de facteurs peuvent rendre un morceau de code plus <i>propre</i> :<br /><br />	- Savoir nommer efficacement ses variables, ses méthodes,<br />	- Savoir structurer ses classes,<br />	- Savoir produire du code expressif,<br />	- Identifier les responsabilités dans le code,<br />	- Utiliser les commentaires correctement,<br />	- Écrire des tests propres (FIRST)<br />	- Adopter de bonnes pratiques de refactoring,<br />	- etc.<br /><br />Au premier abord, les points évoqués ci-dessus peuvent paraître évidents ou superflus néanmoins il n’est pas rare d’entendre : <br /> <br />	- “Ton code n’est pas très clair”, <br />- “Tu peux m’expliquer à quoi sert cette classe ?”,<br />- “Tiens, j’ai déjà vu ce bout de code quelque part”,<br />- “Pourquoi cette classe fait plus de 1000 lignes ?”.<br /><br />Face à ces questions, il est nécessaire d’appréhender certains concepts et conseils qui permettront de coder de manière efficace.<br />Je vous recommande un très bon ouvrage de référence sur ce sujet, le livre de <i>Robert C. Martin</i> : <b>Coder proprement</b> (Clean code).<br />Que vous soyez débutant ou confirmé, ce livre vous apportera forcément quelque chose.<br /><br />Ce livre existe en version anglaise ou française.<br /><br /><i>Nous parlons ici de Java, mais ces principes s&#039;appliquent bien sûr à tout autre langage.</i><br /><br />Partagez ici vos impressions, anecdotes ou expériences sur le sujet traité par ce livre. <br /><br /> #java   #clean   #code   #coder   #proprement﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>364</wp:post_id>
		<wp:post_date>2012-02-08 23:47:34</wp:post_date>
		<wp:post_date_gmt>2012-02-08 23:47:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clean-code</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clean"><![CDATA[Clean]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[Code]]></category>
		<category domain="post_tag" nicename="coder"><![CDATA[Coder]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="proprement"><![CDATA[Proprement]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DBUnit</title>
		<link>https://thecoderwriter.wordpress.com/2012/02/06/dbunit/</link>
		<pubDate>Mon, 06 Feb 2012 22:06:37 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/02/06/dbunit/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />DBunit permet de fournir un contexte de base de données pour vos tests. Bien sûr, il existe des possibilités de <i>mocker</i> les sources de données externes afin de limiter les dépendances ; ceci est valable dans le cadre de tests unitaires. Lorsque l’on passe aux tests d’intégration, il est vraiment intéressant de décrire des cas réels. <br />C’est là que DBUnit intervient.<br /><br />Cet outil vous permettra de charger un ensemble de données cohérent dans votre base de données pour lancer vos tests. Une fois les tests terminés, la base de données retrouvera son état initial. L’objectif est de s’assurer qu’à chaque campagne de test, la base de données contienne les données nécessaires pour assurer un contexte d&#039;exécution fiable pour les cas de test.<br /><br />La création des jeux de tests se fait de 2 manières :<br />	- soit manuellement en écrivant les fichiers xml,<br />	- soit en exportant les données depuis la base vers des fichiers au format xml.<br /><br />Il s’intègre avec Maven au travers d’un plugin.<br /><br />Bien que le projet n’ait pas évolué depuis 2010, les fonctionnalités qu’il propose sont vraiment très utiles et ont toutes leur place dans votre boîte à outils.<br /><br /><br /> #java   #test   #integration   #dbunit   #db﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>365</wp:post_id>
		<wp:post_date>2012-02-06 22:06:37</wp:post_date>
		<wp:post_date_gmt>2012-02-06 22:06:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dbunit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="db"><![CDATA[Db]]></category>
		<category domain="post_tag" nicename="dbunit"><![CDATA[Dbunit]]></category>
		<category domain="post_tag" nicename="integration"><![CDATA[Integration]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>MoreUnit</title>
		<link>https://thecoderwriter.wordpress.com/2012/02/02/moreunit/</link>
		<pubDate>Thu, 02 Feb 2012 22:40:02 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/02/02/moreunit/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Faire des tests unitaires représente toujours un coût dans la réalisation d’un développement.<br />Les étapes pour réaliser un test unitaire sont : <br />	- Que va t-on tester,<br />	- Comment va t-on le tester,<br />	- Créer la classe de test,<br />	- Ecrire le code du test.<br /><br />Aussi sur un projet, on peut se poser les questions suivantes : <br />	- Tiens, est-ce que cette classe/méthode est couverte par un test unitaire ?<br />	- Je sais qu’il existe un test unitaire pour cette classe, mais où est-il ?<br />	-...<br /><br />MoreUnit propose d’adresser certaines étapes et questions vues ci-dessus.<br /><br />MoreUnit est un plugin <b>Eclipse</b>. Il propose de travailler de manière plus confortable lorsque l’on créé des tests unitaires. <br />Les principales fonctionnalités permettant d’atteindre cet objectif sont : <br />- Création assistée de la classe de test à partir d’un raccourci clavier (nom et emplacement normalisés),<br />- Navigation fluide entre classe d’implémentation et test unitaire à partir d’un raccourci clavier<br />- Indicateur dans l’arborescence du projet des classes couvertes par un test unitaire.<br />- Indicateur dans la classe des méthodes couvertes par un test unitaire.<br />- Supporte le refactoring des classes (Si une classe est renommée, alors le test sera renommé en conséquence, idem si la classe change de package ou est supprimée)<br />- Lancement du test unitaire associé à la classe d’implémentation couramment affichée.<br />- Support de plusieurs frameworks de Mock (lors de la création d’un test unitaire, MoreUnit est capable de mocker les dépendances externes de la classe automatiquement).<br />- Une vue spécifique à MoreUnit est proposée.<br />- Un point d’extension possible sur la phase de génération des classes de test unitaire.<br /><br />Toutes les fonctionnalités proposées ci-dessus par MoreUnit font que l’écriture de test est beaucoup plus efficace.<br /><br />La force et la particularité de cet outil est qu’il adresse les aspects de productivité et d’efficacité sur la phase de création et de maintenance des tests unitaires, plutôt que de proposer un nouveau framework de type <i>JUnit-like</i>.<br /><br /><br />#java #test #unitaire #qualité #efficacité #productivité﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>366</wp:post_id>
		<wp:post_date>2012-02-02 22:40:02</wp:post_date>
		<wp:post_date_gmt>2012-02-02 22:40:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>moreunit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="efficacit"><![CDATA[Efficacit]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="productivit"><![CDATA[Productivit]]></category>
		<category domain="post_tag" nicename="qualit"><![CDATA[Qualit]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<category domain="post_tag" nicename="unitaire"><![CDATA[Unitaire]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Gatling</title>
		<link>https://thecoderwriter.wordpress.com/2012/01/31/gatling/</link>
		<pubDate>Tue, 31 Jan 2012 22:15:38 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/01/31/gatling/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />A l’instar de JMeter, Gatling est un outil permettant de réaliser des tests de montée en charge sur votre application.<br />Cet outil est écrit en <b>Scala</b> et s’appuie sur <b>Akka</b>, <b>Async Http client</b> et <b>Jboss Netty</b>.<br /><br />Sa capacité à simuler un grand nombre d’utilisateurs virtuels est lié au principe <i>des entrées/sorties non bloquantes</i> sur lequel se base Gatling. <br />Par rapport à <i>JMeter</i>, Gatling multiplie par 9 le nombre d’utilisateurs virtuels qu’il est capable de créer pour une campagne.<br /><br />Un autre point attrayant est la manière d’écrire les scénariis; en effet, la construction d’un scénario se fait par l’intermédiaire d’un DSL. Lorsque l’on connait l’expressivité d’un DSL, on se rend compte que c’est un aspect vraiment intéressant de l’outil.<br /><br />Le DSL vient avec un ensemble de composants qui permettront de construire tout type de scénarii et de manière sécurisée (type-safe).<br /><br />Enfin, Gatling use d&#039;une astuce pour gagner en ressource lors de la phase d’exécution du test : la création du rapport est réalisée après coup, lorsque le test de montée en charge est terminé.<br />Les rapports sont très aboutis et très ergonomiques.<br /><br /><br />  #java   #gatling   #stress   #load   #test﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>367</wp:post_id>
		<wp:post_date>2012-01-31 22:15:38</wp:post_date>
		<wp:post_date_gmt>2012-01-31 22:15:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gatling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gatling"><![CDATA[Gatling]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="load"><![CDATA[Load]]></category>
		<category domain="post_tag" nicename="stress"><![CDATA[Stress]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Oracle : Sortie de NetBeans 7.2 bêta</title>
		<link>https://thecoderwriter.wordpress.com/2012/05/30/oracle-sortie-de-netbeans-7-2-beta/</link>
		<pubDate>Wed, 30 May 2012 23:01:40 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/05/30/oracle-sortie-de-netbeans-7-2-beta/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Oracle vient de publier la version 7.2 bêta de NetBeans.<br /><br /><b>Pour mémoire :</b><br /><br />NetBeans est un IDE qui a vu le jour en 1997 au travers d’un projet d’étudiant au sein d’une université à Prague. <br />Le projet évoluera vers la création d’une société et la vente de versions commerciales. En 1999, l’entreprise est rachetée par Sun. Au mois de juin de l’année suivante, NetBeans passe sous licence CDDL et GPL2.<br /><br /><b>Les fonctionnalités de base :</b><br /><br />- Traitement du code source,<br />- Fonction d’import / export depuis ou vers un autre IDE,<br />- Accès et gestion de différentes ressources (BDD, Serveur, etc),<br />- Gestion des tâches,<br />- Support de plusieurs langages,<br />- etc.<br /><br /><b>Fonctionnalités avancées</b><br /><i>Support de plusieurs langages</i> <br /><br />La couverture des langages supportés est large : <br />- Java<br />- Ruby / Ruby on rails<br />- Groovy / Grails<br />- PHP<br />- Javascript<br />- Python<br />- XML, HTML<br />- CSS3,<br />- etc <br /><br /><i>Outils JVM</i><br />L’environnement de développement comprend un profiler Java, ainsi qu’un debugger Java. Une interaction est possible aussi avec les debuggers PHP.<br /><br /><i>Bases de données</i><br /><br />L’ensemble des bases de données du marché sont supportées via une interface JDBC.<br /><br /><i>Les types d’application supportés</i><br /><br />Avec cet outil, il est possible de coder aussi bien une application Web qu’une application client lourd ou encore une applet. L’exploitation de service web est facilitée par la mise à disposition de l’ensemble (ou presque) des standards autour de cette technologie.<br /><br /><i>Enrichissement de la plateforme</i><br /><br />La plateforme peut évoluer au travers d’un système de plugin.<br /><br /><b>OS supportés</b><br />NetBeans est exploitable sur la plupart des OS du marché.<br /><br /><br /><b>Nouveautés de la version 7.2</b><br /><br />Après cette petite rétrospective, voici les nouveautés apportées par cette dernière version en phase de finalisation :<br /><br />Des améliorations ont été apportées afin d’obtenir de meilleures performances globales.<br /><br />Au niveau des langages : <br />- Support de PHP 5.4<br />- C++ 11<br />- Java 7 update 4<br />- Groovy 1.8.6<br /><br />Au niveau des outils : <br />- FindBugs est intégré nativement,<br />- Maven 3.0.4	<br />- SVN 1.7<br />- Support de la synchronisation FTP à distance<br /><br />Coté PHP, les frameworks suivants sont supportés : <br />- Symphony2,<br />- Doctrine2,<br />- ApiGen.<br /><br />Et enfin, un élément central dans cette nouvelle version : le support cloud au sein de l’IDE. <br />Les utilisateurs auront la possibilité de déployer directement leurs applications sur le Cloud d’Oracle et sur Amazon Elastic Beanstalk<br /><br />La release est prévue pour le mois de juillet. En attendant, la version est en phase de test et disponible en téléchargement. Faites vous une idée par vous-même ! :)<br /><br />#java  #netbeans   #ide   #oracle﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date>2012-05-30 23:01:40</wp:post_date>
		<wp:post_date_gmt>2012-05-30 23:01:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>oracle-sortie-de-netbeans-7-2-beta</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ide"><![CDATA[Ide]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="netbeans"><![CDATA[Netbeans]]></category>
		<category domain="post_tag" nicename="oracle"><![CDATA[Oracle]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Travailler avec une collection Java</title>
		<link>https://thecoderwriter.wordpress.com/2012/05/29/travailler-avec-une-collection-java/</link>
		<pubDate>Tue, 29 May 2012 00:05:57 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/05/29/travailler-avec-une-collection-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le sujet de l’article d’aujourd’hui a pour but de présenter (et/ou rappeler) les différents moyens que l’on peut mettre en oeuvre pour travailler avec une collection en Java.<br /><br />Pourquoi un tel article me direz vous ? L’ensemble des outils présentés sont connus et reconnus par l’ensemble de la communauté de développeurs.<br />Eh bien, je suis forcé de constater que ce n’est pas encore tout à fait vrai et que certains les ignorent encore ;)<br /><br />Les cas d’utilisation que je vais essayer de couvrir sont les suivants : <br /><br />	- Appliquer un traitement à tous les éléments d&#039;une collection, <br />- Extraire des éléments d&#039;une collection selon certains critères,<br />- Modifier (ou transformer) tous les éléments d’une collection,<br />- Gérer des collections typées.<br />- Construire une <i>List</i>.<br /><br />Pour traiter ces différents cas, je vais prendre comme référence 3 outils :<br />	<br />	-Le JDK (version 6)<br />	- Commons Collections<br />	- Google Guava<br /><br />Ce sont les 2 principales librairies que j’utilise en général.<br /><br /><b>Appliquer un traitement à tous les éléments d&#039;une collection</b><br /><br />Ce cas est le plus courant. Il consiste à parcourir l’ensemble des éléments de la collection et appliquer un algorithme sur chacun des éléments.<br /><br /><i>JDK</i><br />Avec le JDK, il n’y a pas ‘36 solutions’. Une simple boucle <i>for</i> permettra de réaliser ce cas. Dans la classe <i>Collections</i>, classe utilitaire fournie avec le JDK, pas de méthode permettant de faire cela.<br /><br /><i>Commons Collections</i><br />L’api met à disposition une classe utilitaire nommée <i>CollectionUtils</i>. La méthode <br /><br />	public static void forAllDo(java.util.Collection collection, Closure closure)<br /><br />permet à partir de l’objet de type <i>Closure</i> d’appliquer un traitement sur chacune des occurrences de l’ensemble.<br /><br /><i>Google Guava</i><br />L’api met à disposition une classe nommée <i>Collection2</i>. La méthode <br /> <br />	public static &lt;F,T&gt; Collection&lt;T&gt; transform(Collection&lt;F&gt; fromCollection,<br /> Function&lt;? super F,T&gt; function)<br /><br />Elle permet d’appliquer la fonction passée en paramètre sur l’ensemble des occurrences de la collection. On remarque la présence des générics pour cette api. <br />Attention à cette méthode qui applique le traitement de façon <i>lazy</i>.<br /><br /><b>Extraire des éléments d&#039;une collection selon certains critères</b><br /><br /><i>JDK</i><br />Une fois n’est pas coutume, mais pour réaliser ce genre d’opération, le JDK reste le parent pauvre dans ce domaine. <br />En effet, pour collecter un ensemble d’items dans une collection, il n’existe rien que l’on puisse utiliser directement. L’option possible est de faire à nouveau une boucle for et de travailler sur chaque occurrence en implémentant l’algorithme dans le corps de la boucle.<br />Le principal inconvénient que je peux voir est la difficulté de factorisation du traitement.<br /><br /><i>Commons Collections</i><br />Ici, nous pourrons trouver des outils plus élaborés. Toujours sur la base de la classe <i>CollectionUtils</i>, nous allons avoir recours aux méthodes suivantes : <br />	<br />	- public static java.util.Collection select(<b>*</b>)<br />	- public static java.util.Collection selectRejected(<b>*</b>)<br />	- public static void filter(java.util.Collection collection,<br /> Predicate predicate)<br /><br /><br />Les deux premières méthodes permettent d’effectuer une sélection à partir de critères caractérisés par la classe <i>Prédicate</i>. Cette dernière va permettre de définir des conditions qui rendront éligible ou non, un item de la collection. Chaque item identifié comme éligible sera ajouté à la collection retournée par la méthode.<br />La première méthode est la réciproque de la deuxième, c’est à dire, que la première va sélectionner les items tandis que l’autre va conserver uniquement ceux qui ne remplissent pas les critères.<br />La dernière méthode (<i>filter</i>) élimine directement dans la collection passée en paramètre, les items ne répondant pas aux critères.<br /><br /><i>Google Guava</i> <br />Nous retrouvons dans cette api, une méthode de sélection que l’on a commenté dans le chapitre précédent : <br /><br />	public static &lt;E&gt; Collection&lt;E&gt; filter(Collection&lt;E&gt; unfiltered,<br /> Predicate&lt;? super E&gt; predicate)<br /><br />Contrairement à Commons Collections, Guava propose de manipuler les collections dans un contexte sécurisé par l’utilisation des générics.<br /><br /><b>Modifier (ou transformer) tous les élements d’une collection</b><br /><br />On peut avoir le besoin de transformer (changer le type de) l’ensemble des éléments d’une collection. Voyons ce que propose les 3 outils dans ce domaine : <br /><br /><i>JDK</i><br />Pour adresser ce cas, pas de grande nouveauté une nouvelle fois pour le JDK : <br /><br />	- La traditionnelle boucle <i>for</i><br /><br /><i>Commons Collections</i><br />L’api propose 2 types de méthode : <br /><br />	- public static java.util.Collection collect(<b>*</b>)<br />	- public static void transform(java.util.Collection collection,<br /> Transformer transformer)<br /><br />Elles se différencient par de petites subtilités, mais elles ont globalement la même fonction.<br /><br /><i>Google Guava</i> <br />Pour Guava, une seule méthode, à peu près identique à celle vue ci-dessus : <br /><br />	- public static &lt;F,T&gt; Collection&lt;T&gt; transform(Collection&lt;F&gt; fromCollection,<br /> Function&lt;? super F,T&gt; function)<br /><br />Nous avons déjà vu cette méthode dans un chapitre précédent.<br /><br /><br /><b>Gérer des collections typées</b><br /><br />Depuis l’arrivée des générics (il y a un moment maintenant :) ), nous sommes en mesure d’écrire du code plus sécurisé. Aujourd’hui, seule la librairie <i>Commons Collections</i> ne permet pas l’utilisation des collections typées. Ce choix a été fait par volonté de garder une compatibilité avec l’ensemble des versions du jdk, notamment sur les versions antérieures à la 5. Néanmoins, Commons Collections propose un mécanisme permettant de gérer ce point.<br /><br /><i>JDK</i><br />Les collections typées sont natives depuis la v5 du JDK. Dans ces conditions, l’utilisation de collection typée ne pose aucun problème.<br />Au delà du typage statique fourni par les générics, le JDK propose un typage dynamique pour palier à certains cas d’utilisation ou le typage statique ne serait pas suffisant. (<a href="http://docs.oracle.com/javase/6/docs/api/index.html?java/util/package-summary.html">http://docs.oracle.com/javase/6/docs/api/index.html?java/util/package-summary.html</a>)<br /><br /><i>Commons Collections</i><br />Comme nous l’avons vu en introduction, cette librairie ne supporte pas les générics. Néanmoins, un mécanisme existe afin de ‘simuler’ le principe. <br />La méthode suivante permet de créer une collection typée (façon Commons Collections) : <br /><br />	- public static java.util.Collection typedCollection(java.util.Collection collection<br /> java.lang.Class type)<br /><br />Le principe repose sur le typage dynamique d’une collection. le type des items, qui seront acceptés dans la collection, est défini dynamiquement. Aucune vérification statique ne pourra être effectuée (à la compilation). En revanche, si au runtime une instance d’un type différent est insérée alors une exception sera lancée. <br /><br /><i>Google Guava</i><br />Cette implémentation fait un mix des deux, c’est à dire que l’utilisation des générics est native et que l’on a tout un ensemble d’outils vus en partie ci-dessus permettant de travailler sur les collections.<br /><br /><br /><b>Construire une List</b><br />Ce dernier chapitre va décrire les possibilités offertes pour l’instanciation d’une nouvelle liste.<br /><br /><i>JDK</i><br /><br />Deux possibilités sont offertes :<br /><br />List&lt;E&gt; myList = new ArrayList&lt;E&gt;();<br />myList.add(e1);<br />myList.add(e2);<br />...<br /><br />Ou alors, en une seule ligne, avec la classe java.util.Arrays :<br /><br />List&lt;E&gt; myList = Arrays.asList(e1, e2, e3);<br /><br /><i>Commons Collections</i><br />Je n’ai pas relevé de manière particulière ou plus originale que celle décrite ci dessus.<br /><br /><i>Google Guava</i><br />Chez Google, on a le sens du pratique et du code concis. En effet, la création d’une liste peut se faire via une <i>factory</i> : <br /><br />public List&lt;E&gt; myList = Lists.newArrayList();<br /><br />A première vue, rien d’extraordinaire, l’instruction tient sur une ligne, comme pour la version du JDK. En revanche, ce qui est plus appréciable, c’est l’économie d’écriture, dans la partie droite, du type des objets contenus dans la future instance. Ceci grâce à l’inférence de type réalisée sur la partie gauche de l’instruction que le type n’est pas obligatoire.<br /><br />Une chose plus intéressante encore est la manière d’insérer des valeurs par défaut dans la liste : <br />public List&lt;E&gt; myList = Lists.newArrayList(e1,e2, e3, e4);<br /><br />Cette technique est très pratique, notamment dans le cadre de tests unitaires.<br /><br /><b>Conclusion</b><br />En conclusion, en cherchant bien on trouve toujours chaussure à son pied pour travailler avec une collection (que l’on soit sur une version 1.2 du JDK, ou que l’api guava a été acceptée sur le projet).<br /><br />J’ai un fort penchant pour l’api Guava, qui offre des outils efficaces et élégants à mettre en place.<br />Je n’ai couvert qu’une infime partie des possibilités offertes par ces outils, l’ensemble des autres types inclus dans les domaines des collections sont aussi couverts par ces outils. N’hésitez pas à mettre le nez dans la javadoc, vous serez surpris de ce que l’on peut y trouver ;)<br /><br />#java  #google   #guava   #collection   #commons﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date>2012-05-29 00:05:57</wp:post_date>
		<wp:post_date_gmt>2012-05-29 00:05:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>travailler-avec-une-collection-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="collection"><![CDATA[Collection]]></category>
		<category domain="post_tag" nicename="commons"><![CDATA[Commons]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="guava"><![CDATA[Guava]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Concurrence en Java</title>
		<link>https://thecoderwriter.wordpress.com/2012/05/23/concurrence-en-java/</link>
		<pubDate>Wed, 23 May 2012 23:06:55 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/05/23/concurrence-en-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Je vous propose pour ce nouveau post, un pointeur vers un article que j’ai trouvé très intéressant. Il traite de la concurrence dans le langage Java et plus particulièrement du modèle de mémoire mis en place par le langage.<br /><br />L’auteur de cet article, Yohan Legat, a écrit cet article suite à la présentation qui avait été faite par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/115379138864798795335">Alex Snaps</a></span>, lors de la conférence Devoxx France 2012, intitulée <i>Programmation concurrente en Java dans la pratique</i>. <br />Cette présentation mettait en avant l’utilisation des primitives de programmation concurrente (introduites avec la version 5 de Java).<br /><br />Dans un premier temps, Yohan Legat nous explique, à travers un cas d’école, une optimisation qui peut être faite par la JVM (le compilateur, ou le processeur) en l’absence de synchronisation et qui peut avoir des répercutions sur le comportement de nos programmes en environnement multi-threadé : l&#039;ordre des lignes de code peut être modifié pour optimisation.<br /><br />Ensuite, il aborde la relation <i>happens-before</i>. Elle caractérise le comportement de deux threads, gérés par le même moniteur, au moment de leur synchronisation.<br /><br />La suite de l’article présente quelques bonnes pratiques : <br /><br />	- Affinez la granularité de vos verrous<br />	- Utilisez des verrous de plus haut niveau et plus performants avec la JSR166<br />	- Écrivez des algorithmes non-bloquants avec les classes Atomic.<br /><br />Et enfin, dans sa conclusion, il fournit l’ensemble des pointeurs qui lui ont permis d’écrire cet article.<br /><br />Les sujets de ce billet sont abordés de manière concise et efficace. Cela permet d’appréhender rapidement les concepts présentés et de les approfondir grâce aux références fournies.<br /><br />#java  #concurrence   #jsr166﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>330</wp:post_id>
		<wp:post_date>2012-05-23 23:06:55</wp:post_date>
		<wp:post_date_gmt>2012-05-23 23:06:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>concurrence-en-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="concurrence"><![CDATA[Concurrence]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jsr"><![CDATA[JSR]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>100ème post</title>
		<link>https://thecoderwriter.wordpress.com/2012/05/22/100eme-post/</link>
		<pubDate>Tue, 22 May 2012 23:02:05 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/05/22/100eme-post/</guid>
		<description></description>
		<content:encoded><![CDATA[ &amp; <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/111274180246973214570">Fabien Baligand</a></span> <br /><br />Aujourd’hui, nous postons le 100 ième article. Ce (petit) évènement est l’occasion de faire un bilan d’une aventure, qui a commencé le 1er janvier 2012. <br /><br /><b>Les chiffres clés :</b><br />- 100 articles<br />- 510 +1<br />- 457 partages<br />- 418 followers<br /><br /><b>L’article ayant remporté le plus de succès en termes de +1 :</b><br />Devoxx France : BigData et Hadoop au secours de téraoctets de logs inexploitables<br /><br /><b>L’article ayant été partagé le plus grand nombre de fois :</b><br />Les enfants s’invitent à Devoxx France !<br /><br /><b>Le plaisir d’avoir contribué au contenu de cette page : 100% :)</b><br /><br /><b>Le moment fort :</b><br />Le temps fort de cette page a été la première édition de la conférence Devoxx France. <br />Nous avons pu suivre la conférence sur 2 jours et proposer les compte-rendus.<br />A cette occasion, nous avions fait faire deux t-shirts à l’éfigie de la page, que nous avons fièrement porté tout au long de l’évènement. En pièce jointe, la photo de vos deux serviteurs en tenue de combat ;)<br /><br /><b>Nos objectifs :</b><br />A ce jour, nous avons passé la barre des 400 followers. Pour nous c’est une grande satisfaction et une source de motivation pour la suite. <br />Nous allons garder le rythme de un post par jour ouvré (c’est notre engagement) et espérons prochainement, soyons fous, passer la barre des 500 followers ! <br /><br /><b>Sondage :</b><br />Ce 100ème article est aussi l’occasion de se poser quelques questions... <br />Que pensent les personnes qui suivent la page ?<br /><br />1) du rythme de publication des articles ?<br />2) des sujets abordés sur la page ?<br />3) des sujets qui n’ont pas été abordés ?<br />4) de la page en général ?<br />5) Qu’est ce qui est bien ?<br />6) ou pas bien ?<br /><br /><i>Les réponses que vous pourrez apporter nous donneront des éléments pour rendre la page encore plus attrayante et proche de vos attentes.</i>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>331</wp:post_id>
		<wp:post_date>2012-05-22 23:02:05</wp:post_date>
		<wp:post_date_gmt>2012-05-22 23:02:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>100eme-post</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JugSummerCamp 2012, c’est parti !</title>
		<link>https://thecoderwriter.wordpress.com/2012/05/21/jugsummercamp-2012-cest-parti/</link>
		<pubDate>Mon, 21 May 2012 22:05:09 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/05/21/jugsummercamp-2012-cest-parti/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Après la première édition de <i>Devoxx France</i> à Paris, la deuxième édition de <i>Mix-IT</i> à Lyon … <br />Retrouvez la troisième édition du <i>JugSummerCamp</i> à la Rochelle !<br /><br />Cette conférence se tiendra sur une journée juste après les vacances d’été le <i>vendredi 14 septembre 2012</i>.<br /><br />Lors des précédentes éditions, pas moins de 12 conférences (en moyenne) ont été présentées pour chaque édition. L’accès est gratuit.<br />Ce rendez-vous est organisé par le <b>JUG Poitou Charentes</b> (<a href="http://www.poitoucharentesjug.org/xwiki/bin/view/Main/WebHome">http://www.poitoucharentesjug.org/xwiki/bin/view/Main/WebHome</a>) <br /> et sponsorisé par SERLI.<br /><br />Les vidéos des conférences sont disponibles sur Parleys (un accès est proposé directement à partir du site de la conférence).<br />Sur ce pointeur, vous trouverez également divers compte-rendus et commentaires : <a href="https://plus.google.com/u/0/s/jugsummercamp">https://plus.google.com/u/0/s/jugsummercamp</a><br /><br /><b>Le call for paper est ouvert</b>.<br />Trois formats de présentation sont possibles : <br /><br />- Conférence (55mn)<br />- Quickies (15mn)<br />- Tools in Action (55mn)<br /><br />Les Quickies seront une nouveauté 2012. Les inscriptions pour proposer une présentation sont ouvertes jusqu’au 31 juillet 2012.<br /><br />Comme je l’avais évoqué dans un post précédent, le JUG Summer Camp est un rendez-vous qu’il ne faut pas manquer. <br />Dans un cadre vraiment sympa en bord de mer, dans une ambiance conviviale, vous pourrez échanger sur vos sujets favoris et assister à des conférences de qualité. Après un repos estival, c’est l’endroit idéal pour prendre les dernières nouvelles du monde Java...<br /><br />Rendez-vous le 14 septembre à la Rochelle :)<br /><br />#java  #larochelle   #jugsummercamp   #conference﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>332</wp:post_id>
		<wp:post_date>2012-05-21 22:05:09</wp:post_date>
		<wp:post_date_gmt>2012-05-21 22:05:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jugsummercamp-2012-cest-parti</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="conference"><![CDATA[Conference]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jugsummercamp"><![CDATA[Jugsummercamp]]></category>
		<category domain="post_tag" nicename="larochelle"><![CDATA[Larochelle]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Classe utilitaire ou pas ?</title>
		<link>https://thecoderwriter.wordpress.com/2012/05/15/classe-utilitaire-ou-pas/</link>
		<pubDate>Tue, 15 May 2012 23:41:08 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/05/15/classe-utilitaire-ou-pas/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />L’article que je vous propose aujourd’hui est un petit état des lieux sur l’intérêt des classes utilitaires dans nos projets.<br />Il n’est pas rare, voir même courant, de trouver dans les projets sur lesquels nous développons, tout un tas de classes utilitaires adressant, en règle générale, les problématiques suivantes : <br /><br />- Conversion de date<br />- Manipulation de chaine de caractères<br />- Vérification de la nullité ou non d’une référence d’un objet<br />- Traitement sur des collections<br />- etc<br /><br />Le nommage des classes est souvent suffixé par les termes suivants : <br /><br />- Util(s)<br />- Tool(s)<br /><br />et se trouve dans le meilleur des cas dans des packages nommés de la façon suivante : <br /><br />- **.**.**.utils<br />- **.**.**.tools<br /><br />Le nom des packages peut varier selon si les classes utilitaires sont liées à un contexte fonctionnel.<br />Généralement, ces classes sont composées de plusieurs méthodes traitant sensiblement un contexte commun (manipulation de chaine).<br /><br /><b>Le pour : Ce que ces classes peuvent nous apporter</b><br />Elles ont vocation à factoriser un algorithme ou un traitement générique, que d’autres pourront réutiliser à volonté.<br />La démarche est intéressante en terme de coût de conception, de maintenance, de gain de temps.<br />Même si ces arguments sont tout à fait valables et incontournables dans le paradigme objet nous allons voir dans la section suivante des contre-exemples mettant en cause ce type de classe.<br /><br /><b>Le contre : Ce qu’elles peuvent générer</b><br />Dans cette section, je vais noircir le tableau en listant les points négatifs concernant l’existence de telles classes au sein de nos projets.<br /><br /><i>1 - La confusion</i><br />Au début, une classe utilitaire à un sens précis et adresse un domaine spécifique. <br />Avec le temps, le domaine adressé peut dévier et la classe se voit enrichie de méthodes sortant du périmètre initial et peu à peu cela devient une classe fourre-tout. La sémantique exprimée par le nom de la classe se perdra doucement.<br />A contrario, les classes utilitaires peuvent pulluler sur le projet et l’on se retrouvera avec du code dupliqué.<br /><br /><i>2 - Tests unitaires supplémentaires</i><br />Une bonne couverture de code est essentielle dans un projet. Ceci implique qu’il faudra créer l’ensemble des tests unitaires pour cette partie du code. Bien que la démarche soit bonne, cela aura pour conséquence d’allonger un peu plus le temps de build de notre application. Ce qui n’est pas une bonne chose...<br /><br />_3 - Documentation pauvre = Redondance _<br />La documentation : le parent pauvre d’un projet informatique. <br />Lorsque l’on est en train de développer une fonctionnalité et que l’on a besoin de savoir si un utilitaire est disponible (par exemple : transformer une liste de String en une chaine de caractère contenant l’ensemble des occurrences de la liste séparées par une virgule), on commence à rechercher dans le code puis on tente de voir dans la documentation projet si une telle classe existe. Après une recherche infructueuse, on finit par la développer soit-même.<br />En fait, un mois plutôt, votre collègue, qui est parti depuis, l’avait déjà fait mais pour une autre fonctionnalité (il avait nommé la classe en la préfixant par le nom de la fonctionnalité et en la suffixant de <i>Tools</i>).<br />Conclusion, l’utilitaire a été développé deux fois selon deux approches différentes =&gt; nous avons de la redondance.<br /><br /><i>4 - Et les libs disponibles</i><br />Il y a quelques années, au début de Java, le nombre de libs était limité. Aujourd’hui, il est difficile de ne pas trouver une librairie adressant les problématiques récurrentes de nos projets. Avec les moyens de recherche à disposition, il est plus facile de trouver sur internet une lib répondant à notre besoin, plutôt que de retrouver vainement du code dans l’application.<br />De plus, le code de ces libs est éprouvé et plus sûr.<br />Ci-dessous, quelques librairies adressant les problèmes les plus courants : <br /><br />- Google Guava<br />- Commons Jakarta<br />- Joda<br />- etc.<br /><br /><i>5 - PermGen</i><br />Une problématique plus bas niveau concerne la taille de la zone mémoire PermGen. <br />Cette zone stocke l’ensemble des fichiers .class du projet. <br />Dans un projet classique géré par Maven, un certain nombre de dépendances (transitives) sont ajoutées au projet. Bien souvent, les libs évoquées ci-dessus sont incluses donc disponibles.<br />Le fait d’ajouter des classes utilitaires dans le projet ne fait qu’augmenter l’espace occupé dans la zone mémoire PermGen. Réduire le recours à des classes utilitaires permet de ne pas charger un peu plus cette zone de la JVM. Je conviens que cet argument est à relativiser.<br /><br /><b>Mais doit-on renoncer aux classes utilitaires dans les projets ?</b><br />Je pense que la réponse n’est pas aussi catégorique que ça.<br /><br />- Les classes utilitaires doivent être utilisées dans des cas précis pour adresser des problématiques purement fonctionnelles. Par exemple, la transformation d’un objet métier (issue du domaine), la réalisation d’un calcul lié au métier du projet, etc. Dans ces cas, aucune librairie ne saura répondre à votre problème vraiment spécifique au métier sous-jacent.<br />- Il peut arriver, malgré tout l’écosystème à disposition, que l’on ne trouve pas chaussure à son pied. <br /><br />Même si ces cas existent, je reste persuadé que dans 90% des cas, on trouve ce que l’on cherche.<br /><br /><b>Trop de librairies tue la librairie</b><br />Maintenant on peut prendre le problème à l’envers et se trouver confronté à plusieurs librairies répondant à mon problème. <br />Pour départager les finalistes, il faut regarder plusieurs critères : <br />- âge de la librairie : détermine sa pérennité <br />- la documentation : la facilité pour la prise en main<br />- l’activité sur le projet : si des bugs sont détectés, seront-ils corrigés ?<br /><br /><br />En conclusion, je pense qu’il est important de bien connaitre l’écosystème dans lequel nous évoluons. D’avoir une bonne connaissance des outils existants afin de les exploiter et ne pas réinventer la roue. <br />Aussi de savoir limiter son esprit créatif et de chercher au lieu de réinventer.<br />En adoptant cette démarche, nous garderons aussi toute notre énergie pour se concentrer sur le code métier.<br /><br />N’hésitez pas à réagir dans les commentaires, dans un sens ou dans l’autre, afin d’enrichir le contenu de cet article par diverses expériences.<br /><br />#java  #utilitaire   #tool   #api﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>333</wp:post_id>
		<wp:post_date>2012-05-15 23:41:08</wp:post_date>
		<wp:post_date_gmt>2012-05-15 23:41:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>classe-utilitaire-ou-pas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="tool"><![CDATA[Tool]]></category>
		<category domain="post_tag" nicename="utilitaire"><![CDATA[Utilitaire]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java Code Geeks, Java 2 java developers resource center</title>
		<link>https://thecoderwriter.wordpress.com/2012/05/12/java-code-geeks-java-2-java-developers-resource-center/</link>
		<pubDate>Sat, 12 May 2012 13:55:04 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/05/12/java-code-geeks-java-2-java-developers-resource-center/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/114226250987063330965">Java Code Geeks</a></span> (JCG) est un site indépendant maintenu par des développeurs Java pour des développeurs Java.<br />L’ensemble du contenu du site vise un public constitué d’architecte technique, de leader technique, chef de projet mais aussi des jeunes pousses souhaitant se former dans de bonnes conditions.<br /><br />Les fondateurs de ce site sont : <br /><br />	+Byron Kiourtzoglou : co-founder et executive editor<br />	<span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/106473882953367520650">Ilias Tsagklis</a></span> : co-founder et executive editor<br /><br />Les sujets abordés tournent principalement autour de : <br />	- Java<br />	- Scala,<br />	- Android,<br />	- SOA,<br />	- etc<br /><br />Ce site communautaire propose plusieurs façons de participer au contenu du site : <br /><br /><b>JCG</b><br />Le but de ce programme est de simplifier le processus de contribution. Chaque contributeur dans le cadre de ce programme doit fournir un pointeur vers son blog personnel, c’est tout! En fournissant ce pointeur, il autorise le JCG à exploiter le contenu de son blog. <br />Ensuite le blogger continue à alimenter son blog normalement.<br />Bien entendu, le JCG s’engage à citer l’auteur de l’article et fournir un pointeur vers l’article original. Le JCG se réserve le droit d’éditer l’article pour faire des corrections orthographiques et syntaxiques, ainsi que l’ajout de liens concernant le sujet de l’article pour aller plus loin.<br />L’avantage pour l’auteur est d’obtenir une visibilité plus importante pour son article et son blog.<br /><br /><b>W4G</b><br />Le but de ce programme est plus classique. Il permet à un contributeur de publier un article directement sur le site JavaCodeGeeks.com. Le blogger pourra alors estampiller son site perso du logo Java Code Geeks.<br /><br /><br /><b>Software</b><br />Le site propose aussi une participation à plusieurs projets open-source tel que : <br />	- ArkDroid : Un clone du célèbre jeu Arkanoid pour Android.<br />	- Java String Search : Une implémentation en Java des algorithmes les plus communs de recherche sur du texte.<br />	- JCG Andygene Web : Un ensemble d’archetypes Maven permettant de faire du développement rapide.<br />	- etc<br /><br /><b>Ressources</b><br />Le site propose également un index de ressources sur plusieurs sujets techniques.<br />Par sujet technique, vous pouvez trouver des outils permettant de les mettre en oeuvre.<br /><br /><b>Tutoriels</b><br />Cette section propose un ensemble de tutoriels permettant de rapidement monter en compétence sur un sujet, comme Lucene, Google Guava, la programmation fonctionnelle, l&#039;injection de dépendance, etc<br /><br /><b>Exemples</b><br />Cette section est particulièrement intéressante. Elle propose des exemples concrets sur la manière de mettre en oeuvre un outil ou une API. Généralement, on ne trouve pas beaucoup d’explications mais des blocs de code décrivant les étapes de mise en oeuvre. <br />Cette approche très pragmatique a l’avantage de tout de suite rentrer dans le vif du sujet sans passer par une phase théorique un peu longue (même si je pense qu’il est toujours bon d’appréhender les concepts avant de passer à la pratique, parfois quand le temps presse cette étape peut être remise à après la tempête :-) ).<br /><br />Actuellement cette section est catégorisée avec les thèmes suivants : <br />	- Les basiques de Java,<br />	- le coeur de Java,<br />	- Java entreprise,<br />	- Java Desktop,<br />	- Android,<br />	- Java Code Geeks<br /><br />Je trouve ce site très intéressant, tant par la diversité des sujets abordés que par le pragmatisme de certaines sections du site. Le format de publication est de un post par jour (toute ressemblance avec un format de publication existant ne serait que purement fortuite :) )<br /><br />#java  #code   #geek   #article   #JCG   #W4G﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>334</wp:post_id>
		<wp:post_date>2012-05-12 13:55:04</wp:post_date>
		<wp:post_date_gmt>2012-05-12 13:55:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-code-geeks-java-2-java-developers-resource-center</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="article"><![CDATA[Article]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[Code]]></category>
		<category domain="post_tag" nicename="geek"><![CDATA[Geek]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jcg"><![CDATA[JCG]]></category>
		<category domain="post_tag" nicename="w"><![CDATA[W]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devoxx France : (R)évolutionner vos bases de données avec Liquidbase</title>
		<link>https://thecoderwriter.wordpress.com/2012/05/04/devoxx-france-revolutionner-vos-bases-de-donnees-avec-liquidbase/</link>
		<pubDate>Fri, 04 May 2012 23:20:51 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/05/04/devoxx-france-revolutionner-vos-bases-de-donnees-avec-liquidbase/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/118349835803233673871">Florent Biville</a></span> nous a présenté, lors d’un quickie (session au format de 15mn) l’outil Liquidbase.<br /><br />L’objectif de cet outil est de gérer de manière incrémentale les évolutions d’une base de données et d’en assurer le versionning.<br />Florent nous a fait un bref rappel sur la notion de refactoring. Cette pratique, selon <i>Martin Fowler</i> permet d’effectuer <i>des changements d’une structure existante sans altérer son comportement observable</i>. Ensuite, il nous propose cette définition appliquée aux bases de données : <br />	Changements d’une structure existante sans altération de son comportement <b>et de ses informations</b><br /><br />Dans ce deuxième contexte, des problèmes peuvent être mis en avant :<br />	- Une base de données est souvent partagée par plusieurs développeurs<br />	- Les DBAs sont souvent séparés des développeurs<br /><br />Face à ces problèmes, le speaker nous décrit les <i>évolutions</i> à envisager : <br />	- la réduction du clivage entre DBAs et Développeurs<br />	- Chacun son instance<br />	- Automatisation des refactorings et autres mises à jour.<br /><br />Pour adresser cette dernière problématique, Florent Biville nous présente <b>Liquidbase</b> en 3 points : <br />	- Gestionnaire incrémental de migrations<br />	- Opérations décrites par fichier XML<br />	- Gestion des transactions sur les différentes opérations.<br /><br />Liquidbase se charge de stocker l&#039;historique, dans un format lisible par l’humain, de tous les changements intervenus sur la base de données.<br />Ces changements sont stockés dans une table dédiée de la base nommée : DATABASECHANGELOG. <br /><br />Une unité de modification est appelé <b>changeSet</b>, elle décrit l’ensemble des opérations permettant de partir d’une version A pour atteindre une version B de la base de données.<br />Chaque changeSet est défini par un identifiant unique ainsi que le nom de son auteur.<br /><br />L’avantage de cette gestion par rapport à la gestion par différence entre les états est qu’elle permet de garder la sémantique correspondant au changement d’état (de version) de la base de données.<br /><br />Liquidbase s’intègre avec la plupart des outils du marché : <br />	- Ant, Maven, plugin Eclipse/IntelliJ, ligne de commande,<br />	- Listener de servlet<br />	- Spring<br /><br />Cet outil permet d’adresser une problématique qui est généralement gérée par le maintien d’une flopée de scripts SQL à partir desquels on ne saurait pas remonter l’histoire.<br /><br />#java  #bdd   #versionning   #refactoring   #liquidbase﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>335</wp:post_id>
		<wp:post_date>2012-05-04 23:20:51</wp:post_date>
		<wp:post_date_gmt>2012-05-04 23:20:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devoxx-france-revolutionner-vos-bases-de-donnees-avec-liquidbase</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bdd"><![CDATA[Bdd]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="liquidbase"><![CDATA[Liquidbase]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="versionning"><![CDATA[Versionning]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Guava Release 12.0</title>
		<link>https://thecoderwriter.wordpress.com/2012/05/01/guava-release-12-0/</link>
		<pubDate>Tue, 01 May 2012 22:30:07 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/05/01/guava-release-12-0/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le 30 avril, une nouvelle release de la librairie Guava est sortie. C’est la version 12.<br />Ci-dessous un petit historique des versions précédentes : <br /><br />- r01 2009-09-15<br />- r02 2010-01-04<br />- r03 2010-04-09<br />- r04 2010-04-27<br />- r05 2010-04-27<br />- r06 2010-07-07<br />- Release07 2010-09-22<br />- Release08 2011-01-27<br />- Release09 2011-04-07<br />- Release10 2011-09-28 (2011-10-10)<br />- Release11 2011-12-18 (2012-01-09, 2012-02-22)<br />- Release12 2012-04-30<br /><br /><i>La première version r01 n’incluait pas Google Collections.</i><br /><br /><b>Disponibilité sur Central Repository de Maven</b><br />Cette nouvelle release de Guava sera disponible sur le repo Maven selon les références suivantes :<br /><br />	- Api guava : com.google.guava:guava:12.0<br />	- Api guava-gwt : com.google.guava:guava-gwt:12.0<br /><br /><b>Les principaux changements</b><br /><br />43 issues ont été traitées. La liste ici : <a href="http://goo.gl/rKLGr">http://goo.gl/rKLGr</a><br /><br />La dernière version (release 12) fait un <i>break</i> avec les versions précédentes en terme de compatibilité. La dernière mouture ne supporte que l’avant dernière version du JDK (6). Jusqu’à maintenant, l’ensemble des versions (r01 -&gt; Release11) supportait la version 5 du JDK.<br />La raison de la dépendance avec le JDK 6 est liée à l’utilisation de classes et interfaces arrivées avec cette version.<br />Ci-dessous les éléments qui ont créé cette dépendance : <br />	-Nouvelle classe ImmutableSortedSet qui implémente l’interface NavigableSet,<br />- Nouvelle classe ImmutableSortedMap qui implémente l’interface NavigableMap,<br />- Ajout des méthodes de factory (avec inférence de type) : newArrayDeque, newLinkedBlockingDeque, newCopyOnWriteArrayList, newCopyOnWriteArraySet<br />	- etc<br /><br /><b>Autres ajouts significatifs (liste non exhaustive)</b><br /><br />	- Introduction de la classe MediaType (avec la perspective de séparer les responsabilités entre MediaType et MediaRange un jour)<br />	- Introduction de FLuentIteable : interface riche permettant de manipuler les types itérables<br />	- Introduction de HashCodes : Factory de création de hashcode<br />	- Ajout d’un nouveau package : com.google.common.reflect contenant notamment le type TypeToken (équivalent en mieux de java.lang.Class)<br />	- etc<br /><br /><br />Nous avons vu un aperçu des nouveautés contenues dans cette nouvelle mouture. En suivant le lien du post vous aurez tous les détails.<br /><br />#java  #google   #guava   #lib﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>336</wp:post_id>
		<wp:post_date>2012-05-01 22:30:07</wp:post_date>
		<wp:post_date_gmt>2012-05-01 22:30:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>guava-release-12-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="post_tag" nicename="guava"><![CDATA[Guava]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="lib"><![CDATA[Lib]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devoxx France : Faire du code centré sur l’humain!</title>
		<link>https://thecoderwriter.wordpress.com/2012/04/28/devoxx-france-faire-du-code-centre-sur-lhumain/</link>
		<pubDate>Sat, 28 Apr 2012 22:59:17 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/04/28/devoxx-france-faire-du-code-centre-sur-lhumain/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/104119018434081032690">yannick grenzinger</a></span> a fait une présentation, lors d’un quickie (session au format de 15mn), des différents concepts permettant de produire du code où l’humain saura s’y retrouver.<br /><br />La question posée en introduction résume bien la problématique adressée par cette présentation : <br /><i>Pourquoi est-il si difficile de faire du code qu’un autre humain puisse facilement comprendre et maintenir ?</i><br /><br />A cette question le speaker apporte la réponse : <br />	_ Parce que nous avons tous notre vision du monde !_<br /><br />Cette introduction positionne le contexte et Yannick va nous expliquer comment faire tendre les visions de chacun vers une perception commune du code.<br />Inévitablement, il évoque le livre référence dans ce domaine : <i>Clean Code</i> en citant une phrase clef : <br /><br /><i>Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live</i> de Martin Golding<br /><br />Ensuite, il nous explique un premier concept : le modèle mental du code.<br />C’est-à-dire que la vision que l’on peut avoir du code va différer entre celui qui l’a écrit et celui qui va le maintenir.<br />Dans le monde du design, les ergonomes ont mis en place des solutions concernant les objets de tous les jours : <b>Le design centré sur l’utilisateur</b>.<br />Si l’on fait un parallèle entre l’ergonomie appliquée aux objets et le code, on pourrait essayer de voir le code comme des objets et par conséquent lui appliquer les principes d’ergonomie.<br /><br />La première chose serait de créer de bonnes <b>affordances</b> afin que notre code soit capable de s’exprimer lui-même.<br /><br />Aussi, réussir à mettre en place <i>des associations symboliques</i>. Yannick montrait en exemple le panneau de <i>sens interdit</i> où la couleur rouge indique (par association symbolique) une interdiction ainsi que la forme et le contenu du panneau. Dans le cas d’un programme : mettre en place des patterns, des règles de nommage, etc.<br /><br />La création <i>d’association naturelle</i> au travers du <i>Behavior Driven Development</i> (BDD).<br />Le processus BDD met en avant le langage naturel et les interactions dans la phase de développement logiciel. Cela permet aux développeurs de se concentrer sur les raisons pour lesquelles le code doit être créé, plutôt que les détails techniques, et minimise la traduction entre le langage technique dans lequel le code est écrit et le domaine de la langue parlée par les entreprises, les utilisateurs, les intervenants, la gestion de projet…<br /><br />Le speaker encourage le coding défensif, c’est-à-dire de bien gérer les cas d’erreur afin de pouvoir les traiter et faire remonter un maximum d’informations en cas d’erreur.<br /><br />L’avant dernier point abordé est la boucle du feedback, elle se compose de :<br />- Le code existant,<br />	- L’interprétation,<br />	- L’objectif,<br />	- L’écriture du code.<br /><br />Afin d’améliorer le feedback, plusieurs outils sont nécessaires :<br />	- TDD<br />	- Intégration continue<br />	- Déploiement continu<br /><br />Le dernier point concerne la documentation. Pour illustrer cette idée, Yannick cite une phrase de Steve McConnell : <i>”Good code is its own best documentation”</i>.<br />Il la complètera en ajoutant que ce principe, assez connu, ne suffit pas toujours et la documentation dans certains cas a vraiment toute son importance.<br /><br />Il conclura qu’en appliquant l’ensemble de ces principes (la liste faite ici n’est pas exhaustive), nous aurons un code plus facile à comprendre, plus lisible, et plus maintenable ; autrement dit : <br /><br />	<i>Centré sur l’humain</i><br /><br />Cette présentation a abordé, pendant 15mn, un certain nombre de concepts essentiels à connaitre dans la carrière d’un développeur. <br />Si votre curiosité a été piquée,si ce n’est pas déjà fait, de lire le livre <i>Clean Code</i> :)<br /><br /><i>les slides de la présentation sont disponible sur slideshare</i><br /><br />#java  #cleancode   #design   #ergonomie   #code﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>337</wp:post_id>
		<wp:post_date>2012-04-28 22:59:17</wp:post_date>
		<wp:post_date_gmt>2012-04-28 22:59:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devoxx-france-faire-du-code-centre-sur-lhumain</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cleancode"><![CDATA[Cleancode]]></category>
		<category domain="post_tag" nicename="code"><![CDATA[Code]]></category>
		<category domain="post_tag" nicename="design"><![CDATA[Design]]></category>
		<category domain="post_tag" nicename="ergonomie"><![CDATA[Ergonomie]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devoxx France : FluentLenium, une autre façon de faire du Selenium</title>
		<link>https://thecoderwriter.wordpress.com/2012/04/25/devoxx-france-fluentlenium-une-autre-facon-de-faire-du-selenium/</link>
		<pubDate>Wed, 25 Apr 2012 21:18:09 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/04/25/devoxx-france-fluentlenium-une-autre-facon-de-faire-du-selenium/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/108637836287903721076">Mathilde Rigabert Lemée</a></span> nous a présenté, lors d’un quickie (session au format de 15mn) le framework <i>FluentLenium</i>. <br />Il a été inspiré par des outils comme Geb (Groovy) et Capybara (Ruby).<br /><br />L’objectif de ce framework est de venir simplifier et rendre “fluent” l’écriture d’un test Selenium.<br />Il utilise toute la puissance des sélecteurs de CSS1, CSS2, CSS3 (dans la limite des possibilités offertes par Sélénium) pour l’écriture de tests.<br /><br />Elle nous a aussi expliqué les bonnes pratiques à mettre en œuvre avec cet outil, notamment la notion de <i>FluentPage</i> qui permet de fournir des informations essentielles sur le contexte du test. Ceci en opposition à un test sélénium qui, par son coté verbeux, dilue ces informations.<br /><br />Cet outil intègre des frameworks d’assertion connus du marché comme Fest-assert, Hamcrest, Junit assertion.<br /><br />Actuellement, il est en cours d’intégration avec le framework Play 2.0.<br /><br />Ce projet est hébergé sur GitHub, je vous recommande d’aller y faire un tour pour tester ce outil ou alors pour contribuer au projet.<br /><br />#java  #selenium   #fluentlenium   #dsl   #test﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>338</wp:post_id>
		<wp:post_date>2012-04-25 21:18:09</wp:post_date>
		<wp:post_date_gmt>2012-04-25 21:18:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devoxx-france-fluentlenium-une-autre-facon-de-faire-du-selenium</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dsl"><![CDATA[DSL]]></category>
		<category domain="post_tag" nicename="fluentlenium"><![CDATA[Fluentlenium]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="selenium"><![CDATA[Selenium]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devoxx France : BigData et Hadoop au secours de téraoctets de logs inexploitables</title>
		<link>https://thecoderwriter.wordpress.com/2012/04/21/devoxx-france-bigdata-et-hadoop-au-secours-de-teraoctets-de-logs-inexploitables/</link>
		<pubDate>Sat, 21 Apr 2012 07:36:58 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/04/21/devoxx-france-bigdata-et-hadoop-au-secours-de-teraoctets-de-logs-inexploitables/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/110657792892506043626">Pablo Lopez</a></span> a présenté une architecture qu’il a mise en place chez un de ses clients pour répondre à des problématiques de haute disponibilité où la moindre interruption de service était inconcevable pour le client au vu de la criticité de l&#039;application : un site de e-commerce générant 1 million de visiteurs uniques et 200 000 ventes par jour.<br />Un des objectifs principaux était de pouvoir exploiter rapidement et facilement les informations contenues dans les fichiers de logs des différentes applications.<br /><br />L’environnement de production compte plus de 500 serveurs sur lesquels tournent 4 à 5 JVMs par serveur. A travers ces chiffres, on peut se rendre compte de l’importance du système.<br />Le premier objectif visé par cette architecture est de réduire le temps de détection et le traitement d’un incident.<br /><br />Lors de la détection d’un incident sur la production, l’objectif va être de rechercher la cause du problème. Pour cela, on a recours aux fichiers de log. <br /><br />Le dimensionnement de l’environnement de production induit un nombre conséquent de fichiers de log. En effet, Pablo annonce 5 à 10 fichiers de log par JVM représentant 7 Go de logs / serveur / jour. Multipliez cela par le nombre de serveurs, et on obtient un volume d’informations à traiter vertigineux.<br /><br />Après cette mise en situation, Pablo Lopez a décrit les différents outils utilisés pour bâtir cette architecture. L’ensemble des outils retenus sont issus du monde open-source. Voici la liste : <br /><br /> - log4J &amp; logback<br />	- syslog-ng<br />	- Flume<br />	- Hadoop (hdfs, map/reduce)<br />	- MongoDB<br />	- Play!<br /><br /><i>Disclaimer : je vais tenter de vous retranscrire l’organisation et les flux des outils présentés ci-dessus dans l’architecture cible. Pablo Lopez a présenté un schéma très clair qu’il est difficile de remplacer par de longues explications . Néanmoins, le sujet étant tellement intéressant, je me lance :)</i><br /><br />Chaque application va produire des logs et celles-ci seront collectées par syslog-ng.<br />Une question se pose : <br /><br /><b>Comment ne pas bloquer les systèmes émetteurs des lignes de log pendant leur traitement ?</b><br />La centralisation de l’ensemble des données collectées se fait inévitablement via le réseau. Afin d’être non bloquante pour le système ayant produit la ligne de log, celle-ci est envoyée via la protocole UDP.<br /><br /><i>Ce protocole faisant du broadcasting, le client n’attend pas d’accusé de réception ; donc une fois le message envoyé, celui-ci reprend son activité.</i> <br /><br />Pablo nous explique que ce gain de temps peut engendrer des problèmes concernant les données qui peuvent être potentiellement perdues. En effet si UDP permet d’être non bloquant, il n’y a aucune garantie que le message ait été bien reçu.<br /><br />Pour pallier à ce problème, l’émission de message via UDP ne se fera pas directement sur le réseau, mais en local. Un syslog-ng sera déployé localement sur chaque machine et sera à l’écoute des messages broadcastés sur la machine. Une fois collectées, les informations seront envoyées pour être centralisées via le réseau mais cette fois selon le protocole TCP. <br /><br /><i>Ce protocole prend en charge l’émission d’un accusé de réception pour chaque envoi de paquets. Cela garantit l’intégrité des données envoyées.</i><br /><br /><b>Comment traiter ce volume important de données de manière efficace ?</b><br />Une fois les données centralisées, FLUME se chargera d’alimenter un système de fichiers HDFS. Ensuite, le node manager d’HDFS va segmenter les données reçues et les répartir sur plusieurs nodes.<br /><br />Une fois les données segmentées et réparties, MapReduce sera utilisé pour traiter, analyser et extraire les données pertinentes.<br /><br /><b>Comment présenter les informations afin qu’elles soient exploitables pas un humain ?</b><br />Lorsque les données sont prêtes, celles-ci seront à nouveau déversées sur un nouveau support de type base NoSQL : MongoDB. C’est une base de données orientée document.<br /><br /><b>Pourquoi avoir ajouter un nouveau support dans l’architecture ?</b><br />L’intérêt de stocker les informations traitées sur ce type de base est double : <br />	1- Lorsque les données sont traitées, on pourra y accéder sans limite en évitant de relancer tous les calculs réalisés par la couche HADOOP.<br />	2- Les données consolidées dans la base MongoDB tiennent beaucoup moins de place que les données brutes.<br />3- La base MongoDB utilise nativement le format JSON ce qui est parfaitement en adéquation avec la dernière brique de l’architecture : l’application Play!<br /><br />Comme nous l’avons vu ci-dessus, la dernière brique Play! Framework, associé à Highcharts pour l&#039;affichage dynamique de graphiques, va permettre de fournir une vue ergonomique des données collectées. La rapidité de développement et de mise en place d’une application basée sur ce framework en a fait un choix évident.<br /><br />En plus de cette mise en place, chaque outil a fait l’objet de tuning afin d’optimiser et diminuer l’écart entre le moment de sortie d’une nouvelle ligne de log et sa disponibilité dans l&#039;application de visualisation des logs consolidés.<br />Cette architecture permet d’apporter une meilleure exploitation des logs à des fins techniques et métier : <br />	- Détection et analyse des incidents beaucoup plus efficace<br />	- Informations marketing <br />	- Détection de fraude à la carte bleue<br />	- Analyse du trafic web<br /><br /><i>Cette présentation sera disponible sur Parleys, je vous recommande de la visionner afin d’avoir plus de détails et surtout accéder à la vue d’ensemble de l’architecture</i><br /><br /><br />#java  #devoxxfr   #lopez   #hadoop   #flume   #bigdata﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>339</wp:post_id>
		<wp:post_date>2012-04-21 07:36:58</wp:post_date>
		<wp:post_date_gmt>2012-04-21 07:36:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devoxx-france-bigdata-et-hadoop-au-secours-de-teraoctets-de-logs-inexploitables</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bigdata"><![CDATA[Bigdata]]></category>
		<category domain="post_tag" nicename="devoxxfr"><![CDATA[Devoxxfr]]></category>
		<category domain="post_tag" nicename="flume"><![CDATA[Flume]]></category>
		<category domain="post_tag" nicename="hadoop"><![CDATA[Hadoop]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="lopez"><![CDATA[Lopez]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XmlUnit</title>
		<link>https://thecoderwriter.wordpress.com/2012/04/18/xmlunit/</link>
		<pubDate>Wed, 18 Apr 2012 22:40:18 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/04/18/xmlunit/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Dans la famille Unit, j’avais déjà évoqué DBUnit et MoreUnit. Aujourd’hui, je vais vous présenter <b>XMLUnit</b>. <br />Cet outil est une extension du célèbre framework de tests <b>JUnit</b>.<br />Cette extension, comme son nom l’indique, offre la possibilité d’effectuer des tests sur la vérification et la validation de fichiers au format XML.<br /><br />Vous me direz sûrement : mais à quoi nous sert les DTDs et XSDs, sinon à faire ce travail de validation ? Et je vous répondrais que cette validation s’attache à vérifier uniquement la structure du document (si la balise A est bien avant la balise B et si l’attribut, obligatoire, est bien présent dans la balise Z). <br />XmlUnit nous permet d’aller plus loin et de vérifier le contenu du fichier XML.<br /><br />Imaginons un service qui va émettre une requête au format XML. Pour créer cette requête, le système va extraire des données et les mettre en forme dans un fichier XML afin de pouvoir l’adresser au service concerné.<br /><br />Pour couvrir le code générateur du fichier XML par des tests unitaires pertinents, il va falloir être capable de vérifier que le fichier généré est conforme en termes de structure et de données relativement aux spécifications du service.<br />A l’aide de XmlUnit, cette tâche va être simplifiée. Il faudra fournir en entrée un fichier XML représentant la requête attendue et le fichier qui a été généré par le système.<br /><br />Ce que je viens d’écrire ci-dessus est la principale fonctionnalité du framework, mais celui-ci est aussi capable de :<br />	- donner les différences entre deux fichiers XML (ce que nous venons de voir)<br />	- d’effectuer une validation partielle d’un fichier XML (via une classe de Validator)<br />	- de valider le résultat d’une transformation via XSLT (via une classe Transform)<br />	- d’évaluer une expression XPath sur une partie d’un fichier XML (via une interface XpathEngine<br />	- etc<br /><br />XmlUnit est aussi capable de travailler avec du HTML.<br /><br />Pour mettre en oeuvre cela, l’outil fournit une classe XMLTestCase et un jeu d’assertions dédiées à la validation XML.<br />Le site fournit pas mal d’exemples de la vraie vie, ce qui permet de monter rapidement en compétence.<br /><br />C’est un des outils qu’il est toujours utile d’avoir dans sa trousse à outils. <br />La dernière release remonte à septembre 2009. Il existe aussi une version pour la plateforme .Net (dernière release avril 2009)<br /><br />#java  #test   #xml   #unit﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>340</wp:post_id>
		<wp:post_date>2012-04-18 22:40:18</wp:post_date>
		<wp:post_date_gmt>2012-04-18 22:40:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xmlunit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<category domain="post_tag" nicename="unit"><![CDATA[Unit]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[Xml]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java Puzzle</title>
		<link>https://thecoderwriter.wordpress.com/2012/04/12/java-puzzle-2/</link>
		<pubDate>Thu, 12 Apr 2012 23:21:55 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/04/12/java-puzzle-2/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Qu’est ce qu’un Java Puzzle ?<br />Un Java Puzzle est une sorte de test permettant de challenger ses compétences en java. L’auteur du puzzle fournit un bout de code ainsi qu’un objectif à atteindre.<br />Le code contiendra une portion qui donne l’impression que l’objectif fixé est impossible à réaliser.<br />Les règles du jeu sont simples et pleines de bon sens. Elles sont au nombre de 5 : <br /><br />	1 - Le but est d&#039;atteindre une ligne particulière dans le code proposé. Copier et modifier le code pour rendre la ligne accessible ne compte pas.<br />	2 - Pour compiler et exécuter le programme, toutes les versions du JDK sont autorisées (sauf celles qui auraient pu être modifiées pour réussir le puzzle)<br />	3 - Aucun argument n’est accepté sur la ligne de commande exceptée -Djava.security.manager<br />	4 - La solution doit être contenue dans un seul fichier .java<br />	5 - Il est interdit d’exploiter des failles de sécurité de java. Il est possible d’écrire n’importe quel type de code (même pas propre), du moment que les règles ci-dessus sont respectées.<br /><br />L’idée est d’utiliser des astuces du langage, des comportements extrêmes de java pour parvenir à ses fins.<br /><br />Dans le lien, vous trouverez plusieurs puzzles sur lesquels vous pourrez tester vos connaissances avancées du langage. <br /><br />Apprendre en s’amusant, beau concept non ?<br /><br />Enfin, sachez que <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/113200173329286634669">Joshua Bloch</a></span> a écrit un livre rassemblant des java puzzles : <a href="http://www.javapuzzlers.com/">http://www.javapuzzlers.com/</a><br /><br />#java  #puzzle   #test   #challenge﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>341</wp:post_id>
		<wp:post_date>2012-04-12 23:21:55</wp:post_date>
		<wp:post_date_gmt>2012-04-12 23:21:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-puzzle-2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="challenge"><![CDATA[Challenge]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JDK8, Roadmap</title>
		<link>https://thecoderwriter.wordpress.com/2012/04/11/jdk8-roadmap/</link>
		<pubDate>Wed, 11 Apr 2012 00:01:34 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/04/11/jdk8-roadmap/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Aujourd’hui, Oracle a publié sur la mailing-list de développement <i>jdk8-dev</i> une proposition concernant les dates des différentes échéances de livraison pour la prochaine version de Java :<br /><br />- M1: août 2011 - 24 avril 2012<br />- M2: fin juin 2012<br />- M3: fin juillet 2012<br />- M4: fin septembre 2012<br />- M5: fin novembre 2012<br />- M6: fin janvier 2013<br /><br />Le milestone 6 correspond à une livraison complète de l’ensemble des fonctionnalités. A partir de cette date, le projet sera dans la phase de stabilisation de la plateforme selon le calendrier suivant : <br /><br />- début février -&gt; début avril 2013 : L’ensemble des bugs seront pris en compte<br />- à partir d’avril -&gt; mi juin, le focus sera fait seulement sur les bugs de priorité P1 à P3.<br />- à partir de mi juin, la barre sera relevée à nouveau, pour ne prendre en compte uniquement les bugs bloquants.<br /><br />Une dérogation pour les travaux des JSRs jusqu’au mois de mai 2013 sera possible. Après cette date, la même politique sera appliquée.<br /><br />Mathias Axelsson propose une approche proactive en faisant les tests au plus tôt et dans le reporting de bugs.<br /><br />L’idée principale de Mathias Axelsson en proposant ce calendrier avec les différentes échéances et leurs objectifs, est de fournir une vision claire à l’ensemble des personnes travaillant sur le projet. Ceci pour éviter de retrouver les problèmes rencontrés durant la phase de stabilisation de la version précédente où des bugs critiques avaient été découverts très tardivement retardant la date de sortie.<br /><br />Il est possible (pour les abonnés à la mailing-list) de faire un retour sur cette proposition jusqu’au 17 avril 2012.<br /><br /><i>Première échéance : le 24 avril 2012</i><br /><br /><br />#java  #jdk8   #release   #roadmap   #oracle   #milestone﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>342</wp:post_id>
		<wp:post_date>2012-04-11 00:01:34</wp:post_date>
		<wp:post_date_gmt>2012-04-11 00:01:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jdk8-roadmap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jdk"><![CDATA[JDK]]></category>
		<category domain="post_tag" nicename="milestone"><![CDATA[Milestone]]></category>
		<category domain="post_tag" nicename="oracle"><![CDATA[Oracle]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[Release]]></category>
		<category domain="post_tag" nicename="roadmap"><![CDATA[Roadmap]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>BlueJ</title>
		<link>https://thecoderwriter.wordpress.com/2012/04/06/bluej/</link>
		<pubDate>Fri, 06 Apr 2012 21:59:46 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/04/06/bluej/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le sujet de cet article va s’orienter sur l’apprentissage de Java et de l’approche objet qui en découle. J’ai eu l’occasion de découvrir cet outil durant les cours que j’ai suivi au CNAM. <br /><br />Appréhender les concepts objet au travers du langage Java lorsque l’on est débutant n’est pas toujours chose facile. Se trouver confronté aux problématiques de ‘plomberie’ (classpath, compilation, dépendance, etc..) peut faire perdre pas mal de temps, voire en décourager certains.<br /><br />BlueJ est un IDE Java. Il a été conçu pour l’enseignement du langage.<br />Il se concentre sur la conception objet (héritage, interface, agrégation, composition, etc), et ceci, de manière graphique principalement (une vue des lignes de code est disponible également).<br /><br />Les fonctionnalités principales de l’outil :<br /> - Affichage de la structure des classes de manière graphique,<br /> - Edition graphique et textuelle,<br /> - Toutes les fonctionnalités de base d’un IDE : compilation, débogage, etc,<br /> - Interface utilisateur intuitive<br /> - Tests unitaires<br /> - etc<br /><br />Il existe également une API permettant d’étendre les fonctionnalités natives. Il est également possible de travailler en équipe.<br /><br />Ce projet est né dans deux universités à Melbourne, Australie et Canterbury, Grande Bretagne.<br />Ce projet était pleinement supporté par Sun Microsystems et maintenant par Oracle.<br />L’IDE tient son nom du système sur lequel il a été bâti à l’origine : <i>Blue System</i>. Blue est un langage de programmation orienté objet qui a été créé spécialement pour l’enseignement. (<a href="http://www.cs.kent.ac.uk/people/staff/mik/blue/">http://www.cs.kent.ac.uk/people/staff/mik/blue/</a>).<br /><br />BlueJ est disponible sur toutes les platformes du marché. Il est gratuit. Un livre est aussi disponible sur l’introduction au langage Java en se basant sur BlueJ.<br /><br /><br />#java  #blueJ   #ide   #concept   #apprentissage﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>343</wp:post_id>
		<wp:post_date>2012-04-06 21:59:46</wp:post_date>
		<wp:post_date_gmt>2012-04-06 21:59:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bluej</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="apprentissage"><![CDATA[Apprentissage]]></category>
		<category domain="post_tag" nicename="bluej"><![CDATA[BlueJ]]></category>
		<category domain="post_tag" nicename="concept"><![CDATA[Concept]]></category>
		<category domain="post_tag" nicename="ide"><![CDATA[Ide]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Comparatif Java Heap space</title>
		<link>https://thecoderwriter.wordpress.com/2012/04/04/comparatif-java-heap-space/</link>
		<pubDate>Wed, 04 Apr 2012 22:18:05 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/04/04/comparatif-java-heap-space/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Pour faire suite à l’article que j’avais publié précédement sur le fonctionnement de la mémoire dans une machine virtuelle, je vous propose aujourd’hui un article présentant les différences entre lesJVMs d’Oracle et celle d’IBM au niveau de la gestion la mémoire.<br /><br />L’article en lien dans ce post, vous fournis une vision macro des différences en les différentes JVM du marché, à savoir : <br />	-Jrockit ; Oracle<br />	-Hotspot : Oracle (anciennent SUN)<br />	-IBM VM (IBM)<br /><br />Les deux JVMs (IBM et Jrockit) partagent leur espace mémoire en 2 :<br />	<br />-Java Heap <br />-Native memory space<br /><br />Nous pouvons constater que la permGen space n’est pas évoquée. En effet, cette zone existe uniquement dans la JVM Hotspot. L’équivalent (dans celles d’Oracle et IBM) est la Native memory space.<br /><br />En ce qui concerne JRockit, Oracle envisage d’effectuer un merge avec la JVM Hotspot. L’objectif de cette fusion est de n’avoir à gérer qu’une seule JVM en la batissant sur le meilleur des JVMs fusionnées.<br /><br />L’article vous fournira plus de détails ainsi que des pointeurs vous permettant d’approffondir le sujet.<br />#java #jvm  #memoire  #oracle #hotspot  #jroquit﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>344</wp:post_id>
		<wp:post_date>2012-04-04 22:18:05</wp:post_date>
		<wp:post_date_gmt>2012-04-04 22:18:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>comparatif-java-heap-space</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="hotspot"><![CDATA[Hotspot]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jroquit"><![CDATA[Jroquit]]></category>
		<category domain="post_tag" nicename="jvm"><![CDATA[Jvm]]></category>
		<category domain="post_tag" nicename="memoire"><![CDATA[Memoire]]></category>
		<category domain="post_tag" nicename="oracle"><![CDATA[Oracle]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quoi de neuf avec IntelliJ 11 ?</title>
		<link>https://thecoderwriter.wordpress.com/2012/04/02/quoi-de-neuf-avec-intellij-11/</link>
		<pubDate>Mon, 02 Apr 2012 22:07:38 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/04/02/quoi-de-neuf-avec-intellij-11/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Aujourd’hui, une nouvelle version de l’IDE Intellij IDEA est sortie : 11.1. C’est l’occasion pour faire un point sur les nouveautés venues avec la version 11 (sortie le 30 décembre 2011).<br /><br /><b>IntelliJ IDEA en quelques mots :</b><br />IntelliJ est un IDE dédié au langage Java et son écosystème. <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/104653401767241115426">IntelliJ IDEA</a></span> est édité par JetBrains. Cet IDE existe sous deux licences : une gratuite et l’autre payante (<i>ultimate edition</i>), à l’instar de son principal concurrent Eclipse, qui lui est complètement gratuit.<br />Bien entendu, la version ultimate apporte beaucoup plus de fonctionnalités que la version non payante. <br />En essayant de rester impartial, l’IDE apporte un grand confort de travail. La gestion perpétuelle du contexte au sein de l’IDE fait la différence avec la plupart des IDEs concurrents. Je ne vais pas aller plus loin, car le propos de l’article n’est pas de faire un comparatif :-)<br /><br />Plusieurs types de licences payantes sont disponibles en fonction de votre situation :<br />	- Entreprise,<br />	- Travaux dans le cadre d’un projet open source,<br />	- Etudiant,<br />	- etc.<br /><br />Voici une liste (non exhaustive) des nouvelles fonctionnalités proposées dans la nouvelle mouture de l’IDE : <br /><br /><b>L’IDE en général :</b><br />	- Globalement, les performances de l’IDE ont été améliorées<br />	- L’indexation des fichiers a aussi été améliorée.<br />	- Un support des branches GIT simplifié.<br />	- Une intégration avec GitHub et la fonctionnalité GIST.<br />	- Une meilleure expérience pour le développeur.<br />	- Mise à jour de l’interface utilisateur.<br />	- Support de SVN 1.7<br />	- Améliorations sous Linux et MacOs<br /><br /><b>Support des outils et frameworks :</b> <br />	- Intégration de Gradle<br />	- Support de Play framework + JPA<br />	- Support d’Android (Android 4 SDK)<br />	- Hibernate 4<br />	- Amélioration du support de Scala<br />	- Support de Grails 2.0<br />	- Amélioration du support de Spring<br /><br /><b>Développement Web et JEE :</b> <br />	- Complétion sur le javascript<br />	- Support de JBoss7 et Websphere 8<br /><br />Vous pourrez retrouver plus de détails et l’exhaustivité des nouvelles fonctionnalités sur le lien ci-dessous.<br /><br />En conclusion, je dirais qu’essayer Intellij Idea, c’est l’adopter. Le coût de la licence peut être un frein, mais c’est un investissement que vous retrouverez dans votre productivité du quotidien.<br /><br />#Java  #intellij   #idea   #release   #version   #IDE﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>345</wp:post_id>
		<wp:post_date>2012-04-02 22:07:38</wp:post_date>
		<wp:post_date_gmt>2012-04-02 22:07:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quoi-de-neuf-avec-intellij-11</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ide"><![CDATA[Ide]]></category>
		<category domain="post_tag" nicename="idea"><![CDATA[Idea]]></category>
		<category domain="post_tag" nicename="intellij"><![CDATA[Intellij]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[Release]]></category>
		<category domain="post_tag" nicename="version"><![CDATA[Version]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Le garbage collector de la JVM</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/29/le-garbage-collector-de-la-jvm/</link>
		<pubDate>Thu, 29 Mar 2012 23:19:18 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/29/le-garbage-collector-de-la-jvm/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Dans un précédent article <i>Tuning JVM</i>, nous évoquions les différents paramètres sur lesquels il était possible de jouer pour optimiser le fonctionnement d’une JVM en fonction de son contexte.<br />Parmi ces paramètres, il y a le mécanisme de <b>Garbage Collection</b>. <br />Pour aborder ce sujet, il faut bien comprendre comment la JVM organise son espace mémoire.<br /><br />La JVM répartit sa mémoire selon 2 zones principales :<br />	- PERM (Espace permanent)<br />	- HEAP<br /><br />Le premier espace est utilisé pour stocker tous les .class lors du chargement de l’application. Ensuite dans le fonctionnement courant, la JVM utilisera les classes chargées pour la création des instances. Celles-ci seront stockées dans le deuxième espace : HEAP.<br /><br />La HEAP est une zone dynamique à l’instar de la PERM. Cette zone est divisée en 2 parties principales : <br />	- Young (génération)<br />	- Old (génération)<br /><br />Comme le nom de chaque zone l’indique, elles vont comporter des objets de générations différentes. <br />Un nouveau découpage s’opère dans la zone Young :<br />	- From<br />	- To<br />	- Eden<br /><br />Ces 3 zones décrivent les étapes que vont suivre les objets tout au long de leur vie. <br /><br />Nous avons vu ci-dessus, l’ensemble des zones qui composent la mémoire de la JVM.<br />Dans la suite de cet article, nous allons comprendre leurs relations au travers du <i>garbage collector</i> communément appelé GC.<br />L’interaction peut être comparée au principe des vases communicants.<br /><br />Le GC opère de 2 façon différentes : <br />	- Minor GC<br />	- Major GC (Full GC)<br /><br />Le <b>minor GC</b> opère principalement dans la zone Young génération. Dès qu’un objet est créé dans la JVM, celui-ci est placé dans la zone EDEN. Lorsque cette dernière est pleine, alors se lance le minor garbage collector. Dans un premier temps, il va marquer les objets selon 2 critères :<br />	- Les objets orphelins (objet n’ayant plus aucune référence)<br />	- Les objets vivants<br /><br />Ensuite, il supprime les orphelins et déplace les objets vivants dans la zone <i>From.</i> <br />Au prochain tour, si les deux premières zones sont pleines alors c’est vers la zone <i>To</i> que les objets seront déplacés.<br />Le <i>minor GC</i> s’exécute très rapidement. En effet, le déplacement des objets d’une zone à l’autre se fait seulement par un changement de pointeur sur la zone mémoire, ce qui est très peu couteux.<br /><br />Le <b>major GC</b> intervient lorsque la zone <i>Young Generation</i> arrive à saturation. Cette étape est très couteuse, nous allons voir pourquoi.<br /><br />Lorsque la JVM doit lancer un major GC, il doit réaliser une opération nommée <i>Stop the world collection</i>. Cela signifie que la JVM arrête tous les threads afin de faire une analyse approfondie de la mémoire. Durant celle-ci, les objets orphelins seront supprimés et les objets vivants sont recopiés vers la zone OLD génération.<br /><br />Afin d’éviter l’effet <i>freeze</i> applicatif, il est important de bien dimensionner les différents espaces mémoire que nous avons vu tout au long de cet article avec pour objectif de minimiser les major GC.<br /><br />Nous avons vu un aperçu du fonctionnement du GC, vous trouverez plus de détails dans l’article attaché à ce post.<br /><br />Tips : L’utilisation de <i>JVisualVM</i> vous permettra de voir graphiquement l’ensemble des points vus ici.<br /><br />#java  #garbage   #collector   #young   #eden   #major   #minor   #JVM﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>346</wp:post_id>
		<wp:post_date>2012-03-29 23:19:18</wp:post_date>
		<wp:post_date_gmt>2012-03-29 23:19:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>le-garbage-collector-de-la-jvm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="collector"><![CDATA[Collector]]></category>
		<category domain="post_tag" nicename="eden"><![CDATA[Eden]]></category>
		<category domain="post_tag" nicename="garbage"><![CDATA[Garbage]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jvm"><![CDATA[Jvm]]></category>
		<category domain="post_tag" nicename="major"><![CDATA[Major]]></category>
		<category domain="post_tag" nicename="minor"><![CDATA[Minor]]></category>
		<category domain="post_tag" nicename="young"><![CDATA[Young]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mix-IT, c’est parti</title>
		<link>https://thecoderwriter.wordpress.com/2012/03/27/mix-it-cest-parti/</link>
		<pubDate>Tue, 27 Mar 2012 22:22:47 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/03/27/mix-it-cest-parti/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Une nouvelle édition de la conférence lyonnaise se tiendra le 26 avril 2012 dans les locaux de supinfo à Lyon.<br />Les inscriptions sont ouvertes depuis le 5 mars 2012.<br /><b>Mix-IT</b> est le fruit d’une collaboration entre le <b>Lyon JUG</b> et <b>le club agile Rhône-Alpes</b>. Les principaux sujets traités pendant cette journée sont l’écosystème Java (évidemment ;-)), l’agilité et l’innovation IT.<br /><br />Les présentations seront réparties selon les thèmes (aux noms originaux) suivants : <br /><br />	-	<i>Agility</i> : L’agilité pour les débutants et les passionnés,<br />	-	<i>Techy</i> : L’univers Java et son écosystème,<br />	-	<i>Trendy</i> : Les tendances novatrices et avant-gardistes,<br />	-	<i>Gamy</i> : Des jeux agiles et coding dojos pour apprendre,<br />	-	<i>Weby</i> : Les dernières tendances et technologies dédiées au web.<br /><br />Plus de 30 speakers sont prévus pour parler de ces différents thèmes.<br /><br />Pendant l&#039;heure du repas (13h-14h), des sessions très courtes (5min), appelées <b>Lightning Talk</b>, seront ouvertes pour traiter d’un sujet avec l’objectif de faire découvrir et donner envie à l’auditoire d&#039;approfondir le sujet présenté.<br />Cet espace est ouvert à tous. Les sujets retenus seront désignés par un vote des participants. <br />Pourquoi ne pas tenter sa chance ?<br /><br />Les frais d’inscription sont très modestes, ils s’élèvent à 30 euros.<br /><br />#mix-it  #java   #agile   #lyon   #jug﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>347</wp:post_id>
		<wp:post_date>2012-03-27 22:22:47</wp:post_date>
		<wp:post_date_gmt>2012-03-27 22:22:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mix-it-cest-parti</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agile"><![CDATA[Agile]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jug"><![CDATA[Jug]]></category>
		<category domain="post_tag" nicename="lyon"><![CDATA[Lyon]]></category>
		<category domain="post_tag" nicename="mix"><![CDATA[Mix]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DumdSter : Email testing</title>
		<link>https://thecoderwriter.wordpress.com/2012/09/10/dumdster-email-testing/</link>
		<pubDate>Mon, 10 Sep 2012 23:00:16 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/09/10/dumdster-email-testing/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Toutes les applications sur lesquelles nous travaillons ont toujours le besoin d’émettre des mails.<br />En règle générale, ces mails servent à notifier ou informer des utilisateurs. <br />Bien souvent, le contenu du mail est dynamique, ainsi que les paramètres d’envoi tels que l’émetteur, le destinataire, le sujet, etc...<br />Bien entendu, la gestion des mails est assurée par un composant générique, développé par nos soins ou dans 95% des cas, fourni par un framework tiers (ex: Spring).<br /><br />Associé à ce coté dynamique, on a des règles métier. Je pense que vous voyez où je veux en venir.<br />Afin de garantir la cohérence par rapport à ces règles et surtout détecter les régressions en cas d’évolution, il est impératif d’écrire les tests unitaires et d’intégration qui vont bien.<br /><br />Tester un envoi de mail, n’est pas toujours évident dans le sens où le résultat produit est un mail qu’il faut réussir à intercepter une fois qu’il a été construit et envoyé.<br /><br />Dumbster est un outil permettant d’adresser ce besoin de manière efficace et très simple.<br />L‘objectif est de permettre au sein d’un test unitaire/test d’intégration de démarrer un serveur SMTP afin d’intercepter les mails envoyés.<br />Le fait d’avoir un serveur de ce type à disposition facilite grandement les choses. <br /><br />La mise en place sur un projet est d’une simplicité déconcertante. Elle se résume aux étapes suivantes : <br />	- ajouter la dépendance dans votre pom (ou dans le classpath pour un projet non mavenisé)<br />	- démarrer le serveur smtp au début du test (1 ligne)<br />	- envoyer vos mails<br />	- récupérer vos mails (1 ligne)<br />	- traiter le résultats avec vos assertions<br />	- arrêter le serveur smtp (1 ligne).<br /><br />Sans exagération, ce n’est pas plus compliqué que cela. Il n’y a aucune configuration à faire.<br />Plus concrètement, voici un exemple de code mettant en œuvre l’outil. <br /><br />SimpleSmtpServer server = SimpleSmtpServer.start();<br /><br />// envoi des mails<br /><br />// récupération du nombre de messages reçus par le serveur<br />int receivedEmailSize = server.getReceivedEmailSize();<br /><br />// récupération des emails de manière effective<br />Iterator emails = server.getReceivedEmail();<br /><br />//traitement des mails reçus<br /><br />SimpleSmtpServer.stop();<br /><br />Cela ne nécessite pas plus de travail que cela.<br /><br />Ce projet va bientôt avoir 10 ans d&#039;existence, la dernière release a été faite en novembre 2005. Il ne semble plus y avoir beaucoup d’activité sur le projet, cependant le service rendu par cet outil est précis et fonctionne bien.<br /><br />Étant donné l&#039;âge de l’outil, bon nombre d’entre vous connaissent probablement déjà l’outil ; dans ce cas n’hésitez pas à donner vos impressions sur l’outil.<br /><br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23smtp">#smtp</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23test">#test</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23fake">#fake</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23integration">#integration</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>308</wp:post_id>
		<wp:post_date>2012-09-10 23:00:16</wp:post_date>
		<wp:post_date_gmt>2012-09-10 23:00:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dumdster-email-testing</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fake"><![CDATA[Fake]]></category>
		<category domain="post_tag" nicename="integration"><![CDATA[Integration]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="smtp"><![CDATA[Smtp]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java EE 7 gardera les pieds sur terre</title>
		<link>https://thecoderwriter.wordpress.com/2012/09/05/java-ee-7-gardera-les-pieds-sur-terre/</link>
		<pubDate>Wed, 05 Sep 2012 23:33:46 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/09/05/java-ee-7-gardera-les-pieds-sur-terre/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Courant juillet 2012, Oracle annoncait  le  report du projet Jigsaw de la version 8 à la version 9 du JDK.  Ce décalage de release était du à un problème de temps et des soucis techniques rencontrés. Nous en avions parlé lors d’un post sur cette page : <a href="https://plus.google.com/112440333946538821016/posts/MrYT1eBkTnV">https://plus.google.com/112440333946538821016/posts/MrYT1eBkTnV</a><br /><br />Aujourd’hui, c’est au tour de la plateforme Java EE d’annoncer un changement dans sa roadmap initialement prévue au quatrième trimestre 2012.<br /><br />C’est sur le blog d’Oracle que la nouvelle est tombée le 30 août 2012 annoncant que toute la partie Cloud ( Paas et la mutualisation) est reportée sur JavaEE 8.<br />Les raisons données, par la responsable de la spécification JavaEE 7, Linda DeMichiel, sont liées à une avancée lente sur toute cette partie par rapport aux planifications.<br /><br />D’après les explications données par Linda, ces ralentissements sur l’agenda  sont du principalement  :<br />- au manque de maturité des technologies du cloud (mutualisation, déploiement d’application, etc) <br />- ainsi qu’à la volonté, des équipes d’Oracle, de vouloir faire les choses correctement, compte tenu de l&#039;expérience limitée de l&#039;industrie dans le domaine de nuages ​​lorsque le travail a été entamé.<br /><br />En gardant la cible initiale JavaEE 7 pour ces fonctionnalités, cela aurait eu pour conséquence de décaler la release au printemps 2014, soit un décalage de 2ans.<br />Le report des fonctionnalités liées au Cloud présente les avantages suivants : <br />	- Cela permettra aux revendeurs des platformes JavaEE de gagner en expérience sur leur implémentations dans ce domaine.<br />	- La communauté n’aura pas à supporter le prix des fonctionnalités nécessitant plus de temps à mettre en place. <br />	- parce que dans Java EE 7, une partie des bases nécessaires à l’infrastructure du Cloud ont déjà été posées (définition des métadatas, amélioration de la configuration de la couche de sécurité,etc). Ces bases permettront d’accélérer la livraison de JavaEE 8 (estimée au printemps 2015).<br /><br />Au delà des avantages présentés ci-dessus, cette modification de planning permettra au équipes de : <br />- garder un focus sur l’amélioration de la simplification et de la convivialité de la platforme<br />- livrer dans les temps les fonctionnalités largement plébiscitées par les développeurs (Websocket, JSON-P, la simplification de l’api JMS  2.0, etc).<br /><br />On comprend que la réduction du scope des fonctionnalités est un choix plutôt raisonnable. En effet, l’entreprise préfère tenir son planning en terme de date et fournir des fonctionnalités très attendues par la communauté ; au détriment du Cloud qui aurait imposé un décalage de livraison important. <br />Comme on dit : “mieux vaut tenir que courir”. En espérant qu’il n’y ait pas de nouveaux rebondissements, rendez-vous au quatrième trimestre 2012...<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23javaEE7">#javaEE7</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23javaEE8">#javaEE8</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23annonce">#annonce</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23report">#report</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>309</wp:post_id>
		<wp:post_date>2012-09-05 23:33:46</wp:post_date>
		<wp:post_date_gmt>2012-09-05 23:33:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-ee-7-gardera-les-pieds-sur-terre</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="annonce"><![CDATA[Annonce]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="javaee"><![CDATA[JavaEE]]></category>
		<category domain="post_tag" nicename="report"><![CDATA[Report]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>C’est la rentrée !</title>
		<link>https://thecoderwriter.wordpress.com/2012/09/03/cest-la-rentree/</link>
		<pubDate>Mon, 03 Sep 2012 23:09:48 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/09/03/cest-la-rentree/</guid>
		<description></description>
		<content:encoded><![CDATA[ &amp;  <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/111274180246973214570">Fabien Baligand</a></span> <br /><br /><br />Les parasols sont rangés, les bouées dégonflées, les souvenirs photographiés... <br />La rentrée s’annonce pour tout le monde, c’est avec plaisir et toujours plus de motivation que nous reprenons les publications sur cette page.<br /><br />Nous gardons le rythme d’un article par jour du lundi au jeudi sur <b>Java &amp; son écosystème</b> : news, présentation de librairies sympa, articles techniques, annonces de releases, annonces de conférences, ...<br /><br />Pour suivre les publications de la page, vous pouvez intégrer le flux google+ dans votre reader RSS favori via l’url suivante :<br /><a href="http://gplus-to-rss.appspot.com/rss/112440333946538821016">http://gplus-to-rss.appspot.com/rss/112440333946538821016</a><br /><br />Les statistiques de la page sont toujours disponible ici :<br /><a href="http://gplusstats.fsznajderman.fr">http://gplusstats.fsznajderman.fr</a><br /><br />Enfin si vous souhaitez faire connaître cette page, voici une url plus facile à retenir que l’id de la page Google+ :<br /><a href="http://gplus.to/javafr">http://gplus.to/javafr</a><br /><br />Nous espérons vous retrouver nombreux sur la page, n’hésitez pas à partager vos impressions sur les publications à venir.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23reprise">#reprise</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>310</wp:post_id>
		<wp:post_date>2012-09-03 23:09:48</wp:post_date>
		<wp:post_date_gmt>2012-09-03 23:09:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cest-la-rentree</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="reprise"><![CDATA[Reprise]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>1000 et un tips en Java</title>
		<link>https://thecoderwriter.wordpress.com/2012/07/30/1000-et-un-tips-en-java/</link>
		<pubDate>Mon, 30 Jul 2012 21:24:25 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/07/30/1000-et-un-tips-en-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Je vous propose un pointeur vers un site décrivant tout un ensemble de tips sur le langage Java. <br />Vous trouverez des informations diverses : <br />- La définition du mot-clé <b>volatile</b>,<br />- L’ensemble des méthodes de conversion de type en Java,<br />- L’ordre d’initialisation des différents parties d’un programme,<br />- Des détails sur le <i>casting</i><br />- etc<br /><br />L&#039;organisation du site est originale. En effet, les informations sont organisées sur la base d&#039;un template javadoc.<br /><br />Ce site s’adresse aussi bien aux développeurs débutants qu’aux développeurs séniors.<br /><br />Aussi vous trouverez des examens d’entrainement au SJCP.<br /><br />Ce site est à conserver dans ses favoris pour trouver une réponse ponctuelle à une question ou tout simplement pour découvrir des aspects du langage pour sa culture personnelle. <br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23tips">#tips</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>311</wp:post_id>
		<wp:post_date>2012-07-30 21:24:25</wp:post_date>
		<wp:post_date_gmt>2012-07-30 21:24:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>1000-et-un-tips-en-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="tips"><![CDATA[Tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Android 4 : Les fondamentaux du développement d&#039;applications Java</title>
		<link>https://thecoderwriter.wordpress.com/2012/07/25/android-4-les-fondamentaux-du-developpement-dapplications-java/</link>
		<pubDate>Wed, 25 Jul 2012 21:04:04 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/07/25/android-4-les-fondamentaux-du-developpement-dapplications-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Début juillet, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/100242174348819951543">Nazim Benbourahla</a></span> ressortait de l’ombre, en effet depuis quelques temps les articles se faisaient rares sur son blog. <br />Nazim revient pour annoncer la publication de <i>son livre</i> courant <b>septembre 2012</b>.<br />Cet ouvrage traitera naturellement d’Android dans sa version 4. Il s’adressera principalement aux débutants souhaitant se perfectionner ainsi qu&#039;aux personnes souhaitant découvrir la plateforme.<br /><br />La version de base utilisée sera <b>Ice Cream Sandwich</b> en incluant toutes les nouveautés de la dernière version : <b>Jelly Bean</b>.<br /><br />Voici les grands chapitres que vous pourrez trouver dans ce livre : <br /><br />	-Chapitre 1 : La plateforme Android<br />	-Chapitre 2 : Environnement de développement<br />-Chapitre 3 : Principe de programmation<br />	-Chapitre 4 : Ma première application – HelloAndroid<br />	-Chapitre 5 : Débogage et gestion des erreurs<br />	-Chapitre 6 : Création d’interfaces simples<br />	-Chapitre 7 : Communication entre vues / applications<br />-Chapitre 8 : Personnalisation et Gestion des évènements<br />	-Chapitre 9 : Création d’interfaces avancées<br />	-Chapitre 10 : Persistance de données<br />	-Chapitre 11 : Gestion et partage de données<br />	-Chapitre 12 : Traitement en tâche de fond<br />	-Chapitre 13 : Google Map et Géolocalisation<br />	-Chapitre 14 : Téléphonie<br />	-Chapitre 15 : Accès au matériel<br /><br />Vous trouverez plus de détails sur le lien fourni dans l’article. On peut constater que les sujets abordés couvrent un spectre assez large.<br /><br />Il ne reste qu’à patienter... :)<br /><br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23livre">#livre</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23android">#android</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23v4">#v4</a>  ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>312</wp:post_id>
		<wp:post_date>2012-07-25 21:04:04</wp:post_date>
		<wp:post_date_gmt>2012-07-25 21:04:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-4-les-fondamentaux-du-developpement-dapplications-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="livre"><![CDATA[Livre]]></category>
		<category domain="post_tag" nicename="v"><![CDATA[V]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ELT : Un terminal dans Eclipse</title>
		<link>https://thecoderwriter.wordpress.com/2012/07/23/elt-un-terminal-dans-eclipse/</link>
		<pubDate>Mon, 23 Jul 2012 22:52:44 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/07/23/elt-un-terminal-dans-eclipse/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Le 18 juillet dernier, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/110937808291147673063">Alex Ruiz</a></span>  (développeur chez <b>Google</b> et co-auteur du framework <b>Fest assert</b> ) postait un billet sur son blog pour annoncer la sortie de la première version d’un nouveau plugin. <br />Ce nouveau plugin, destiné à Eclipse, a pour objectif de fournir une terminal au sein de l’IDE.<br />Ce terminal permettra l’exécution de ligne de commande. <br /><br /><b>Pourquoi ce projet ?</b><br /><br />L’idée première est de répondre à un besoin récurrent qu’il a, lui et ses collègues, en travaillant chez Google. <br />En effet, dans le quotidien d’un Googler, l’utilisation de la ligne de commande est très fréquente. Ceci oblige à avoir en permanence une flopée de fenêtres ouvertes et de devoir jongler avec. Comme il l’écrit dans son billet, l’expérience utilisateur n’est pas <i>bonne du tout</i>.<br />Aussi, les terminaux <i>standalone</i> ne supportent pas le copier/coller, ce qui n’est pas très pratique...<br /><br />Voila donc les raisons qui ont motivé Alex Ruiz et ses collègues à créer ce plugin.<br /><br /><b>Qu’est ce qu’il apporte en plus d’être intégré à Eclipse ?</b><br /><br />	- Reconnaissance des caractères d’échappement ANSI<br />	- Colorisation syntaxique<br />	- Ouverture rapide d’un terminal sur un répertoire donné<br />	- Personnalisation des couleurs du terminal (fond et texte)<br />	- Gestion des liens hyper-textes.<br /><br /><br /><b>Le petit bémol...</b><br /><br />Ce plugin est supporté uniquement sous Linux et MacOs X. Bien que je ne sois pas le défendeur de windows, cela reste néanmoins en entreprise l’OS le plus répandu. <br />Cette limitation est induite par l’un des projets sur lequel repose ce plugin : CDT.<br /><br /><b>Les bases du plugin</b><br /><br />Ce plugin repose sur deux projets Eclipse : <br />	- Eclipse CDT<br />	- Eclipse Target Management<br /><br />L’utilisation de ces projets n’est que partielle. En effet, les auteurs du plugin ont préféré <i>forker</i> les projets plutôt que de les utiliser comme dépendances. La raison de ce choix est d’intégrer uniquement les fonctionnalités les plus utiles pour le projet ELT.<br /><br />Les fonctionnalités reprises respectivement sont le pseudo-terminal PTY et l’émulateur de terminal.<br /><br />La version minimum requise d’Eclipse est la 3.7.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23eclipse">#eclipse</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23plugin">#plugin</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23ELT">#ELT</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>313</wp:post_id>
		<wp:post_date>2012-07-23 22:52:44</wp:post_date>
		<wp:post_date_gmt>2012-07-23 22:52:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>elt-un-terminal-dans-eclipse</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="eclipse"><![CDATA[Eclipse]]></category>
		<category domain="post_tag" nicename="elt"><![CDATA[ELT]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="plugin"><![CDATA[Plugin]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java : Breaking news</title>
		<link>https://thecoderwriter.wordpress.com/2012/07/18/java-breaking-news/</link>
		<pubDate>Wed, 18 Jul 2012 23:00:16 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/07/18/java-breaking-news/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Entre hier et aujourd’hui, deux annonces importantes ont été faites par Mark Reinhold autour de la future release du JDK : JDK8.<br /><br /><br /><b>Report de Jigsaw à JDK9</b><br /><br />La première annonce concernait le report du projet Jigsaw qui devait faire partie des nouvelles fonctionnalités importantes lors de la prochaine release du JDK8. <br /><br />Dans un billet sur son blog, Mark Reinhold explique au travers de 5 points, les raisons de ce report : <br />	- Goal : les objectifs du projet Jigsaw<br />	- Progress : L’état d’avancement du projet<br />	- Bake time : Les contraintes et la date de livraison<br />	- Schedule vs feature : Faire un choix<br />	- Keep the beat : Le choix de la sagesse.<br /><br />Pour résumer, le réalisation d’un projet introduisant la modularisation est une entreprise qui aura beaucoup d’impact sur l’écosystème de Java.<br /><br />L’importance de ces impacts, ainsi que le délai pour réaliser la phase de test et de non régression risque de faire prendre du retard à la sortie de la nouvelle mouture.<br />Oracle ayant défini un rythme de livraison d’une nouvelle release tous les deux ans, la société a pris l’option de dé-scoper et reporter ce projet à la version suivante du JDK, sans gaîté de cœur.<br /><br />Vous trouverez plus de détail sur le pointeur suivant : <a href="http://mreinhold.org/blog/late-for-the-train">http://mreinhold.org/blog/late-for-the-train</a><br /><br /><br /><b>Désignation des membres de l&#039;Expert Group de la JSR 337</b><br /><br />La deuxième annonce concerne la désignation des membres du groupe d’expert sur la JSR 337 (<i>JavaTM SE 8 Release Contents</i>). <br />Ces experts devront créer une première ébauche de la spécification et la soumettre à la communauté.<br /><br />Aujourd’hui, les membres sont : <br />	- <b>Andrew</b> Haley de Red Hat<br />	- <b>Steve Poole</b> d’IBM<br />	- <b>Mark Reinhold</b> d’Oracle<br />	- <b>Un membre non encore défini</b> de chez Google.<br /><br />Les prochaines étapes sont définies selon le planning suivant : <br /><br />- <b>juillet 2012</b> : Formation du groupe d’expert : Done! <br />- <b>septembre 2012</b> : Early draft review<br />- <b>janvier 2013</b> : Public review<br />- <b>juin 2013</b> : Proposed final draft<br />- <b>août 2013</b> : Final release<br /><br />Vous trouverez plus de détails sur le pointeur suivant : <a href="http://openjdk.java.net/projects/jdk8/spec/">http://openjdk.java.net/projects/jdk8/spec/</a><br /><br />En théorie, avec l&#039;annonce du report de Jigsaw, le calendrier fixé devrait pouvoir être respecté. <br /><br />A suivre donc...<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23jigsaw">#jigsaw</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23report">#report</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23jcp">#jcp</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java8">#java8</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>314</wp:post_id>
		<wp:post_date>2012-07-18 23:00:16</wp:post_date>
		<wp:post_date_gmt>2012-07-18 23:00:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-breaking-news</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jcp"><![CDATA[JCP]]></category>
		<category domain="post_tag" nicename="jigsaw"><![CDATA[Jigsaw]]></category>
		<category domain="post_tag" nicename="report"><![CDATA[Report]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>GAG : Google Annotation Gallery</title>
		<link>https://thecoderwriter.wordpress.com/2012/07/16/gag-google-annotation-gallery/</link>
		<pubDate>Mon, 16 Jul 2012 21:29:01 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/07/16/gag-google-annotation-gallery/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Quel développeur n’a jamais été confronté à du code lui faisant ressentir les plus vives émotions sans pouvoir les partager de manière formelle ?<br />Ces émotions peuvent aller de la simple satisfaction d’avoir écrit un code parfait à l’envie de tordre le cou à l’auteur des milliers de lignes incompréhensibles que l’on doit débugger.<br /><br />Aujourd’hui, cela est possible. Grâce au projet <i>GAG</i>, plus sérieusement <i>Google Annotation Gallery</i>, vous allez pouvoir annoter votre code ainsi que celui sur lequel vous allez devoir intervenir.<br />Vous allez pouvoir communiquer vos sentiments et vos pensées à l’aide d’un jeu d’annotations.<br /><br />Ces annotations sont reparties selon 5 groupes : <br />- disclaimer<br />	- enforceable<br />	- literary<br />	- remark<br />	- team<br /><br />Certaines de ces annotations peuvent fournir un comportement au prix d’un peu de configuration et de la librairie <b>gag-agent</b>.<br /><br />Je vous invite à découvrir l’ensemble des annotations disponibles et d’exprimer vos émotions à vos collègues :)<br /><br />Attention toutefois à certains comportements d’annotation en environnement de production !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23gag">#gag</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23google">#google</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23detente">#detente</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23%C3%A9motion">#émotion</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date>2012-07-16 21:29:01</wp:post_date>
		<wp:post_date_gmt>2012-07-16 21:29:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>gag-google-annotation-gallery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="detente"><![CDATA[Detente]]></category>
		<category domain="post_tag" nicename="gag"><![CDATA[Gag]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IntelliJ 12 Leda - EAP</title>
		<link>https://thecoderwriter.wordpress.com/2012/07/11/intellij-12-leda-eap/</link>
		<pubDate>Wed, 11 Jul 2012 21:47:42 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/07/11/intellij-12-leda-eap/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Un billet sur le Confluence d’IntelliJ IDEA a été publié aujourd’hui indiquant la mise à disposition de la prochaine version de l’IDE en <i>early access program</i>.<br /><br />A travers ce type d’accès, JetBrains veut susciter l’échange avec les utilisateurs d’IntelliJ afin d’avoir leurs avis et leurs propositions. Cette démarche vise à permettre aux développeurs d’avoir une influence sur le contenu de la (des) version(s) à venir...<br /><br />La version 12 EAP a été releasée le 4 juillet 2012. Le petit nom de cette nouvelle mouture est <i>Leda</i>.<br /><br />Son utilisation est limitée à 30 jours après la date de release.<br /><br />Les release notes de la v12 sont disponibles ici : <a href="http://confluence.jetbrains.net/display/IDEADEV/Leda+120.11+Release+Notes">http://confluence.jetbrains.net/display/IDEADEV/Leda+120.11+Release+Notes</a><br /><br />En lien dans ce post, le détail de l’ensemble des évolutions et correctifs à venir.<br /><br />Alors, n&#039;attendez pas, téléchargez la version EAP et influencez le futur d’IntelliJ ;)<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23release">#release</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23intellij">#intellij</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23ide">#ide</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>316</wp:post_id>
		<wp:post_date>2012-07-11 21:47:42</wp:post_date>
		<wp:post_date_gmt>2012-07-11 21:47:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>intellij-12-leda-eap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ide"><![CDATA[Ide]]></category>
		<category domain="post_tag" nicename="intellij"><![CDATA[Intellij]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[Release]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java au quotidien épisode 1 : Comparaison en chaîne</title>
		<link>https://thecoderwriter.wordpress.com/2012/07/09/java-au-quotidien-episode-1-comparaison-en-chaine/</link>
		<pubDate>Mon, 09 Jul 2012 23:04:49 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/07/09/java-au-quotidien-episode-1-comparaison-en-chaine/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Aujourd’hui je vais vous présenter une classe bien pratique permettant d’implémenter une méthode <b>equals</b> ou <b>compareTo</b> de manière élégante (enfin je trouve).<br /><br />Guava propose dans sa librairie une classe permettant de faire de chaîner des comparaisons de manière “fluent”.<br /><br />Généralement, on redéfinit la méthode <b>equals</b> d’une entité afin de pouvoir la rendre comparable.<br />Pour se faciliter la tâche, on peut avoir recours aux outils fournis pour nos IDEs pour générer rapidement le code nécessaire.<br />Voila ce que pourrait être le résultat pour la classe <b>MyEntity</b> : <br /><br />public class MyEntity {<br />    <br />    private Long id;<br />    private String name;<br />    private String lastname;<br />    private Date birthday;<br />    private String country;<br /><br />   @Override<br />    public boolean equals(Object o) {<br />        if (this == o) return true;<br />        if (o == null || getClass() != o.getClass()) return false;<br /><br />        MyEntity myEntity = (MyEntity) o;<br /><br />        if (birthday != null ? !birthday.equals(myEntity.birthday) : myEntity.birthday != null) return false;<br />        if (country != null ? !country.equals(myEntity.country) : myEntity.country != null) return false;<br />        if (id != null ? !id.equals(myEntity.id) : myEntity.id != null) return false;<br />        if (lastname != null ? !lastname.equals(myEntity.lastname) : myEntity.lastname != null) return false;<br />        if (name != null ? !name.equals(myEntity.name) : myEntity.name != null) return false;<br /><br />        return true;<br />    }<br /><br />On peut constater que le code devient assez verbeux et par conséquent pas très lisible. Bien évidemment la sémantique de la méthode equals() est simple, donc on comprend assez facilement le code.<br /><br /><i>En aparté : Si l’on envoie à Sonar cette classe dans l’état, celui-ci va râler en vous indiquant que ce n’est pas bien d’écrire des structures conditionnelles sans accolades (et je partage son point de vue ;) )</i><br /><br />Donc pour améliorer la lisibilité (et faire plaisir à Sonar), nous allons, à l’aide de la classe ComparisonChain, clarifier tout ça.<br /><br />Voila ce que donnerait l’implémentation : <br /><br />   @Override<br />    public boolean equals(Object o) {<br />        if (this == o) return true;<br />        if (o == null || getClass() != o.getClass()) return false;<br /><br />        MyEntity myEntity = (MyEntity) o;<br /><br />       return ComparisonChain.start().compare(birthday,myEntity.birthday)<br />                .compare(country, myEntity.country)<br />                .compare(id, myEntity.id)<br />                .compare(lastname,myEntity.lastname)<br />                .compare(name,myEntity.name).result() == 0;<br />      }<br /><br />Personnellement, je trouve la deuxième version plus claire et plus concise.<br /><br />La classe ComparisonChain propose un fonctionnement type <i>lazy</i>. C’est à dire que l’évaluation s’arrêtera à la première différence trouvée (même comportement que la première version).<br />Il faut noter que la classe <i>ComparisonChain</i> ne supporte pas les comparaisons sur les références nulles, néanmoins des champs représentant l’identité d’un objet ne devraient pas être null.<br /><br />En regardant la documentation, vous trouverez d’autres méthodes permettant d’affiner la comparaison.<br /><br />   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23guava">#guava</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23comparaison">#comparaison</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>317</wp:post_id>
		<wp:post_date>2012-07-09 23:04:49</wp:post_date>
		<wp:post_date_gmt>2012-07-09 23:04:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-au-quotidien-episode-1-comparaison-en-chaine</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="comparaison"><![CDATA[Comparaison]]></category>
		<category domain="post_tag" nicename="guava"><![CDATA[Guava]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Guava  13.0</title>
		<link>https://thecoderwriter.wordpress.com/2012/07/04/guava-13-0/</link>
		<pubDate>Wed, 04 Jul 2012 22:53:53 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/07/04/guava-13-0/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Il y a quelques semaines, nous parlions de la version 12...<br /><br />Le rythme des releases de l’API Guava est soutenu. Il y a peine 2 mois la version 12.0 pointait le bout de son nez. Le 26 juin dernier, la version 13 a été mise à disposition.<br /><br />Cette nouvelle version est disponible sur le repository Maven Central. Il suffit juste de mettre à jour le numéro de version.<br /><br />Vous avez la possibilité de voir au travers d’un rapport créé par JDiff, les différents changements opérés sur l’API (lien accessible via le pointeur en bas de la page)<br /><br />De manière synthétique, une ‘quick list’ des changements :<br /><br />18 fixes ont été livré dans cette version. Ils concernent principalement : <br />	- la correction de defect,<br />	- l’amélioration de performance,<br />	- Enrichissement de la Javadoc,<br />	- des améliorations de manière générale.<br /><br />3 méthodes ont été dépréciées : <br />	- Iterators.skip<br />	- les méthodes statiques de la classe Equivalence.<br />	- Files.getDigest() et ByteStreams.getDigest() ont été remplacés.<br /><br />Pas mal d’ajout de nouvelles méthodes sur l’API (voir le lien de l’article pour voir le détail)<br /><br />D’autres ont été promues via l’annotation @Beta.<br /><br />Quelques changements significatifs pourraient motiver certains pour mettre à jour leur pom.xml et vous tenter de passer à la version 13 ?<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23guava">#guava</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23guava13">#guava13</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23release">#release</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date>2012-07-04 22:53:53</wp:post_date>
		<wp:post_date_gmt>2012-07-04 22:53:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>guava-13-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guava"><![CDATA[Guava]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="release"><![CDATA[Release]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Groovy Web console</title>
		<link>https://thecoderwriter.wordpress.com/2012/07/02/groovy-web-console/</link>
		<pubDate>Mon, 02 Jul 2012 21:36:10 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/07/02/groovy-web-console/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><b>Connaissez-vous Groovy ?</b><br />Groovy est un langage de programmation pouvant tourner sur la JVM. Il est orienté objet.<br />Il est inspiré des langages comme Python, Ruby, Smalltalk. Il est spécifié par la <i>JSR242</i>.<br /><br />La syntaxe est très proche de celle de Java. <br />Groovy peut s’exécuter à la volée ou alors être pré-compilé en byteCode.<br /><br />L’objet de cet article n’est pas de vous présenter le langage Groovy, mais de vous faire part d’un outil mis à disposition sur le Cloud autour de ce langage.<br /><br />L’outil en question est la <b>Console web Groovy</b>.<br />Comme son nom l’indique, c’est une console accessible via un navigateur. Elle a pour objectif de pouvoir écrire des scripts, de les exécuter et d’obtenir le résultat directement sur le web.<br /><br />Le principal avantage que je vois avec cette console est de pouvoir s’initier au langage sans avoir les soucis de mise en place d’un environnement. <br />Une chose vraiment confortable est la colorisation syntaxique directement à la saisie du code dans la console.<br /><br />Pour bien démarrer et pouvoir profiter de nombreux exemples, il est possible d’avoir accès à l’ensemble des scripts déjà écrits sur la console. Par conséquent, il est aussi possible d’enregistrer ses propres scripts et de les partager.<br /><br />L’application supportant cet outil est hébergée sur un serveur Google App Engine. <br />Le code source de l’application est accessible depuis GitHub.<br /><br />Pour ceux qui n’ont jamais essayé ce langage : plus d’excuse maintenant :-)<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23console">#console</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23groovy">#groovy</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23web">#web</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>319</wp:post_id>
		<wp:post_date>2012-07-02 21:36:10</wp:post_date>
		<wp:post_date_gmt>2012-07-02 21:36:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>groovy-web-console</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="console"><![CDATA[Console]]></category>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java BarCamp version 8</title>
		<link>https://thecoderwriter.wordpress.com/2012/06/27/java-barcamp-version-8/</link>
		<pubDate>Wed, 27 Jun 2012 21:11:31 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/06/27/java-barcamp-version-8/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Qu’est ce qu’un Barcamp : <br /><i>Un BarCamp est une rencontre, une non-conférence ouverte qui prend la forme d&#039;ateliers-événements participatifs où le contenu est fourni par les participants qui doivent tous, à un titre ou à un autre, apporter quelque chose au Barcamp.</i><br /><br />Je pense que vous l’aurez compris en lisant cette petite définition tirée de l’article en lien, ce rendez-vous est l’occasion de passer un moment convivial, amical et surtout autour de Java et son écosystème.<br />Le rendez-vous est fixé le 5 juillet au jardin des tuileries à partir de 19h.<br />En plus de ses idées et de son regard sur le monde Java, il faut prévoir d’apporter une petite collation.<br /><br />60 places sont disponibles. vous trouverez en lien un tableau récapitulatif des personnes déjà inscrites et du nombre de places restantes ainsi que les centres d’intérêts de chacun (toujours autour de Java).<br /><br />Cet évènement est proposé et organisé par : <br />- <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/105175156939655748633">Katia Aresti</a></span><br />- <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/108637836287903721076">Mathilde Rigabert Lemée</a></span><br />- Julia Mateo<br /><br />Une liste de diffusion est aussi disponible pour se tenir au courant des dernières nouvelles.<br /><br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23barcamp">#barcamp</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23rendezvous">#rendezvous</a>  ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>320</wp:post_id>
		<wp:post_date>2012-06-27 21:11:31</wp:post_date>
		<wp:post_date_gmt>2012-06-27 21:11:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-barcamp-version-8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="barcamp"><![CDATA[Barcamp]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="rendezvous"><![CDATA[Rendezvous]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Domain-specific language en Java</title>
		<link>https://thecoderwriter.wordpress.com/2012/06/25/domain-specific-language-en-java/</link>
		<pubDate>Mon, 25 Jun 2012 22:36:31 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/06/25/domain-specific-language-en-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Avant d’essayer d’écrire un DSL (Domain-Specific Language), il faut bien  comprendre l’objectif de cette démarche.<br /><br /><b>Qu’est ce qu’un DSL ?</b><br /><br />Un DSL est un langage de programmation qui a pour objectif d’adresser un domaine (un problème ?) bien précis. Toute tentative de l’utiliser dans un contexte en dehors de celui pour lequel il a été créé sera vaine.<br /><br />Un DSL présente l’avantage de pouvoir rédiger du code de manière très expressive. De ce fait, son utilisation permet de transposer plus facilement le besoin exprimé par des fonctionnels en programme informatique. le travail est facilité pour les deux parties et de trouver un langage commun pour communiquer entre les deux mondes. <br />D’un point de vue plus général, il permet de rendre lisible et compréhensible une portion de code par des personnes non habituées à lire du code. <br /><br />Aujourd’hui, beaucoup de frameworks se basent sur ce type d’approche : <br />	- Fest-assert,<br />	- LambdaJ,<br />	- Guava,<br />	- Op4j<br />	- fluentLenium<br />	- etc<br /><br />L’article que je vous propose en lien aborde ce sujet sous l’angle du langage Java. <br />Les auteurs de cet article, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/110937808291147673063">Alex Ruiz</a></span> et <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/114894033740951782416">Jeff Bay</a></span>, traitent plus précisément de l’écriture d’un <b>DSL interne en Java</b>. <br /><br />Au travers de cet article, vous pourrez voir les différents points à comprendre et mettre en oeuvre pour créer un DSL basé sur le langage Java.<br />L’article a été écrit en 2008, ça date un peu, mais je pense que les concepts ainsi que l’approche à tenir évoqués sont toujours d’actualité et sont bon à connaître, même si nous n’avons pas forcément l’occasion d’avoir à écrire un DSL.<br /><br />Dans un premier temps, les auteurs expliquent ce qu’est concrètement un DSL interne, ainsi que les avantages et inconvénients qu’il faut avoir à l’esprit en choisissant de l’écrire en Java.<br /><br />Ensuite, vous pourrez trouver un exemple mettant en évidence l’avantage que présente l’utilisation d’un DSL. Le cas d’utilisation présenté est celui de l’écriture d’une requête SQL.<br /><br />La troisième partie donne les ingrédients indispensables pour la création d’un DSL. Les éléments principaux qui compose un DSL sont : <br />- Une interface fluent,<br />- Le chainage de méthode<br /><br />Ce paragraphe nous explique que les deux points identifiés ci-dessus ne sont pas suffisants pour qualifier à 100% que notre langage est un DSL. <br />Un exemple basé sur la StringBuilder (que l’on pourrait assimiler à une approche DSL) nous le démontre. En effet, cette classe, au travers de méthodes <b>append()</b> , propose le chaînage de méthode. En revanche, cette classe n’adresse aucun domaine spécifique.<br /><br />Un point central (aussi) est l’utilisation de méthodes de factories statiques (import static). Ce dernier point permet, entre autres, de rendre le bloc de code plus lisible.<br /><br />L’article nous expliquera en détail comment implémenter correctement le chaînage de méthodes ainsi que la mise en place de méthodes factories statiques.<br /><br />Les deux derniers paragraphes sont consacrés à comment organiser le code du DSL et comment le documenter.<br /><br />Dans la conclusion, les deux auteurs nous donnent leurs points de vue sur les DSLs écrits en Java. Ils expliquent que l’utilisation de Java pour écrire un DSL est un choix que l’on peut faire en fonction du contexte cible. Il faut mettre en balance les avantages et inconvénients que présente la solution.<br /><br />Personnellement, je trouve cet article très intéressant sur le sujet abordé, les concepts donnés et les explications fournies sur la mécanique interne d’un DSL.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23DSL">#DSL</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23concept">#concept</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date>2012-06-25 22:36:31</wp:post_date>
		<wp:post_date_gmt>2012-06-25 22:36:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>domain-specific-language-en-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="concept"><![CDATA[Concept]]></category>
		<category domain="post_tag" nicename="dsl"><![CDATA[DSL]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>iBATIS - MyBatis</title>
		<link>https://thecoderwriter.wordpress.com/2012/06/20/ibatis-mybatis/</link>
		<pubDate>Wed, 20 Jun 2012 23:20:13 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/06/20/ibatis-mybatis/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />La gestion de la persistance dans une application se fait dans la plupart des cas par l’intermédiaire d’un framework de persistance type Hibernate, EclipseLink, etc.<br />Ils  font partie de la famille des ORMs. <br /><br />Ces outils apportent un certain confort et permettent de s’abstraire quasiment de la manipulation du SQL.<br />C’est très pratique et confortable ; en revanche ils peuvent présenter un inconvénient en terme de complexité d’utilisation.<br />En effet, dans certains cas, le mapping objet-relationnel peut être difficile à formaliser, ce qui oblige à écrire une requête en SQL natif (ou alors tordre l’outil)<br /><br />Aujourd’hui (et depuis un moment déjà), il existe une alternative aux frameworks évoqués. Elle se situe entre le pur JDBC et l’ORM très sophistiqué.<br />L’alternative en question se nomme iBatis (ou MyBatis, depuis les versions récentes).<br /><br />L’article en lien à ce post, fait une présentation de l’outil en question. L’auteur décrit les principes sur lesquels se base le framework.<br /><br />Ensuite, il décrit la manière de déclarer le mapping entre les objets et la table. Dans ce paragraphe, on pourra voir les positifs et négatifs de l’outil (du point de vue de l’auteur)<br /><br /><b>Note :</b> Il est important de noter que contrairement à un framework type <i>Hibernate</i>, iBatis n’a aucune connaissance directe de la structure des tables.<br /><br />Pour résumer rapidement, le mapping se fait entre le résultat d’une requête SQL et les attributs d’un POJO. Ce maping est fait de manière déclarative dans un fichier XML ou par annotation. Il y a aussi la possibilité de faire un mapping dynamique en se basant sur le nom des attributs.<br /><br />Cela veut dire, implicitement, que la construction des requêtes est faite en SQL standard, et ensuite vient la déclaration du mapping. A aucun moment, iBatis gérera la construction d’une requête. Vous pourrez voir des exemples dans l’article.<br /><br />Dans le paragraphe suivant, il évoque la notion de <i>sessionFactory</i> pour ce qui est de la gestion du contexte de persistance. <br /><br /><b>Note :</b> MyBatis s’intègre avec Spring.<br /><br />A l’instar du mapping dynamique, il est possible d’avoir des requêtes dynamiques qui, par rapport à un contexte &#039;données&#039;, vont pouvoir conditionner le contenu de la clause WHERE.<br /><br />Comme tous outils de persistance de type ORM, on a à disposition un outil permettant d’optimiser le temps passé pour faire le mapping initial. C’est ce que nous présente l’auteur dans la paragraphe : <b>MyBatis Generator</b>.<br /><br />Cet outil présente des avantages et des inconvénients. Je pense que cet outil peut adresser des projets ayant une taille modérée.<br />Il a le mérite d’avoir une approche très pragmatique vis à vis de la gestion du mapping.<br /><br />C&#039;est un outil que l’on n&#039;utilisera pas forcément tous jours. Mais je pense qu’il est important de connaitre son existence et de bien comprendre ses mécanismes. A lire donc et à ajouter aux favoris :)<br /><br />#java  #myBatis   #iBatis   #orm   #basededonnées   ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date>2012-06-20 23:20:13</wp:post_date>
		<wp:post_date_gmt>2012-06-20 23:20:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ibatis-mybatis</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="basededonn"><![CDATA[Basededonn]]></category>
		<category domain="post_tag" nicename="ibatis"><![CDATA[IBatis]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="mybatis"><![CDATA[MyBatis]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[Orm]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Clean Code : The Boy Scout Rule</title>
		<link>https://thecoderwriter.wordpress.com/2012/06/18/clean-code-the-boy-scout-rule/</link>
		<pubDate>Mon, 18 Jun 2012 22:26:51 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/06/18/clean-code-the-boy-scout-rule/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Je vous propose de (re)parler d’un sujet périphérique au thème central de cette page, mais qui reste une préoccupation importante de tout bon développeur qui se respecte.<br />Pour autant, les exemples sont en Java, ainsi que les outils utilisés :)<br /><br />En effet, l’article que je vous propose aujourd’hui traite du sujet : coder proprement.<br /><br />Le thème principal de l’article se base sur un principe qui avait été écrit par  _Robert Stephenson Smyth Baden-Powell_, le fondateur du Scoutisme :<br /><br />    <i>Try and leave this world a little better than you found it</i><br />    <i>Essayez de laisser ce monde un peu meilleur que vous l&#039;avez trouvé</i><br /><br />Vous me direz, mais quel rapport avec le monde du développement ?<br />En fait, <i>Robert C. Martin</i> a repris le concept de cette phrase en l’adaptant à notre univers de développeur. <i>The boy scout Rule</i> est une application du principe d’amélioration continue au niveau du code.<br />En livrant un code dans un état plus propre que celui où nous l’avons trouvé, alors le code ne risque pas de se détériorer, voire de s’améliorer.<br /><br />L’article que je vous propose en lien décrit la mise en application du principe énoncé ci-dessus.<br /><br />La forme de l’article est original. Il décrit l’échange de deux développeurs en train de travailler sur un bug en binôme.<br />L’objectif final est de corriger ce fameux bug. Les deux codeurs tenteront de mettre en œuvre les règles du Boy scout.<br /><br />L’auteur, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/101474593174586065614">Mathieu Gandin</a></span>, à travers ce dialogue, nous montre les différentes étapes réalisées pour :<br />    - corriger le bug,<br />    - améliorer la lisibilité du code,<br />    - augmenter la couverture de code testé<br /><br />Aussi, ce <i>coding live sur papier</i> est l’occasion de montrer certains tips comme l’utilisation d’un framework de mock.<br /><br />La forme originale et le sujet traité de cet article en font une lecture très intéressante et enrichissante. A lire et à conserver dans ses favoris !<br />   <br />#java  #clean   #mock   #scout   #rule﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>323</wp:post_id>
		<wp:post_date>2012-06-18 22:26:51</wp:post_date>
		<wp:post_date_gmt>2012-06-18 22:26:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clean-code-the-boy-scout-rule</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="clean"><![CDATA[Clean]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="mock"><![CDATA[Mock]]></category>
		<category domain="post_tag" nicename="rule"><![CDATA[Rule]]></category>
		<category domain="post_tag" nicename="scout"><![CDATA[Scout]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Thread dump java : le casse-tête...</title>
		<link>https://thecoderwriter.wordpress.com/2012/06/14/thread-dump-java-le-casse-tete/</link>
		<pubDate>Thu, 14 Jun 2012 00:17:25 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/06/14/thread-dump-java-le-casse-tete/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Il existe plusieurs manières pour identifier des problèmes survenant dans la JVM. Une des voies que l’on peut exploiter consiste à générer une photo des threads de la JVM à un instant t.<br /><br />En règle générale, cette piste n’est pas souvent exploitée pour la simple raison que la lecture et l’analyse de cette image n’est pas toujours triviale.<br /><br />L’article mis en lien fournit les clefs permettant d’appréhender les informations pertinentes contenues dans ce fichier.<br /><br />Dans un premier temps, l’auteur va rappeler différents points sur Java et les threads. Ensuite, il abordera les différents attributs caractérisant les threads en Java : <br />	- La synchronisation,<br />	- les états d’un thread,<br />	- les types de thread.<br /><br />Après avoir fait ces rappels, il nous explique les différents moyens d’obtenir un dump d&#039;un thread : <br />	<br />- Utilisation de JStack<br />- Utilisation de JVisualVM<br />- A partir d’un terminal Linux.<br /><br />La dernière partie de l’article est consacrée au décryptage des informations contenues dans le dump.<br /><br />Tout d’abord, il décrit les attributs clefs du fichier : <br />	- Thread name,<br />	- priority,<br />	- thread Id,<br />	- thread status,<br />- thread callStack.<br /><br />Ensuite, l’auteur présente les différents patterns identifiables par rapport à l’état et au status des threads.<br /><br />On trouvera ensuite les solutions que l’on peut appliquer face à certaines situations :<br />	- Lorsque l’usage du CPU est anormalement élevé<br />	- Lorsque les performances sont anormalement lentes<br /><br />	ainsi que des conseils par rapport à la façon de coder afin d’améliorer la compréhension du dump.<br /><br />Un article intéressant à lire et à comprendre pour pouvoir appliquer ces techniques dans la vraie vie :)<br /><br />#java  #thread   #dump   #decryptage﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>324</wp:post_id>
		<wp:post_date>2012-06-14 00:17:25</wp:post_date>
		<wp:post_date_gmt>2012-06-14 00:17:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>thread-dump-java-le-casse-tete</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="decryptage"><![CDATA[Decryptage]]></category>
		<category domain="post_tag" nicename="dump"><![CDATA[Dump]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="thread"><![CDATA[Thread]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>LambdaJ</title>
		<link>https://thecoderwriter.wordpress.com/2012/06/08/lambdaj/</link>
		<pubDate>Fri, 08 Jun 2012 00:11:40 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/06/08/lambdaj/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Dans un post précédent, je vous avais parlé des différentes façons de manipuler les collections.<br />Suite à cet article, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/108315426466249531013">Ronan Michaux</a></span>  a indiqué un pointeur vers une librairie proposant des fonctionnalités vraiment intéressantes pour la manipulation de collections et plus encore.<br /><br /><b>Un peu d’histoire..</b><br />Ce projet a été initié par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/117296231668718612822">Mario Fusco</a></span>  en 2009. L’idée originelle du projet est d’augmenter la lisibilité du code et d’éliminer les codes répétitifs que l’on retrouve dans chaque boucle que l’on a à écrire.<br />Au départ, le créateur du projet a commencé par écrire des méthodes utilitaires et un petit DSL afin de rendre le code plus lisible et plus pratique à utiliser.<br />Les membres de l’équipe dans laquelle travaille Mario adhèrent immédiatement au projet et commence à l’utiliser quotidiennement.<br />Face à ce succès, il décide de refactorer ses composants et de les intégrer dans une API indépendante.<br />La dernière étape de cette <i>mutation</i> a été de choisir le nom de la librairie :-)<br /><br /><b>Les fonctionnalités</b><br /><br />LambdaJ permet, sur une collection, de : <br /><br />- Filtrer les éléments d’une collection, <br />- Définir statiquement les propriétés d’un objet,<br />- Agréger les items d’une collection ou les valeurs des items,<br />- Joindre des chaînes de caractères,<br />- Transformer, indexer et trier les items d’une collection,<br />- Effectuer des regroupements d’items,<br />- Effectuer du mapping d’objet à objet.<br /><br />Lorsqu’il s’agit de définir des conditions, typiquement pour la première fonctionnalité citée, LambdaJ se base sur <b>Hamcrest</b>, le framework utilisé principalement dans le cadre de tests unitaires sur la base d’un DSL.<br /><br />L’ensemble de ces fonctionnalités, comme nous l’évoquions en introduction, vient remplacer les bonnes vieilles boucles itératives (for, while, do).<br /><br />La syntaxe se base sur un DSL qui permet de rendre le code produit très clair et très expressif. Je vous laisse voir les exemples en suivant le pointeur suivant : <a href="http://code.google.com/p/lambdaj/wiki/LambdajFeatures">http://code.google.com/p/lambdaj/wiki/LambdajFeatures</a><br />Comme la syntaxe, les exemples proposés sont très clairs.<br /><br /><b>Les closures</b><br /><br />Le projet propose également une implémentation des Closures. Les closures donnent la possibilité de rendre du code générique pour 95% et de spécialiser les 5% qui restent en respectant le pattern ouvert/fermé.<br /><br />Les closures proposent un certain nombre de méthodes permettant de gérer facilement le nombre de paramètres que l’on pourra transmettre à la closure.<br />Aussi, dans le cadre d’une closure définissant un nombre de paramètres fini, il est possible de fixer la valeur de certains de ces paramètres.<br /><br />Il est possible  de <i>caster</i> des closures dans certaines interfaces afin de pouvoir les manipuler au travers de ces interfaces.<br />La liste des possibilités concernant les closures n’est pas exhaustive, je vous invite à vous référer à la documentation pour approfondir le sujet.<br /><br /><b>Étendre la librairie</b><br /><br />LambdaJ offre plusieurs interfaces afin de pouvoir introduire les problématiques métier de chacun.<br /><br />Par exemple :<br />- personnaliser la conversion d’objet en implémentant l’interface Converter<br />- enrichir un filtre en étendant la classe LambdaJMatcher<br /><br /><b>Les performances</b><br /><br />Sur le site du projet, on peut trouver un benchmark permettant de mettre en évidence le gain apporté par LambdaJ par rapport à l’utilisation classique des boucles.<br /><br /><br /><b>En conclusion</b><br /><br />Je trouve que par rapport à Guava, la syntaxe proposée ainsi que les fonctionnalités dans LambdaJ sont un cran au-dessus.<br /><br />Cette librairie est en avance sur son temps, si l’on considère les fonctionnalités proposées dès sa création. En effet, depuis un certain temps maintenant, l’idée d’avoir les lambda expressions natives dans Java est évoquée dans les futurs versions du JDK. Aujourd’hui, nous ne l’’avons pas encore dans le langage ; il faudra attendre la sortie de la version 8 du JDK pour cela.<br /><br />En attendant, cette librairie permet d’adresser largement les possibilités  de manipulation des collections et des closures. <br />Le projet a encore de beaux jours devant lui avant que la version 8 du jdk ne sorte et que celle-ci soit intégrée dans les entreprises.<br /><br />De mon coté, j’ai ajouté la dépendance sur le projet sur lequel je travaille :-)<br /><br />#java  #lambdaj   #collection   #closure   #manipulation   #data﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>325</wp:post_id>
		<wp:post_date>2012-06-08 00:11:40</wp:post_date>
		<wp:post_date_gmt>2012-06-08 00:11:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lambdaj</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="closure"><![CDATA[Closure]]></category>
		<category domain="post_tag" nicename="collection"><![CDATA[Collection]]></category>
		<category domain="post_tag" nicename="data"><![CDATA[Data]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="lambdaj"><![CDATA[Lambdaj]]></category>
		<category domain="post_tag" nicename="manipulation"><![CDATA[Manipulation]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google IO Extended</title>
		<link>https://thecoderwriter.wordpress.com/2012/06/05/google-io-extended/</link>
		<pubDate>Tue, 05 Jun 2012 22:28:24 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/06/05/google-io-extended/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Cette année, la conférence Google IO se tiendra du 27 au 28 juin. Google IO a lieu aux États-Unis, plus précisément à San Francisco. Ce rendez-vous annuel est l’occasion de faire un tour d’horizon de toutes les nouveautés autour de l’écosystème technologique de Google.<br />De par la distance, la participation à l’évènement peut être compliquée.<br /><br />C’est pour cette raison (entre autres) que le GTUG Nantes organise &quot;Google IO Extended&quot;.<br />L’évènement se déroule autour de la retransmission en direct des différentes sessions de la conférence originale. La participation est entièrement gratuite.<br /><br />Cela se passera sur 2 jours, les 27 et 28 juin à partir de 18h. Le programme des deux soirées est le suivant : <br /><br />Mercredi 27 juin <br /><br />- Validation des inscriptions<br /> - KeyNote Jour 1<br /> - Interview Q/R avec Google<br /> - BarCamp<br /> - Retransmission Live des sessions<br /><br />Jeudi 28 juin <br /><br />- Validation des inscriptions<br /> - BarCamp<br /> - Retransmission Live des sessions<br /><br />Lors de la première soirée, un espace démo sera ouvert afin que les participants puissent présenter leurs travaux réalisés autour des technologies Google.<br /><br />Au delà du fait de suivre en direct la conférence se déroulant aux États-Unis, ce sera aussi l’occasion de partager un moment d’échange et de convivialité autour d’un verre. Aussi, d&#039;éventuelles sessions de CodeLab et Hackathon pourront être organisées.<br /><br />Le programme des retransmissions est disponible en suivant le lien joint au post. Il est important de souligner que l’ensemble des conférences retransmises sont en anglais.<br /><br />Aussi, en allant directement sur le site de Google IO, vous trouverez un jeu/animation. Cette réalisation est très réussie et donne un avant goût de la teneur de la conférence de San Francisco.<br /><br />#java  #android   #googleio   #conférence﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>326</wp:post_id>
		<wp:post_date>2012-06-05 22:28:24</wp:post_date>
		<wp:post_date_gmt>2012-06-05 22:28:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-io-extended</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="conf"><![CDATA[Conf]]></category>
		<category domain="post_tag" nicename="googleio"><![CDATA[Googleio]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Spring for Android 1.0.0 Released</title>
		<link>https://thecoderwriter.wordpress.com/2012/06/01/spring-for-android-1-0-0-released/</link>
		<pubDate>Fri, 01 Jun 2012 23:58:51 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/06/01/spring-for-android-1-0-0-released/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le 30 mai 2012, SpringSource a annoncé la sortie de la première release du projet Spring pour Android.<br />L’objectif de ce module est de permettre l’usage du framework Spring au sein d’un environnement Android.<br /><br />Les fonctionnalités actuellement proposées sont : <br />	- un client REST pour android<br />- Le support de OAuth<br /><br />4 milestones et une release candidate ont été nécessaires pour sortir la première release.<br /><br />les archives nécessaires pour intégrer ce module dans votre application Android sont disponibles sur les repositories Maven.<br /><br />Cette annonce peut adresser deux types de profil : <br />	- les inconditionnels de Spring, souhaitant faire une application Android<br />	- Les experts Android qui souhaiteraient se mettre à Spring<br /><br /><i>(choisissez votre profil :) )</i><br /><br />La documentation est assez complète.<br /><br />#java  #android   #mobile   #spring﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>327</wp:post_id>
		<wp:post_date>2012-06-01 23:58:51</wp:post_date>
		<wp:post_date_gmt>2012-06-01 23:58:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>spring-for-android-1-0-0-released</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="mobile"><![CDATA[Mobile]]></category>
		<category domain="post_tag" nicename="spring"><![CDATA[Spring]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bonne Année !</title>
		<link>https://thecoderwriter.wordpress.com/2013/01/01/bonne-annee/</link>
		<pubDate>Tue, 01 Jan 2013 15:34:14 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/01/01/bonne-annee/</guid>
		<description></description>
		<content:encoded><![CDATA[  &amp; <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/111274180246973214570">Fabien Baligand</a></span> <br /><br /><br />Il y a 1 an jour pour jour, la page <b>Java - ʕ๏̮๏ʔ</b> s&#039;ouvrait et  nous postions le premier article.<br />Nous voulions profiter de cet anniversaire pour vous faire un petit bilan chiffré :<br /><br />- <b>188</b> articles ont été postés sur la page,<br />- <b>859</b> partages ont été effectués,<br />- <b>1319</b> +1 ont été donnés sur la page.<br /><br />Le temps fort de la page a été principalement la conférence Devoxx France 2012 avec 14 articles publiés.<br /><br />732 personnes suivent régulièrement la page, au travers de leurs cercles Google+.<br /><br />L&#039;article qui a eu le plus de succès avec <b>118</b> +1, <b>85</b> partages et <b>42</b> commentaires est :<br /><i>Connaissez-vous l’astuce des doubles accolades dans le langage java ?</i><br /><br />En parallèle, la communauté Java FR a vu le jour.<br /><br />L&#039;année 2012 aura été très intense et enrichissante. Nous repartons plus motivés que jamais pour continuer à vous faire partager notre passion pour Java et son écosystème.<br /><br /><br />Après cette <i>&quot;bonne année&quot;</i>, nous vous souhaitons une bonne et heureuse année 2013 !<br /><br />@Très bientôt﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>288</wp:post_id>
		<wp:post_date>2013-01-01 15:34:14</wp:post_date>
		<wp:post_date_gmt>2013-01-01 15:34:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bonne-annee</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java puzzle</title>
		<link>https://thecoderwriter.wordpress.com/2012/12/26/java-puzzle/</link>
		<pubDate>Wed, 26 Dec 2012 21:46:07 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/12/26/java-puzzle/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Ce soir je vous propose de jouer avec un java puzzle de mon cru. C’est le premier que j’écris.<br />Je l’ai mis sur un gist, vous trouverez le lien attaché à ce post.<br /><br />Voici les réponses possibles : <br /><br />1 - Martin Louis ,Michel Martin  sont majeurs<br />2 - Une exception est levée<br />3 - Jean Jacques ,Cover Harry  sont majeurs<br /><br />Avez-vous une idée ?<br /><br />Le projet est disponible ici, si vous souhaitez l’exécuter : <a href="https://github.com/Fabszn/javaPuzzle">https://github.com/Fabszn/javaPuzzle</a><br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23puzzle">#puzzle</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23jeu">#jeu</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date>2012-12-26 21:46:07</wp:post_date>
		<wp:post_date_gmt>2012-12-26 21:46:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-puzzle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jeu"><![CDATA[Jeu]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_079b44d5837f7ed51c0e27d164538ccf</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JCP &#038; JSR</title>
		<link>https://thecoderwriter.wordpress.com/2012/12/19/jcp-jsr/</link>
		<pubDate>Wed, 19 Dec 2012 22:44:13 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/12/19/jcp-jsr/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Voici un article qui a pour but d’expliquer ce que sont le JCP et une JSR. Même si cela peut paraître évident à certains avec leur 10 années d’expériences dans le monde Javaiste... Pour d’autres, ça peut être un moyen de mieux comprendre les rouages de la prise de décision sur certains sujets au sein de la communauté.<br /><br />Brièvement, en guise d’introduction, voici quelques éléments clefs : <br /><br />JSR, pour Java Specification Request, décrit un mécanisme permettant de définir une fonctionnalité. La JSR a été introduite par le Java Community Process (JCP).<br /><br />Pour la suite, je vous laisse lire l’article joint à ce post... :)<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23JCP">#JCP</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23JSR">#JSR</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>290</wp:post_id>
		<wp:post_date>2012-12-19 22:44:13</wp:post_date>
		<wp:post_date_gmt>2012-12-19 22:44:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jcp-jsr</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jcp"><![CDATA[JCP]]></category>
		<category domain="post_tag" nicename="jsr"><![CDATA[JSR]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vert.x &#038; MongoDB</title>
		<link>https://thecoderwriter.wordpress.com/2012/12/12/vert-x-mongodb/</link>
		<pubDate>Wed, 12 Dec 2012 22:42:46 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/12/12/vert-x-mongodb/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Dans un post précédent, je vous avais parlé de Vert.x. Un projet assez récent qui est en constante évolution (cf. la liste de diffusion du projet).<br />L’article en lien explique comment Vert.x peut s’interfacer avec la base NoSQL <b>MongoDB</b>.<br /><br /><b>Qu’est ce qu’un module dans Vert.x</b>: <br />Le projet Vert.x donne la possibilité d’utiliser des modules. Ces modules peuvent être comparés à des ‘plugins’ qui viennent enrichir le noyau avec de nouvelles fonctionnalités.<br />Ces modules sont complètement isolés (en terme de classloading) par rapport au <i>verticle</i> principal. La communication entre le module et le verticle se fait via l’EventBus fourni par Vert.x. <br /><br />*Voici une brève introduction au fonctionnement de ce module *:<br />Il permet d’interagir avec une base MongoDB et d’effectuer l’ensemble des opérations possibles sur la base.<br /><br />Pour effectuer une opération, il faut passer, via l’EventBus, un message au format JSON. <br />Le flux JSON comporte un ensemble de paramètres décrivant l’opération à réaliser.<br /><br />Le résultat est retourné également au format JSON. <br />L’ensemble des appels se fait en mode asynchrone.<br /><br />Vous trouverez plus de détails techniques dans l’article en lien dans ce post.<br />La mise en œuvre est assez simple, ce qui vous permettra de mettre en pratique l’exemple proposé.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23vertx">#vertx</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23mongodb">#mongodb</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23module">#module</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date>2012-12-12 22:42:46</wp:post_date>
		<wp:post_date_gmt>2012-12-12 22:42:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vert-x-mongodb</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="module"><![CDATA[Module]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[MongoDB]]></category>
		<category domain="post_tag" nicename="vertx"><![CDATA[Vertx]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Quel étage? - 42ième!</title>
		<link>https://thecoderwriter.wordpress.com/2012/12/10/quel-etage-42ieme/</link>
		<pubDate>Mon, 10 Dec 2012 22:45:49 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/12/10/quel-etage-42ieme/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Tout ressemblance avec une société connue ne serait que purement fortuite! :)<br /><br />Ceci étant dit, je vous recommande de vous plonger dans ce nouvel opus de cette <i>serious web série</i> sur l’univers des SSII.<br />On y retrouve tous les personnages lancés dans une enquête dont le point de départ est la disparition du gentil consultant Clément Jérémy.<br /><br />Le premier épisode est disponible depuis ce matin, le deuxième à partir du 12 décembre.<br />Bon visionnage!<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> #42  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23web">#web</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23serie">#serie</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23sfeir">#sfeir</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>292</wp:post_id>
		<wp:post_date>2012-12-10 22:45:49</wp:post_date>
		<wp:post_date_gmt>2012-12-10 22:45:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>quel-etage-42ieme</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="serie"><![CDATA[Serie]]></category>
		<category domain="post_tag" nicename="sfeir"><![CDATA[Sfeir]]></category>
		<category domain="post_tag" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Android Bootstrap</title>
		<link>https://thecoderwriter.wordpress.com/2012/12/03/android-bootstrap/</link>
		<pubDate>Mon, 03 Dec 2012 22:56:28 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/12/03/android-bootstrap/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />On connaissait Twitter Bootstrap, le bootstrap de Tomcat, jQuery UI Bootstrap, il y a même le nom de domaine <a href="http://bootstrap.com">bootstrap.com</a> (d’ailleurs je ne sais pas encore à quoi il sert :P).<br />Maintenant Android a aussi son kit de démarrage. Il permet d’obtenir les bases et la configuration d’une application android.<br /><br />Il suffit de renseigner le nom de l’application ainsi que le nom du package racine, faire un clic sur le bouton et le site vous propose de télécharger la base d’une application packagée prête à l’emploi ; il ne reste plus qu’à développer.<br /><br />Sur le site en lien dans ce post, vous trouverez l’ensemble des outils et frameworks embarqués dans le packaging de l’application.<br /><br />A tester !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23android">#android</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23bootstrap">#bootstrap</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>293</wp:post_id>
		<wp:post_date>2012-12-03 22:56:28</wp:post_date>
		<wp:post_date_gmt>2012-12-03 22:56:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>android-bootstrap</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="bootstrap"><![CDATA[Bootstrap]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vert.x 2.0</title>
		<link>https://thecoderwriter.wordpress.com/2012/11/21/vert-x-2-0/</link>
		<pubDate>Wed, 21 Nov 2012 23:10:33 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/11/21/vert-x-2-0/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />J’avais parlé dans un article précédent du framework <b>Vert.x</b>. <br />Je reviens avec ce sujet pour vous donner des nouvelles du projet.<br /><br />La version 1.3 est sortie le 24 octobre dernier, incluant 37 points (corrections, updates de version, etc). La liste exhaustive sur ce pointeur : <a href="https://github.com/vert-x/vert.x/issues?milestone=21&amp;state=closed">https://github.com/vert-x/vert.x/issues?milestone=21&amp;state=closed</a><br /><br />La mailing-list est très active sur le projet. Dernièrement, le développeur principal a annoncé que la réflexion pour la prochaine version majeure 2.0 avait commencé.<br /><br />Un message a été posté contenant une liste d’idées sur le contenu de la prochaine release. Cette annonce a généré beaucoup de réactions et d’idées sur le google group du projet. <br /><br />Les points envisagés sont les suivants : <br /><br />- Le refactoring du classloader<br />- Meilleure intégration dans les IDEs<br />- Monitoring et management<br />- Introduction du multi-threading dans les verticles de type worker<br />- Elimination des callbacks <i>spaghettis</i><br />- Séparation des différents langages en modules<br />- Support de Scala et Clojure<br />- Diverses évolutions (mise à jour de la version de Netty et de SockJS, etc)<br /><br /><br />Une affaire à suivre... <br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23vertx">#vertx</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23v2">#v2</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>294</wp:post_id>
		<wp:post_date>2012-11-21 23:10:33</wp:post_date>
		<wp:post_date_gmt>2012-11-21 23:10:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vert-x-2-0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="v"><![CDATA[V]]></category>
		<category domain="post_tag" nicename="vertx"><![CDATA[Vertx]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java au quotidien épisode 4 : Java toutes options</title>
		<link>https://thecoderwriter.wordpress.com/2012/11/19/java-au-quotidien-episode-4-java-toutes-options/</link>
		<pubDate>Mon, 19 Nov 2012 23:32:54 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/11/19/java-au-quotidien-episode-4-java-toutes-options/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Il est très courant de trouver dans le code de nos applications les lignes suivantes : <br /><br />if (maVariable == null) {}<br /><br />ou alors : <br />if (maVariable !=null) {}<br /><br />ou encore : <br />if (maMethode() == null){}<br /><br />ou bien : <br />…<br />return null;<br />}<br /><br />Je suis sur que vous l’aurez constaté, l’ensemble de ces portions de code ont un point commun : la référence <i>null</i>.<br />Si l’on comprend bien techniquement ce que l’on est en train de faire, fonctionnellement des fois on peut se poser la question.<br /><br />Dans chacun des cas, on vérifie si l’objet que l’on va manipuler ne contient pas une référence nulle, ceci afin d’éviter la célèbre <i>NullPointerException</i>.<br /><br />Le fait de se retrouver avec un objet qui contient une référence nulle peut être souhaité, c’est à dire que le fait d’affecter <b>null</b> à une instance indique qu’une référence attendue n’a pas été trouvée (par exemple). <br />Dans ce cas là, on indique dans la javadoc de la méthode que ce comportement est possible et qu’il faut faire attention. Implicitement, cela veut dire que l’objet retourné par la méthode est <b>optionnel</b>.<br /><br />Personnellement, je n’aime pas beaucoup écrire ce type de code je ne trouve pas ça très expressif et très joli.<br /><br />Pour adresser ce problème, l’API <i>Guava</i> a introduit un type nommé <b>Optional</b> (depuis la version 10 de l’API)<br /><br />L’idée de ce nouveau type est d’encapsuler la référence afin de transformer la question : <br /><br /><i>Est ce que la référence est null ?</i><br /><br />par <br /><br /><i>Est ce que la référence est présente ou absente ?</i><br /><br />Au premier abord, on peut dire que la question a le même sens, dit de deux façons différentes.<br /><br />La vraie différence se trouve dans le code. Je vais essayer de vous faire un tour d’horizon.<br /><br />Comme je vous le disais plus tôt, l’objectif du type Optional est de contenir une référence typée. La classe Optional est paramétrée.<br /><br />Pour mieux comprendre son fonctionnement, rien de mieux qu’un petit exemple, soit la méthode suivante écrite de manière traditionnelle : <br /><br />public String getPersonName(final Person person){<br />	if(person != null){<br />		return person.getName();<br />	}<br />	return null;<br />}<br /><br />…<br /><br />final Person person = new Person(“Fabrice”);<br /><br />String name = getPersonName(person);<br /><br />if(name != null) {<br />System.out.println(“nom de la personne “ + name);<br />}else {<br />System.out.println(“nom de la personne : inconnu”);<br />}<br /><br />Voila comment elle pourrait être refactorée à l’aide de la classe Optional&lt;T&gt; : <br /><br />public Optional&lt;String&gt; getPersonName(final Person person){<br />	if(person != null){<br />		return Optional.fromNullable(person.getName());<br />	}<br />	return Optional.absent();<br />}<br /><br />…<br /><br />final Person person = new Person(“Fabrice”);<br /><br />System.out.println(“nom de la person “ + getPersonName(person).or(“inconnu”));<br /><br />L’exemple présenté ci-dessus est un peu naif mais sans forcément connaitre l’API de cette classe, on peut voir tout de suite l’intérêt du type Optional.<br /><br />Il existe 3 façons de créer une instance d’Optional :<br />	- <b>Optional.fromNullable()</b> : création à partir d’une référence potentiellement nulle. Cette instance répondra aux méthodes : isPresent() ou isAbsent()<br />	- <b>Optional.absent()</b> : création d’un optional contenant une référence nulle<br />	- <b>Optional.of()</b> : création à partir d’une référence qui <b>ne peut pas</b> être nulle.<br /><br />Plusieurs méthodes sont disponibles pour interagir avec un Optional : <br /><br />	- <b>Optional.or()</b> : permet, en cas de référence absente, de fournir une valeur par défaut.<br />	- <b>Optional.get()</b> : permet d’obtenir concrètement la référence.<br />	- <b>Optional.orNull()</b> : permet de récupérer une référence null si la référence encapsulée est absente.<br />	- <b>Optional.isPresent()</b> : remplace le traditionnel : if(maVariable != null){..}<br /><br />En utilisant Optional, on peut fournir un code plus ‘self’ expressif, plus maitrisé et sûr. En suivant le lien de l’article, vous pourrez découvrir l’ensemble des possibilités offertes par cette classe.<br /><br /><i>Aussi, il me semble qu’un type équivalent serait disponible dans la prochaine version du JDK. Malheureusement, je n’ai pas retrouvé le lien permettant d’appuyer ce propos.</i><br /><br />A partir de maintenant, toutes les options sont permises ;-)<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23guava">#guava</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23optional">#optional</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23null">#null</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>295</wp:post_id>
		<wp:post_date>2012-11-19 23:32:54</wp:post_date>
		<wp:post_date_gmt>2012-11-19 23:32:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-au-quotidien-episode-4-java-toutes-options</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guava"><![CDATA[Guava]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="null"><![CDATA[Null]]></category>
		<category domain="post_tag" nicename="optional"><![CDATA[Optional]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSON.simple</title>
		<link>https://thecoderwriter.wordpress.com/2012/11/14/json-simple/</link>
		<pubDate>Wed, 14 Nov 2012 21:36:54 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/11/14/json-simple/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />JSON.simple est un outil permettant de transformer des objets java au format JSON et inversement.<br />Cet outil porte bien son nom par rapport à la simplicité de mise en oeuvre. <br />La première version est sortie en janvier 2009. Aujourd’hui, la version courante est la 1.1.1.<br /><br /><b>JSON.simple</b> est pleinement compatible avec la spécification JSON (RFC4627), une suite de tests unitaires démontre cette compatibilité.<br /><br />Un point intéressant est que l’api n’a aucune dépendance.<br /><br />Les principales fonctionnalités sont les suivantes : <br /><br /> - Encoder au format JSON,<br /> - Décoder à partir d’un flux JSON,<br /> - Prend en charge l’échappement de certains caractères.<br /><br />JSON.simple sait mapper nativement (decode/encode) les types suivants : <br />	<br />	- String -&gt; java.lang.String<br />	- number -&gt; java.lang.Number<br />	- true|false -&gt; java.lang.Boolean<br />	- array -&gt; java.util.List<br />	- object -&gt; java.util.Map.<br />	- null -&gt; null<br /><br />En dehors de ces types, JSON va invoquer la méthode toString sur l’objet à encoder ce qui ne donne pas toujours le résultat souhaité.<br />Pour les objets sortant de ce scope, l’outil a prévu un moyen de rendre n’importe quelle classe <i>Jsonifiable</i> en fournissant l’interface <i>JSONAware</i>. <br />Cette interface définit une méthode à implémenter. Cette méthode sera invoquée au moment où l’objet sera transformé au format JSON.<br /><br />Les différentes actions menées par l’outil se font en un temps record. Sur le site, on peut trouver un benchmark que l’on peut faire tourner localement.<br /><br />Une dernière fonctionnalité intéressante est la possibilité d’intervenir dans la phase de parsing d’un flux JSON. Cette incursion se fait à la manière du traitement XML réalisé par l’api SAX.<br /><br />J’ai eu recours très récemment à cet outil. La simplicité de mise en oeuvre est très appréciable.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23json">#json</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23decode">#decode</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23encode">#encode</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>296</wp:post_id>
		<wp:post_date>2012-11-14 21:36:54</wp:post_date>
		<wp:post_date_gmt>2012-11-14 21:36:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>json-simple</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="decode"><![CDATA[Decode]]></category>
		<category domain="post_tag" nicename="encode"><![CDATA[Encode]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="json"><![CDATA[Json]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>La sérialisation en 8 points</title>
		<link>https://thecoderwriter.wordpress.com/2012/11/05/la-serialisation-en-8-points/</link>
		<pubDate>Mon, 05 Nov 2012 19:21:00 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/11/05/la-serialisation-en-8-points/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le mécanisme de sérialisation en java permet à la JVM de sauver l’état d’un objet sur le disque ou le faire passer dans les tuyaux d’un réseau. Même si le sujet est vieux comme le monde... une piqûre de rappel peut des fois faire du bien :-)<br /><br />Lorsqu&#039;on dit : “je vais rendre une classe sérialisable”, on pense immédiatement à l’interface que la classe cible doit implémenter pour être compatible avec ce mécanisme.<br />Cependant, il y a d’autres points qu’il est bon de connaître afin de maîtriser complètement le sujet.<br /><br />Le lien que je vous propose décrit au travers de 8 questions la <b>sérialisation</b> en java. Au passage, un autre pointeur est fourni et tout aussi intéressant sur le mot clef <i>transient</i>.<br />Je vous recommande, si vous avez des doutes, de les lire attentivement :)<br /><br />Bonne lecture !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23serialisation">#serialisation</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>297</wp:post_id>
		<wp:post_date>2012-11-05 19:21:00</wp:post_date>
		<wp:post_date_gmt>2012-11-05 19:21:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>la-serialisation-en-8-points</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="serialisation"><![CDATA[Serialisation]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Les fonctionnalités de Java</title>
		<link>https://thecoderwriter.wordpress.com/2012/10/31/les-fonctionnalites-de-java/</link>
		<pubDate>Wed, 31 Oct 2012 22:27:23 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/10/31/les-fonctionnalites-de-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Voici un article que je trouve intéressant. L’auteur de ce post s’est amusé à classer les différentes fonctionnalités du langage Java selon 3 catégories : <br />	<br />- Tous les jours, <br />- Occasionnellement,<br />- Jamais (enfin seulement les développeurs de framework ou de librairie).<br /><br />Chaque fonctionnalité est mise dans l’une des catégories selon la fréquence à laquelle il est bon de l’utiliser d’une manière générale dans notre job de développeur Java.<br /><br /><i>L’auteur de l’article à fait cette liste selon des critères subjectifs et ne revendique en aucun cas avoir une liste de référence.</i> <br /><br />Si, en lisant l’article, vous trouviez une fonctionnalité dans une catégorie et que celle-ci ne correspond pas à votre rythme d’utilisation, l’auteur vous donne son analyse.<br /><br />Pour chaque fonctionnalité, il indique un commentaire décrivant la raison pour laquelle celle-ci se trouve dans cette catégorie.<br /><br />Je trouve l’exercice intéressant ainsi que le résultat. Sans vouloir lancer de discussion à dessein <i>trollique</i>, n’hésitez pas à donner votre avis sur la question :-)<br /><br />Bonne lecture !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23fonctionnalit%C3%A9">#fonctionnalité</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23fr%C3%A9quence">#fréquence</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date>2012-10-31 22:27:23</wp:post_date>
		<wp:post_date_gmt>2012-10-31 22:27:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-fonctionnalites-de-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fonctionnalit"><![CDATA[Fonctionnalit]]></category>
		<category domain="post_tag" nicename="fr"><![CDATA[Fr]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java Champion(e)</title>
		<link>https://thecoderwriter.wordpress.com/2012/10/22/java-champione/</link>
		<pubDate>Mon, 22 Oct 2012 21:38:16 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/10/22/java-champione/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />C’est courant octobre que la bonne nouvelle est arrivée, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/116189330666769817164">agnes crepet</a></span>  a été nommée <b>Java Championne</b>. <br />Sur le site d’Oracle (<a href="http://java.net/website/java-champions/bios.html">http://java.net/website/java-champions/bios.html</a>), on peut trouver la liste de l’ensemble des personnes qui ont reçu ce titre.<br /><br /><b>Qui est *Agnès Crepet</b> ? (pour ceux qui ne la connaîtraient pas)<br /><br />Agnès est passionnée par la technologie avec ses 11 années d’expérience et spécialement sur l’ensemble de l’éco-système Java.<br /><br />Elle a commencé à travailler avec ce langage en 1999. Elle a eu l’occasion de travailler dans plusieurs secteurs d’activités.<br /><br />Elle est aussi leader dans deux Java User Groups : <i>Lyon JUG</i> et le <i>JDuchess France</i>.<br />Elle est aussi co-fondatrice de la conférence <i>Mix-IT</i> ainsi que du podcast <i>Cast-IT</i>, traitant tous les deux de Java et de l’agilité.<br /><br />Elle écrit régulièrement des articles pour le journal Programmez ainsi que sur le blog JDuchess.<br /><br />Vous pourrez aussi la retrouver en tant que speaker dans différentes conférences autour de Java.<br /><br />Elle est enfin membre et présidente de l’association Avataria qui organise des concerts, des Linux Party, des festivals dans des lieux du patrimoine industriel de la ville de Saint-Etienne (sa ville).<br /><br /><b>Son actualité ?</b><br /><br />Dernièrement, <i>Agnes Crepet</i> s’est lancée dans une nouvelle “entreprise”. <br />Elle a fondé avec 3 amis une entreprise nommée <b>Ninja Squad</b>.<br /><br />Cette entreprise va fonctionner autour de 3 activités principales : <br />-  le développement <br />	- l’expertise<br />	- la formation<br /><br />Les valeurs défendues par Ninja Squad sont : <br />	- programmer est un art<br />	- développer, c’est créer,<br />	- l’Open source<br /><br />La société maintient 3 projets : <br />	- DbSetup : une API Java open source pour peupler votre base de données dans vos tests unitaires.<br />	- Échanges.in : une plateforme d&#039;échanges non marchands<br />	-  Apache Camel : Working on improving monitoring<br /><br /><br />Si vous ne la connaissiez pas, vous en savez un peu plus... En lien dans ce post un article d’Agnès Crepet expliquant ses impressions sur le fait de devenir Java Championne ainsi que la génèse et la philosophie de l’entreprise <b>Ninja Squad</b><br /><br />Bonne lecture...<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23championne">#championne</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23squad">#squad</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23agnes">#agnes</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23crepet">#crepet</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>299</wp:post_id>
		<wp:post_date>2012-10-22 21:38:16</wp:post_date>
		<wp:post_date_gmt>2012-10-22 21:38:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-champione</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agnes"><![CDATA[Agnes]]></category>
		<category domain="post_tag" nicename="championne"><![CDATA[Championne]]></category>
		<category domain="post_tag" nicename="crepet"><![CDATA[Crepet]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="squad"><![CDATA[Squad]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DevFest à Nantes</title>
		<link>https://thecoderwriter.wordpress.com/2012/10/15/devfest-a-nantes/</link>
		<pubDate>Mon, 15 Oct 2012 21:16:44 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/10/15/devfest-a-nantes/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le 9 novembre prochain se tiendra le DevFest à Nantes. <br />Cette conférence est organisée par le Google Developer Groups (GDG) Nantais.<br /><br />D’une manière générale, les DevFests sont des conférences qui se tiennent un peu partout dans le monde et qui sont pour les développeurs intéressés par les technologies gravitant dans l’univers de Google. L&#039;occasion de se rassembler et d’échanger.<br /><br />La conférence Nantaise se déroulera sur une journée de 8h30 à 18h dans les locaux de l’Epitech à Nantes.<br /><br />Deux types de sessions seront dispensés pendant cette journée : <br />	- Les conférences présentées par des googlers et/ou des speakers renommés,<br />	- Les CodeLabs qui seront un moyen de mettre en pratique une techno accompagné d’un expert.<br /><br />L’inscription est limitée et obligatoire. Une modeste participation de 10 euros est requise, celle-ci comprend le petit déjeuner le matin en arrivant ainsi que le repas. Néanmoins, l’inscription est gratuite pour les étudiants.<br /><br />Le concours <b>BeMyApp</b>, dont le but est de développer en équipe en 48h, est soutenu par le DevFest.<br />Ce concours se déroule le week-end suivant la conférence à Marseille. <br />En s’inscrivant au concours, l’aller-retour à Marseille et la restauration pour les 2 jours seront pris en charge. Petit bonus: l’inscription au DevFest devient gratuite.<br /><br />L’ensemble des informations complémentaires sur le planning, les speakers, etc. sont disponibles sur le lien attaché à l’article.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23google">#google</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23devfest">#devfest</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23gdg">#gdg</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>300</wp:post_id>
		<wp:post_date>2012-10-15 21:16:44</wp:post_date>
		<wp:post_date_gmt>2012-10-15 21:16:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devfest-a-nantes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devfest"><![CDATA[Devfest]]></category>
		<category domain="post_tag" nicename="gdg"><![CDATA[Gdg]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java puzzle : unreachable statement</title>
		<link>https://thecoderwriter.wordpress.com/2012/10/10/java-puzzle-unreachable-statement/</link>
		<pubDate>Wed, 10 Oct 2012 20:39:43 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/10/10/java-puzzle-unreachable-statement/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Ce soir je vous propose une devinette sur la compilation en Java.<br />Ce puzzle est proposé par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/101468817683594003129">Joseph Kulandai R</a></span>. A travers ce puzzle, il fournit une explication sur le mécanisme de compilation des déclarations <b>unreachables</b>.<br /><br />Voici l’énoncé : <br /><br />Soit les 3 blocs de code suivants : <br /><br /><b>Bloc A</b> : <br />public void javapapers() {<br />    System.out.println(&quot;java&quot;);<br />    return;<br />    System.out.println(&quot;papers&quot;);<br />}<br /><br /><b>Bloc B</b> : <br />public void javapapers() {<br />    System.out.println(&quot;java&quot;);<br />    if (true) {<br />        return;<br />    }<br />    System.out.println(&quot;papers&quot;);<br />}<br /><br /><b>Bloc C</b>:<br />public void javapapers() {<br />    System.out.println(&quot;java&quot;);<br />    while(true) {<br />        return;<br />    }<br />    System.out.println(&quot;papers&quot;);<br />}<br /><br />Tentez de décrire, sans IDE bien sûr, le comportement du compilateur dans les 3 cas ci-dessus.<br /><br />Pour vérifier vos réponses et avoir une explication, suivez le lien attaché à ce post.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23puzzle">#puzzle</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23unreachable">#unreachable</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>301</wp:post_id>
		<wp:post_date>2012-10-10 20:39:43</wp:post_date>
		<wp:post_date_gmt>2012-10-10 20:39:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-puzzle-unreachable-statement</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="puzzle"><![CDATA[Puzzle]]></category>
		<category domain="post_tag" nicename="unreachable"><![CDATA[Unreachable]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Vert.x</title>
		<link>https://thecoderwriter.wordpress.com/2012/10/08/vert-x/</link>
		<pubDate>Mon, 08 Oct 2012 22:59:05 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/10/08/vert-x/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />je vais vous présenter le projet <b>Vert.x</b>. Je suis tombé dessus par hasard lors d’une veille technique quotidienne au détour d’un post sur un blog... (vous me suivez ? ;-) )<br /><br /><b>Qu’est ce que Vert.x?</b><br />C’est un framework qui peut se résumer par les termes suivants : <br /><br />	- moins d’effort<br />	- polyglotte,<br />	- scalable,<br />	- simple,<br />	- concurrence.<br /><br />La première release 1.0 a vu le jour le 25 avril 2012 (aujourd&#039;hui, la version courante est  1.2.3).<br />Ce projet est sponsorisé par VMware.<br />Lors de sa sortie en version béta, le projet est devenu le 32ieme projet Java suivi sur Github, juste derrière JBoss AS (ceci grâce à un article publié sur infoQ).<br /><br />Pour se faire une idée rapide, c’est un outil très proche de <b>Node.js</b> dans l’état d’esprit. C’est à dire qu’au travers de quelques lignes de code, vous avez un serveur HTTP fonctionnel et très performant.<br /><br /><i>Pour être tout à fait honnête, je ne connais que les aspects théoriques de Node.js. Par conséquent, je ne vais pas pousser plus loin la comparaison et me focaliser sur Vert.x</i><br /><br /><b>Plus concrètement...</b><br />Vert.x est un framework d&#039;application événementielle qui fonctionne sur la JVM. <br /><br />Il est polyglotte : vous avez le choix  du langage avec lequel vous souhaitez travailler : <br />	- Javascript<br />	- CoffeeScript<br />	- Ruby<br />	- Python<br />	- Groovy,<br />	- ….. et Java.<br /><br />Vous avez aussi la possibilité de mixer les langages.<br /><br />Il est simple : quelques lignes suffisent pour obtenir une application robuste et scalable : <br /><br />import org.vertx.java.core.Handler;<br />import org.vertx.java.core.http.HttpServerRequest;<br />import org.vertx.java.deploy.Verticle;<br /><br />public class Server extends Verticle {<br />    public void start() {<br />        vertx.createHttpServer().requestHandler(new Handler&lt;HttpServerRequest&gt;() {<br />            public void handle(HttpServerRequest req) {<br />                String file = req.path.equals(&quot;/&quot;) ? &quot;index.html&quot; : req.path;<br />                req.response.sendFile(&quot;webroot/&quot; + file);<br />            }<br />        }).listen(8080);<br />    }<br />}<br /><br /><br />Il est scalable : il se base sur le modèle de programmation asynchrone avec des IO non-bloquantes.<br /><br />La concurrence simplifiée : le framework offre la possibilité de coder comme dans un environnement mono-threadé.<br /><br />Il est reparti : La communication entre les différents composants d’une application basée sur Vertx se fait via un bus d’évènement distribué. La communication se fait entre toutes les instances du serveur ainsi que la partie cliente. Cette gestion d’évènements est basée sur le modèle d’acteur.<br /><br />Il supporte : <br />	- websokets,<br />	- SockJS<br />	- communication HTTP/HTTPS<br />	- TCP / SSL<br /><br />Vert.x offre un système d’extension via les modules. Un repo public est disponible sur Github.<br /><br />Autres fonctionnalités en vrac : <br />	- Gestion de tâches planifiées,<br />	- Fichier de conf rédigé en JSON,<br />	- Module de définition de route,<br />	- Manipulation du système de fichiers.<br />	- etc...<br /><br /><b>Comment utiliser vert.x ?</b><br />Vert.x peut être utilisé comme une plateforme autonome ou alors embarqué dans une autre application.<br /><br />La documentation est assez complète. La liste de discussion est très fréquentée et les questions trouvent rapidement des réponses.<br />Ce projet est encore jeune mais propose déjà des fonctionnalités avancées. <br /><br />Je pense que c’est un projet sur lequel il faut garder un oeil et qu’il ne faut pas hésiter à tester.<br /><br /> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23vertx">#vertx</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23vmware">#vmware</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23groovy">#groovy</a>    <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Javascript">#Javascript</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23CoffeeScript">#CoffeeScript</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Ruby">#Ruby</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Python">#Python</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Groovy">#Groovy</a>  ,﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>302</wp:post_id>
		<wp:post_date>2012-10-08 22:59:05</wp:post_date>
		<wp:post_date_gmt>2012-10-08 22:59:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vert-x</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="coffeescript"><![CDATA[CoffeeScript]]></category>
		<category domain="post_tag" nicename="groovy"><![CDATA[Groovy]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[Ruby]]></category>
		<category domain="post_tag" nicename="vertx"><![CDATA[Vertx]]></category>
		<category domain="post_tag" nicename="vmware"><![CDATA[Vmware]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PowerMock</title>
		<link>https://thecoderwriter.wordpress.com/2012/10/04/powermock/</link>
		<pubDate>Thu, 04 Oct 2012 21:56:15 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/10/04/powermock/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Les tests unitaires sont un point central dans un projet informatique; Ils garantissent (en partie) la stabilité du code couvert.<br />Ils doivent avertir le développeur d&#039;un changement de comportement d’une portion de code. Dans certain cas ce changement est normal car une règle métier a changée;dans d&#039;autre cas cela peut être dû à un impact collatéral sur composant, à priori, sans rapport avec l&#039;évolution qui vient d&#039;être faite.<br /> <br />Avoir une couverture de test unitaire la plus large possible sur l&#039;ensemble du code de notre application permet de se prémunir des régression potentielle.<br /> <br />La famille des outils permettant d&#039;écrire des tests unitaires est assez grande. On y trouve différents frameworks permettant d&#039;adresser l&#039;ensemble des contraintes que l&#039;on peut rencontrer lorsque l&#039;on écrit des tests unitaires.<br /><br />Dans les applications que nous développons, nous travaillons généralement avec des APIs externes, du code <i>legacy</i>, etc.<br />Ce type de code, sur lequel nous n’avons pas forcément la main, peut poser des problèmes lors de l’écriture d’un test unitaire dépendant de ces composants.<br />Dans les bonnes pratiques d’écriture de test unitaire, il faut <i>bouchonner</i> (mocker) tout ce qui n’est pas directement lié au code à tester.<br /><br />Pour cela, on utilise des frameworks de mock comme : <br />	- EasyMock,<br />	- Mockito,<br />	- JMock.<br /><br />Ce sont les plus connus. Avec ces outils on pourra bouchonner : <br /><br />	- Tous les composants fournissant une interface,<br />	- Aussi les composants basés sur des classes non finale.<br /><br />Sur ces <i>bouchons</i> on ajoutera des comportements permettant de positionner un contexte d’exécution au test unitaire cible. Les comportements seront du type :<br />	<br />	<i>Lorsque tu appelles telle méthode de ma classe, renvoies moi tel objet</i><br /><i>Cette méthode ne jamais être appelée</i><br /><i>Cette méthode doit être appelée au moins N fois</i><br /><br />Bon c’est un tout petit rappel sur la mission attribuée à un framework de mock.<br /><br /><br />Malgré les possibilités offertes par ces frameworks, il existe des limitations : <br />	<br />- Mocker une classe déclarée finale,<br />- Mocker des méthodes déclarées privées,<br />- Mocker des méthodes statique,<br />- By-passer le constructeur d’une classe,<br />- Mocker partiellement une classe.<br /><br />Toutes ces problématiques sont adressées par <b>PowerMock</b> et de manière très élégante.<br />En effet, à l’aide de deux annotations, toute la puissance de l’outil se retrouve dans vos tests unitaires et vous évite d’installer pas mal de plomberie pour pouvoir tester dans de bonnes conditions votre code.<br /><br />PowerMock s’intégre parfaite (des extensions sont proposées) avec EasyMock, Mockito et aussi TestNG.<br /><br />La dernière release du projet a été faite au mois de mai de cette année.<br />Le wiki fournit beaucoup de documentation et d’exemples, ce qui permet de prendre l’outil en main très rapidement.<br /><br />Je pense qu’il apporte un vrai plus dans l’écriture de test unitaire. Il repousse les limites imposées par le langage et permet de rendre nos tests beaucoup plus robuste et exhaustif.<br /><br /><i>Mettez les bouchons doubles! :-)</i> <br /><br />Il existe, dans le même registe, JDave : <a href="http://jdave.org/">http://jdave.org/</a><br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23test">#test</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23mockito">#mockito</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23powermock">#powermock</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23mock">#mock</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23test">#test</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23unitaire">#unitaire</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>303</wp:post_id>
		<wp:post_date>2012-10-04 21:56:15</wp:post_date>
		<wp:post_date_gmt>2012-10-04 21:56:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>powermock</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="mock"><![CDATA[Mock]]></category>
		<category domain="post_tag" nicename="mockito"><![CDATA[Mockito]]></category>
		<category domain="post_tag" nicename="powermock"><![CDATA[Powermock]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<category domain="post_tag" nicename="unitaire"><![CDATA[Unitaire]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Chargeur de classes en Java</title>
		<link>https://thecoderwriter.wordpress.com/2012/10/01/chargeur-de-classes-en-java/</link>
		<pubDate>Mon, 01 Oct 2012 21:40:20 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/10/01/chargeur-de-classes-en-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le chargement des classes en Java est un mécanisme qui est souvent ignoré et laissé de coté par la plupart des développeurs. <br /><br />Ce mécanisme est pourtant la base du langage et un de ses atouts par rapport au chargement dynamique des classes pendant l’exécution d’un programme. Par ce biais, Java ne charge en mémoire les modules que lorsque ceux ci sont nécessaires, etc.<br /><br />Je vous propose aujourd’hui un article que j’ai trouvé particulièrement intéressant sur le sujet.<br />Bien que le sujet de l’article soit <i>Le chargement de classe dans JBoss AS</i> , toute une partie est consacrée à un rappel sur ce fameux mécanisme du chargement de classe : <b>Le class loader</b>.<br />Aussi, cet article à le mérite d’être rédigé en francais (ce qui est assez rare pour ce genre de sujet). <br />Enfin, malgré l’âge de cet article (28/11/2007), je pense que toute la théorie nécessaire à la bonne compréhension du système de chargement de classes reste d’actualité (à quelques détails près peut-être).<br /><br />Globalement, l’article s’organise de la façon suivante; Tout d’abord, l’auteur fait un rappel détaillé sur comment se passe le chargement des classes au sein de la JVM. Notamment, en décrivant les 3 chargeurs fondamentaux de la JVM.<br />Ensuite, il fournit des explications précieuses sur les différents types d’exception pouvant être lancés pendant le chargement.<br /><br />Après cette introduction, il se lance dans le coeur du sujet, en détaillant comment JBoss utilise ce mécanisme dans son context de serveur d’application.<br /><br />L’article se termine sur des bonnes pratiques à mettre en oeuvre lors du développement de composants destinés à être déployés au sein d’un serveur d’application, en l&#039;occurrence JBoss.<br /><br />Au risque de me répéter, bien que l’article soit un peu ancien, il décrit des concepts et fournit des informations encore d’actualité aujourd’hui. <br />Il constitue une bonne base d’entrée en matière sur le sujet afin d’être mieux armé sur les problèmes que l’on pourrait rencontrés.<br /><br />Voici, également, un pointeur sur un cours traitant du même sujet. il viendra compléter l’article.<br /><a href="http://deptinfo.unice.fr/~grin/messupports/java/chargeurs6.pdf">http://deptinfo.unice.fr/~grin/messupports/java/chargeurs6.pdf</a><br /><br />Bonne lecture!<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Java">#Java</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23classloader">#classloader</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23JVM">#JVM</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23classe">#classe</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23chargement">#chargement</a>. ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>304</wp:post_id>
		<wp:post_date>2012-10-01 21:40:20</wp:post_date>
		<wp:post_date_gmt>2012-10-01 21:40:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>chargeur-de-classes-en-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="chargement"><![CDATA[Chargement]]></category>
		<category domain="post_tag" nicename="classe"><![CDATA[Classe]]></category>
		<category domain="post_tag" nicename="classloader"><![CDATA[Classloader]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jvm"><![CDATA[Jvm]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java au quotidien épisode 3</title>
		<link>https://thecoderwriter.wordpress.com/2012/09/26/java-au-quotidien-episode-3/</link>
		<pubDate>Wed, 26 Sep 2012 21:50:13 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/09/26/java-au-quotidien-episode-3/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Aujourd’hui, je vais vous parler d’une méthode disponible dans l’API Guava que je trouve très pratique pour adresser des problématiques de partitionnement d’ensemble.<br />Je vois deux cas d’utilisations de cette méthode (tiré d’un cas réel) : <br /><br />	- gérer de la pagination,<br />	- Spring batch ( en mode partitionnement).<br /><br />Cette fameuse méthode fait partie de la classe <b>Lists</b>. Elle a la signature suivante : <br /><i>public static &lt;T&gt; List&lt;List&lt;T&gt;&gt; partition(List&lt;T&gt; list,int size)</i><br /><br />Elle permet à partir d’une liste typée et de la définition d’une taille, d’obtenir un ensemble de listes d’une taille correspondant à la taille définie en paramètre (sauf éventuellement pour la dernière ;-)). Chacune des listes contient un sous-ensemble de la liste passée en paramètre.<br /><br />Si l’on prend, par exemple, le premier cas de figure évoqué au début de l’article, sur la gestion d’une pagination, on peut se rendre compte de tout l’intérêt d’une telle méthode.<br />Dans certain cas, cette gestion est faite <i>à la mano</i>  :<br /><br />//   En paramètre <b>page courante</b>, <b>nombre d&#039;élément par page</b><br /><br />   final List&lt;MyElement&gt; elementList = ElementProvider.getAllElement(/*some parameters*/);<br />   totalRecords = elementList.size();<br />   offset = rows * (page - 1);<br />   // Let&#039;s avoid showing a blank page, back to first one.<br />   if (totalRecords &lt; offset) {<br />	offset = 0;<br />	page = 1;<br />   }<br />	int start = offset, end, size;<br />	List&lt;MyElement&gt; selectedElements;<br />	do {<br />		size = rows &gt; totalRecords - start ? totalRecords - start : rows;<br />		end = start + size;<br />		selectedElements = size &gt; 0 ? elementList.subList(start, end) : new LinkedList&lt;MyElement&gt;();<br />		doSomething(selectedElements);<br />		start = end;<br />	} while (selectedElements.size() &lt; size &amp;&amp; rows == size);<br /><br />                                                            <br />Sans vraiment regarder le détail du code ci-dessus (tiré de la vraie vie), on s’aperçoit que la complexité est là.<br />On pourrait remplacer ce code par le suivant : <br /><br /> final List&lt;MyElement&gt; elementList = ElementProvider.getAllElement(/*some parameters*/);<br /><br />List&lt;MyElement&gt; currentElements = Lists.partition(elementList, nbElemeByPage).get(idxCurrentePage);<br /><br /><i>Remarque : certaines vérifications pour sécuriser le code seront tout de même nécessaires. Néanmoins celles-ci ne remettront pas en cause la simplicité du code</i><br /><br />On voit que le code est beaucoup plus clair et concis.<br /><br />L’autre cas concernant Spring Batch est clairement adapté. <br />Pour rappel, l’utilisation du partitionnement au sein de spring batch permet de répartir sur plusieurs agents le traitement d’un ensemble de données. En entrée de l’unité de traitement spring Batch, un ensemble. Cet ensemble est découpé en parts égales et distribuées à plusieurs agents (distants ou locaux) pour effectuer de manière cloisonnée et en parallèle un traitement à partir des données.<br /><br />Dans ce cas, l’utilisation de la méthode de partitionnement est plus qu’évidente.<br /><br />Voila j’espère que ce court article vous aura fait découvrir un outil qui vous sera utile dans votre quotidien...<br /><br />A vos marques, prêt ? .. Partitionnez !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Java">#Java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23guava">#guava</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23partition">#partition</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23tools">#tools</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2012-09-26 21:50:13</wp:post_date>
		<wp:post_date_gmt>2012-09-26 21:50:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-au-quotidien-episode-3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="guava"><![CDATA[Guava]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="partition"><![CDATA[Partition]]></category>
		<category domain="post_tag" nicename="tools"><![CDATA[Tools]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JEP 162: préparation de la modularisation</title>
		<link>https://thecoderwriter.wordpress.com/2012/09/24/jep-162-preparation-de-la-modularisation/</link>
		<pubDate>Mon, 24 Sep 2012 21:13:27 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/09/24/jep-162-preparation-de-la-modularisation/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Au mois de juillet dernier, Mark Reinhold annonçait le report du projet de modularisation qui devait faire partie de la prochaine version du JDK.<br /><br />Malgré ce décalage, Alan Bateman propose au travers d’une JEP (JDK Enhancement Proposal) de préparer le terrain du projet de modularisation pour la prochaine release.<br />La JEP 162 décrit les évolutions proposées en vue de préparer l’intégration du projet Jigsaw.<br /><br />Il est utile de préciser que l’objectif n’est pas de commencer à intégrer du code directement lié au projet de modularisation mais <i>seulement</i> de  préparer le terrain.<br /><br />Voici la liste (non exhaustive) des propositions : <br /><br />- Amélioration du mécanisme de chargement des classes, ainsi que la correction de certains problèmes identifiés.<br />- Standardisation de l’utilisation de java.util.ServiceLoader. <br />- Fourniture d’un outil d’analyse des dépendances statiques.<br />- Déprécier l’ensemble des APIs Java SE pouvant être une contrainte ou un obstacle pour le projet Jigsaw<br />-etc..<br /><br />Malgré le report du projet, on peut constater que l’effort est maintenu par cette anticipation dans le contenu de la prochaine release.<br />Vous pourrez trouver plus de détails dans l’article attaché à ce post.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23jigsaw">#jigsaw</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23JEP">#JEP</a>  #162  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23JDK8">#JDK8</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23JDK9">#JDK9</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>306</wp:post_id>
		<wp:post_date>2012-09-24 21:13:27</wp:post_date>
		<wp:post_date_gmt>2012-09-24 21:13:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jep-162-preparation-de-la-modularisation</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jdk"><![CDATA[JDK]]></category>
		<category domain="post_tag" nicename="jep"><![CDATA[JEP]]></category>
		<category domain="post_tag" nicename="jigsaw"><![CDATA[Jigsaw]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Exception et errors</title>
		<link>https://thecoderwriter.wordpress.com/2012/09/12/exception-et-errors/</link>
		<pubDate>Wed, 12 Sep 2012 20:48:52 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2012/09/12/exception-et-errors/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Je suis tombé sur ce blog ‘original’. Tout est dans le titre... L’auteur,<br />+Ganesh bhuddhan bu a commencé à recenser les exceptions et les erreurs (Error) en fournissant une description assez détaillée sur les raisons de leur apparition.<br /><br />Pour chaque cas, on trouve un commentaire plus un bout de code mettant en évidence la source de l’erreur. <br />Le blog existe vraisemblablement depuis le mois de mai de cette année. Je trouve l’initiative intéressante.<br />Si pour des développeurs expérimentés cela peut paraitre évident, je pense que pour des personnes d’un niveau plus junior, cela peut constituer une mine d’or d’information :)<br /><br />Bonne lecture!<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23exception">#exception</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23error">#error</a>   ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>307</wp:post_id>
		<wp:post_date>2012-09-12 20:48:52</wp:post_date>
		<wp:post_date_gmt>2012-09-12 20:48:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>exception-et-errors</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="error"><![CDATA[Error]]></category>
		<category domain="post_tag" nicename="exception"><![CDATA[Exception]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ouvrez le capot de votre JVM</title>
		<link>https://thecoderwriter.wordpress.com/2013/05/08/ouvrez-le-capot-de-votre-jvm/</link>
		<pubDate>Wed, 08 May 2013 21:19:00 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/05/08/ouvrez-le-capot-de-votre-jvm/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Avez-vous déjà été regarder du côté du bytecode ? Une des raisons pour laquelle vous ne l’avez jamais fait, c’est que lire et comprendre cette syntaxe n’est pas toujours trivial.<br />Une autre raison est que pour une grande part des développeurs Java, cela reste complètement transparent.<br />Je pense que la compréhension de la mécanique interne est une bonne chose.<br />Je suis récemment tombé sur cet article qui donne les éléments permettant d’appréhender le bytecode.<br /><br />L’article que vous trouverez attaché à ce post est le premier d’une série d’articles.<br />Le sujet est vraiment bien détaillé et l’on y retrouve des exemples très clairs.<br /><br />Pour tous ceux qui souhaitent découvrir ou approfondir ces connaissances sur les rouages du bytecode en Java, cet article est pour vous !<br /><br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23bytecode">#bytecode</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23jvm">#jvm</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>268</wp:post_id>
		<wp:post_date>2013-05-08 21:19:00</wp:post_date>
		<wp:post_date_gmt>2013-05-08 21:19:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ouvrez-le-capot-de-votre-jvm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bytecode"><![CDATA[Bytecode]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jvm"><![CDATA[Jvm]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Connaitre les outils de tests c’est bien!</title>
		<link>https://thecoderwriter.wordpress.com/2013/04/24/connaitre-les-outils-de-tests-cest-bien/</link>
		<pubDate>Wed, 24 Apr 2013 19:30:08 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/04/24/connaitre-les-outils-de-tests-cest-bien/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Assurer la qualité d’une application passe inévitablement par la mise en place d’une couverture de test. Qu’ils soient unitaires, d’intégration, fonctionnels, etc.<br /><br />Avoir cette volonté est une très bonne chose. Encore faut-il savoir le faire correctement... :)<br />La première brique à cet ambitieux édifice est le test unitaire. Mais sait-on réellement écrire des tests unitaires pertinents, qui ont du sens, qui couvrent correctement le code de notre application ?<br /><br />En Java, il existe pas mal de frameworks de tests permettant de mettre une couverture de tests en place.<br /><br />Pour répondre aux questions ci-dessus, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/100241047121875700803">David Gageot</a></span>  a créé deux formations permettant d’apprendre ou de se perfectionner dans ce domaine :<br />- les tests de A à Z<br />- Bootcamp tests / TDD<br /><br />Ces deux formations sont respectivement dispensées sur 2 et 4 jours.<br />L’objectif de ces formations est d’apprendre ou se perfectionner dans l’art d’écrire des tests unitaires (entre autres).<br /><br />Vous trouverez tous les détails sur le lien attaché à ce post.<br /><br />N’hésitez pas à tester ;)<br /><br /> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23formation">#formation</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23test">#test</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23unitaire">#unitaire</a>   ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>269</wp:post_id>
		<wp:post_date>2013-04-24 19:30:08</wp:post_date>
		<wp:post_date_gmt>2013-04-24 19:30:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>connaitre-les-outils-de-tests-cest-bien</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="formation"><![CDATA[Formation]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<category domain="post_tag" nicename="unitaire"><![CDATA[Unitaire]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Apprendre à programmer en Java</title>
		<link>https://thecoderwriter.wordpress.com/2013/04/17/apprendre-a-programmer-en-java/</link>
		<pubDate>Wed, 17 Apr 2013 19:36:07 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/04/17/apprendre-a-programmer-en-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Vous avez sûrement déjà entendu parlé du site <a href="http://coursera.org">coursera.org</a>. Ce site permet de se former sur différents sujets gratuitement.<br /><br />Les cours sont généralement dispensés par des écoles prestigieuses telles que l’EPFL (l’Ecole Polytechnique Fédérale de Lausanne) ou l’université de Stanford.<br /><br />Vous n’avez peut être pas échappé au célèbre cours sur Scala dispensé par le créateur du langage <b>Martin Odersky</b>.<br /><br />Bien que la majorité des cours soient donnés en anglais, on peut trouver quelques formations en français.<br /><br />Il n’est pas rare de trouver sur des forums dédiés au développement informatique des posts comme celui-ci :<br /><br /><i>Bonjour à tous,</i><br /><br /><i>J’aimerai apprendre la programmation et en particulier le langage Java. Est-ce que vous auriez des livres ou des ressources à me conseiller ?</i><br /><br />Internet regorge de ressources permettant de se former en autodidacte sur le sujet.<br />En cherchant un peu sur le site coursera, j’ai trouvé deux formations en français sur l’initiation à la programmation en Java et initiation à la programmation orientée objet, toujours basée sur le langage Java.<br /><br /><br />Pour les débutants, ou ceux qui souhaitent s’intéresser au sujet, c’est une véritable aubaine.<br /><br />Ce cours est dispensé par l’EPFL.<br /><br />La première formation ne requiert aucune connaissance particulière, la deuxième part du principe que vous avez suivi l’initiation.<br /><br />Les cours sont donnés sous forme de courtes séquences vidéo d&#039;environ 10 minutes ponctuées d&#039;une ou deux questions. La mise en pratique prend ensuite plusieurs formes :<br /><br />    -des quiz vous permettent d&#039;évaluer votre acquisition des concepts de base,<br />    -des exercices de programmation libres, dont le corrigé est fourni, vous permettent de mettre en pratique ces concepts.<br />    - des exercices notés, progressifs, vous permettent de valider les connaissances acquises.<br /><br /><br />Des aspects de méthodologie, de bonnes pratiques, seront aussi abordés au travers des vidéos de cours et au travers de certains exercices.<br /><br />La charge de travail à prévoir est environ 5 à 7 heures de travail par semaine. C’est un investissement personnel qui permet d’obtenir un certificat officiel signé par les enseignants du cours.<br /><br />La prochaine session débutera le 17 septembre 2013, vous pouvez d&#039;ores et déjà vous inscrire.<br /><br />Ferez-vous aussi votre rentrée des classes ?<br /><br /><br /> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23formation">#formation</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23coursera">#coursera</a>   ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date>2013-04-17 19:36:07</wp:post_date>
		<wp:post_date_gmt>2013-04-17 19:36:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>apprendre-a-programmer-en-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="coursera"><![CDATA[Coursera]]></category>
		<category domain="post_tag" nicename="formation"><![CDATA[Formation]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The ninja web framework</title>
		<link>https://thecoderwriter.wordpress.com/2013/04/15/the-ninja-web-framework/</link>
		<pubDate>Mon, 15 Apr 2013 22:01:53 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/04/15/the-ninja-web-framework/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><b>Ninja web framework</b> est un projet qui a débuté au début de l’année 2012.<br />L’objectif de ce <i>nouveau</i> framework est d’offrir une stack web permettant de démarrer rapidement un projet web.<br />L’architecture proposée permet un développement productif.<br /><br />Globalement l’outil se base sur des standards éprouvés tel qu’une architecture stateless (REST), une approche de ressources <i>non partagées</i> (facilitant le développement concurrent) etc.<br /><br />Je ne sais pas vous, mais en lisant ces quelques lignes on retrouve pas mal de points communs avec un autre framewok avec lequel vous avez peut-être déjà <i>joué</i>  :). Il s’agit bien évidemment du célèbre framework <b>Play</b>.<br /><br />Bien que l’approche globale soit très similaire, lorsque l’on détaille les briques techniques on distingue des choix nettement différents. La volonté de l’équipe a été de se baser sur des standards tels qu’un conteneur de servlet, un outil de build largement éprouvé comme Maven, la JSR303 pour la validation, etc.<br />Le binaire produit n’est autre qu’un traditionnel fichier WAR.<br />Un point intéressant est la compatibilité avec la plateforme cloud GAE.<br /><br />L’objectif est de rester à 100% dans l’écosystème java en se basant sur des outils qui ont fait leurs preuves.<br /><br />On peut se demander la raison d’un énième framework web.<br />Conscient de cela, les auteurs nous expliquent leur motivation par le fait qu’ils (sont) étaient des inconditionnels de PlayFramework dans sa première version.<br /><br />Lors de la sortie de la version 2, complètement réécrite sur la base du langage Scala, ils n’ont pas adhéré aux choix d’évolution de l’outil.<br />Ils ne mettent pas du tout en cause les choix qui ont été fait, néanmoins selon eux, certains points font cruellement défaut :<br />    - Une mauvaise intégration dans les IDEs<br />    - un outil de build (SBT) contenant des bugs<br />    - la nature asynchrone de Play donnait lieu à du code difficile à lire et comprendre<br />    - etc<br /><i>(Ces éléments sont à replacer dans leur contexte début 2012)</i><br /><br />A l’heure actuelle, ces points négatifs relevés à l’époque sont-ils toujours aussi pertinents ?<br />Est ce que ce framework a sa place dans l’écosystème technique existant ?<br /><br />Le site du projet est très bien fait et permet un démarrage rapide.<br />Que l’on soit pour ou contre, pour diverses raisons, je pense que ce projet mérite que l’on s’y intéresse.<br /><br />N’hésitez pas à partager votre point de vue en ajoutant un commentaire à ce post.<br /><br /> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23framework">#framework</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23ninja">#ninja</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23web">#web</a>   ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>271</wp:post_id>
		<wp:post_date>2013-04-15 22:01:53</wp:post_date>
		<wp:post_date_gmt>2013-04-15 22:01:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-ninja-web-framework</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="framework"><![CDATA[Framework]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="ninja"><![CDATA[Ninja]]></category>
		<category domain="post_tag" nicename="web"><![CDATA[Web]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ParisJug : Soirée Quickies</title>
		<link>https://thecoderwriter.wordpress.com/2013/04/01/parisjug-soiree-quickies/</link>
		<pubDate>Mon, 01 Apr 2013 21:03:19 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/04/01/parisjug-soiree-quickies/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />La semaine prochaine se tiendra le prochain ParisJug. Cette soirée prendra un format particulier. En effet, elle se déroulera sous la forme d’une succession de <b>quickies</b>. <br /><br />Les sujets abordés n’auront pas forcément de point communs. <br />De la <b>programmation au féminin</b> à l’histoire de Jmeter et java sur un bateau en passant <br />par GWT et leap motion, la soirée promet d’être animée et passionnante.<br /><br />Vous trouverez le détail du programme de la soirée en suivant le lien attaché au post.<br /><br />Je profite de cet article pour noter les présentations de deux Sfériens <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/104198667806510679271">François WAUQUIER</a></span>  qui nous parlera de GWT et l’élimination des DTOs et de <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/100992237363753460679">François Laroche</a></span>  qui présentera le Leap Motion.<br /><br />Pour ceux qui était à Devoxx, vous avez pu voir une démonstration de Leap Motion couplé à Nao. Pour ceux qui serait passé à coté ou qui n’était pas présent, une session de rattrapage en suivant le pointeur suivant : <a href="http://www.youtube.com/watch?v=bfuyf_9JJNs">NAO Leap Control</a><br /><br />Mettez à jour vos agendas : Le 9 avril 19h30 (pensez à vous inscrire)<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Java">#Java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23ParisJug">#ParisJug</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23quickies">#quickies</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date>2013-04-01 21:03:19</wp:post_date>
		<wp:post_date_gmt>2013-04-01 21:03:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>parisjug-soiree-quickies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="parisjug"><![CDATA[Parisjug]]></category>
		<category domain="post_tag" nicename="quickies"><![CDATA[Quickies]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devoxx France 2013 c&#039;est terminé</title>
		<link>https://thecoderwriter.wordpress.com/2013/03/30/devoxx-france-2013-cest-termine/</link>
		<pubDate>Sat, 30 Mar 2013 16:59:39 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/03/30/devoxx-france-2013-cest-termine/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Hier soir se terminait les 3 jours de conférence de Devoxx France.<br />Les 3 jours ont été très intenses et ont couvert un spectre technologique très large.<br /><br />Je pense que beaucoup d&#039;entre vous étaient présents.<br />Si vous souhaitez partager vos impressions ou parler d&#039;une conférence que vous avez particulièrement appréciée, n&#039;hésitez pas à venir poster vos articles sur la communauté (sous le tag Articles).<br /><br />Si vous pensez que l&#039;article pourrait être publié sur la page rattachée à la communauté, contactez +Fabrice Sznajderman ou +Fabien Baligand pour en discuter.<br /><br />A vos claviers ! :)﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>273</wp:post_id>
		<wp:post_date>2013-03-30 16:59:39</wp:post_date>
		<wp:post_date_gmt>2013-03-30 16:59:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devoxx-france-2013-cest-termine</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devoxx France 2013 : c’est parti!</title>
		<link>https://thecoderwriter.wordpress.com/2013/03/27/devoxx-france-2013-cest-parti/</link>
		<pubDate>Wed, 27 Mar 2013 22:39:14 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/03/27/devoxx-france-2013-cest-parti/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Devoxx France 2013 a ouvert ses portes ce matin! <br />Il aura fallu beaucoup de travail avant le démarrage de cette grande conférence.<br /><br />Afin de mieux se rendre compte <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/100155138787932309893">Claude Falguiere</a></span>  a fait un petit reportage photos des préparatifs de l’événement.<br /><br />@Demain!<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23devoxxfr">#devoxxfr</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>274</wp:post_id>
		<wp:post_date>2013-03-27 22:39:14</wp:post_date>
		<wp:post_date_gmt>2013-03-27 22:39:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devoxx-france-2013-cest-parti</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devoxxfr"><![CDATA[Devoxxfr]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Débuggage : mode d’emploi</title>
		<link>https://thecoderwriter.wordpress.com/2013/03/25/debuggage-mode-demploi/</link>
		<pubDate>Mon, 25 Mar 2013 22:16:49 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/03/25/debuggage-mode-demploi/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />	 	 	<br />Voici un pointeur vers un article que je trouve assez original : <i>Débogage en Java/JavaEE</i><br /><br /><br />Même si cela peut paraître évident pour des vétérans du développement en java, l’article peut être vraiment intéressant pour les <i>petits juniors</i> qui débarquent sur des projets informatique de la vraie vie :).<br /><br /><br />Je sais que la notion de débogage dans le développement est un sujet à point de vue divergent.<br />Je pense que le débogage est une bonne chose et c’est comme toutes les bonnes choses, il ne faut pas en abuser.<br /><br /><br />Dans tous les cas cet article fait un point sur les différentes techniques et donnera sûrement des billes à celui qui débute et qui se retrouve sur application 5 ou 6 ans d’ages.<br /><br /><br />Cet article ne s’adressera pas sûrement au plus senior d’entre nous, mais une lecture rapide ne peut jamais faire de mal ;)<br /><br /><br />Bonne lecture!<br /><br /> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23debug">#debug</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23javaEE">#javaEE</a>  ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>275</wp:post_id>
		<wp:post_date>2013-03-25 22:16:49</wp:post_date>
		<wp:post_date_gmt>2013-03-25 22:16:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>debuggage-mode-demploi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="debug"><![CDATA[Debug]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="javaee"><![CDATA[JavaEE]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Agnes Crepet : rédact’ chef du Java Magazine d’Oracle</title>
		<link>https://thecoderwriter.wordpress.com/2013/03/20/agnes-crepet-redact-chef-du-java-magazine-doracle/</link>
		<pubDate>Wed, 20 Mar 2013 20:19:19 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/03/20/agnes-crepet-redact-chef-du-java-magazine-doracle/</guid>
		<description></description>
		<content:encoded><![CDATA[  <br /><br /><br />Après avoir été élue Java Championne, Oracle a invité <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/116189330666769817164">agnes crepet</a></span>  à devenir, pour un numéro, la rédactrice en chef du journal digital : Java Magazine.<br /><br />La mission qui lui a été confiée était de proposer différentes thématiques qui mettent en avant la richesse de la communauté Java dans le monde.<br /><br />L’article présente 13 points décrivant la manière de s’investir dans la communauté  :<br /><br />    - Rejoindre un JUG,<br />    - Présenter un sujet à JavaOne<br />    - Devenir JUG leader<br />    - etc.<br /><br />Dans un article au format questions &amp; réponses, Agnes Crepet répond aux questions de Kevin Farnham.<br /><br />D’autres sujets sont également abordés dans le magazine comme la place de Java dans la robotique ou un article sur la Lambda.<br /><br />Pour y accéder, suivez le lien en bas de l’article. Il faudra vous inscrire pour accéder au journal.<br /><br />Bonne lecture!﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>276</wp:post_id>
		<wp:post_date>2013-03-20 20:19:19</wp:post_date>
		<wp:post_date_gmt>2013-03-20 20:19:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>agnes-crepet-redact-chef-du-java-magazine-doracle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Guava : Gestion de cache</title>
		<link>https://thecoderwriter.wordpress.com/2013/03/13/guava-gestion-de-cache/</link>
		<pubDate>Wed, 13 Mar 2013 22:11:28 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/03/13/guava-gestion-de-cache/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Nous avons tous été confrontés à un moment donné à des problématiques mettant en jeu la mise en place d’une gestion de cache.<br /><br />Lorsque l’on est jeune et plein de fougue, on se lance dans sa propre implémentation. Avec l’expérience, on se dit que la problématique a sûrement été adressée par ailleurs et qu’il est sûrement possible de trouver une implém&#039; qui fait ça très bien.. <br /><br />Aujourd’hui, le choix est assez large lorsqu’il est question de gestionnaire de cache.<br /><br />Étant particulièrement fan de l’api guava, je vous propose un pointeur vers un article très intéressant présentant le gestionnaire de cache de Guava.<br /><br />Les auteurs de l&#039;article sont : <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/115427961641528381373">Charles BLONDE</a></span> et <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/106748747256165265697">Nicolas Jozwiak</a></span> <br /><br />Dans cet article, vous trouverez les différentes stratégies d’utilisation de ce cache ainsi que des tips.<br /><br />Bonne lecture !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23guava">#guava</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23gestionnaire">#gestionnaire</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23cache">#cache</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>277</wp:post_id>
		<wp:post_date>2013-03-13 22:11:28</wp:post_date>
		<wp:post_date_gmt>2013-03-13 22:11:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>guava-gestion-de-cache</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cache"><![CDATA[Cache]]></category>
		<category domain="post_tag" nicename="gestionnaire"><![CDATA[Gestionnaire]]></category>
		<category domain="post_tag" nicename="guava"><![CDATA[Guava]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devoxx France 2013</title>
		<link>https://thecoderwriter.wordpress.com/2013/03/11/devoxx-france-2013/</link>
		<pubDate>Mon, 11 Mar 2013 22:15:26 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/03/11/devoxx-france-2013/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Pour ceux qui auront la chance de participer au grand évènement rassemblant toute la communauté des développeurs, il va falloir faire des choix !<br />En effet, le programme des 3 jours pour Devoxx France 2013 est en ligne.<br /><br />Plusieurs thèmes vont être abordés lors de ces trois jours.<br />Cette année encore, la première journée est consacrée à des sessions longues permettant d’approfondir un sujet. Les deux jours suivants seront consacrés à des sessions plus courtes. Autant dire que le rythme sera soutenu.<br /><br />Maintenant que le programme est en ligne, il va falloir se construire un agenda. Très franchement ça ne va pas être évident.<br />Pour ceux qui auraient du mal à trancher, qu’ils se rassurent, comme l’année dernière, un abonnement à Parleys est offert avec l’achat d&#039;un pass (Conférence, Université ou Combi).<br />Cet accès à la plate-forme en ligne permettra après coup de voir et revoir l’ensemble des conférences présentées pendant les 3 jours (toutes ne seront pas forcément disponibles en ligne).<br /><br />Suivez le lien, et construisez votre programme !<br /><br />  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23devoxx">#devoxx</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23programme">#programme</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>278</wp:post_id>
		<wp:post_date>2013-03-11 22:15:26</wp:post_date>
		<wp:post_date_gmt>2013-03-11 22:15:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devoxx-france-2013</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="devoxx"><![CDATA[Devoxx]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="programme"><![CDATA[Programme]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java au quotidien épisode 7 : à l’écoute du futur</title>
		<link>https://thecoderwriter.wordpress.com/2013/02/27/java-au-quotidien-episode-7-a-lecoute-du-futur/</link>
		<pubDate>Wed, 27 Feb 2013 21:49:53 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/02/27/java-au-quotidien-episode-7-a-lecoute-du-futur/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />L’interface <b>Future</b> fournit un contrat permettant de travailler de manière asynchrone sur des ressources qui peuvent prendre du temps à répondre.<br />Elle permet de lancer le traitement sur la ressource et de récupérer le résultat plus tard.<br />L’inconvénient est que nous ne savons pas à l’avance quand est-ce que le résultat sera disponible (oui c’est un peu le principe d’un traitement asynchrone ;) ).<br /><br />L’API guava propose une extension de cette interface en fournissant des fonctionnalités bien pratiques.<br />En effet, elle permet de mettre en œuvre le principe de callback comme on le ferait naturellement lors d’un appel ajax en javascript. <br />C’est à dire qu&#039;au moment où l’on lance le traitement asynchrone, on va décrire le code à exécuter lorsque le traitement sera terminé.<br /><br />L’interface se nomme <b>ListenableFuture</b>. Elle permet d’ajouter à l’instance un <i>listener</i> au travers d’un objet  de type <i>Runnable</i> et un objet de type Executor.<br />Au moment où le résultat sera prêt, alors l’objet Runnable sera lancé à l’aide de l’Executor.<br />La signature de méthode proposée par l’interface pour ajouter un listener est la suivante : <br /><br /><i>addListener(Runnable, Executor)</i><br /><br />Il est également possible d’utiliser la classe utilitaire <b>Futures</b> pour ajouter des callbacks à instance de Future courante. <br />Pour cela, il faut utiliser la méthode suivante : <br /><br /><i>Futures.addCallback(ListenableFuture&lt;V&gt;, FutureCallback&lt;V&gt;, Executor)</i><br /><br />C’est dans ce cas de figure que nous pouvons retrouver l’analogie avec l’appel ajax dont nous parlions tout à l’heure. En effet l’interface définissant le callback (FutureCallback) définit deux méthodes similaires : <br /><br />- <i>onSuccess(V)</i><br />- <i>onFailure(Throwable)</i><br /><br />Le comportement est assez clair, en cas de succès du traitement, c’est la première méthode qui est appelée, en cas d’erreur ce sera la deuxième.<br />L’API propose également une gestion des exceptions remontées en cas d’erreur. Cette fonctionnalité est implémentée au travers de l’interface suivante : <br /><br /><i>CheckedFuture&lt;V, X extends Exception&gt;</i><br /><br />Nous avons rapidement les possibilités offertes par cette interface.<br />En suivant le lien contenu dans le post, vous trouverez des exemples de d’application (transformation asynchrone notamment).<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23guava">#guava</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23future">#future</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23ListenableFuture">#ListenableFuture</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date>2013-02-27 21:49:53</wp:post_date>
		<wp:post_date_gmt>2013-02-27 21:49:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-au-quotidien-episode-7-a-lecoute-du-futur</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="future"><![CDATA[Future]]></category>
		<category domain="post_tag" nicename="guava"><![CDATA[Guava]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="listenablefuture"><![CDATA[ListenableFuture]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Démarrer avec Scala</title>
		<link>https://thecoderwriter.wordpress.com/2013/02/25/demarrer-avec-scala/</link>
		<pubDate>Mon, 25 Feb 2013 23:42:48 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/02/25/demarrer-avec-scala/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Récemment, j’ai décidé de me lancer dans l’apprentissage d’un nouveau langage. <br />Je me suis orienté vers le langage Scala. <br /><br />Démarrer avec un nouveau langage n’est pas toujours facile. Même si les concepts peuvent être proches entre les différents langages de programmation, il existe des spécificités qui font qu’un langage est agréable à utiliser. <br /><br />C’est d’ailleurs aussi le coté un peu frustrant de démarrer d’une page blanche. Il faut tout réapprendre.<br />Donc pour bien démarrer, selon moi, deux choses sont essentielles : <br />- Avoir de bonnes ressources documentaires,<br />- Avoir un objectif de réalisation.<br /><br />Les ressources sont essentielles car elles permettent de pouvoir avancer sans trop buter sur les <i>mots</i> du langage.<br /><br />L’objectif permet de travailler avec un cas d’application concret. Il permet d’utiliser ce nouvel outil avec de vraies contraintes et de vrais besoins. C’est toujours plus intéressant que de taper des commandes à l’enfilade dans la console.<br /><br />Pour ce qui est de l’objectif, j’ai trouvé !<br />J’ai développé un petit site basé sur Play! permettant d’obtenir quelques stats sur la page google+ <i>Java - ʕ๏̮๏ʔ</i>. A l’époque, je l’avais codé en Java, en m’aidant de Guava. L’idée sera de le réécrire complètement toujours sur une base Play! mais en Scala.<br /><br />Concernant les ressources, j’ai trouvé quelques pointeurs intéressants que je vais partager avec vous... :)<br /><br />Le premier lien, même si c’est assez évident, est la <i>Scala Doc</i> officielle : <br /><a href="http://www.scala-lang.org/api/current/index.html">http://www.scala-lang.org/api/current/index.html</a><br /><br />Le second lien est un document, traduit en français, présentant le langage au travers de différents exemples. La version originale a été écrite par <b>Martin Odersky</b> : <br /><a href="http://www.scala-lang.org/docu/files/ScalaByExample-fr_FR.pdf">http://www.scala-lang.org/docu/files/ScalaByExample-fr_FR.pdf</a><br /><br />Le troisième lien est un lien vers le site officiel agrégeant la documentation Scala : <br /><a href="http://docs.scala-lang.org/index.html">http://docs.scala-lang.org/index.html</a><br /><br />Le quatrième lien est un article très complet (en français) sur le langage : <br /><a href="http://www.siteduzero.com/informatique/tutoriels/apprenez-la-programmation-avec-scala">http://www.siteduzero.com/informatique/tutoriels/apprenez-la-programmation-avec-scala</a><br /><br />Et enfin, le cinquième et dernier lien pointant vers un cheatsheets Scala : <br /><a href="http://docs.scala-lang.org/cheatsheets/">http://docs.scala-lang.org/cheatsheets/</a><br /><br />En tout cas, les quelques heures que j’ai pu consacrer à ce langage ont été un pur bonheur, autant au niveau de la syntaxe très concise que de l’approche fonctionnelle (entre autres).<br />Aussi, les différents contextes d’utilisation (application, console, scripting) offrent beaucoup de possibilités dans la vie quotidienne d’un développeur.<br /><br />J&#039;espère que ces pointeurs vous permettront d’aborder le langage dans de bonnes conditions !<br /> La liste étant loin d’être exhaustive, n’hésitez pas à la compléter au travers des commentaires.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23scala">#scala</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23ressource">#ressource</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23doc">#doc</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date>2013-02-25 23:42:48</wp:post_date>
		<wp:post_date_gmt>2013-02-25 23:42:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>demarrer-avec-scala</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="doc"><![CDATA[Doc]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="ressource"><![CDATA[Ressource]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java au (futur) quotidien : Stream</title>
		<link>https://thecoderwriter.wordpress.com/2013/02/18/java-au-futur-quotidien-stream/</link>
		<pubDate>Mon, 18 Feb 2013 22:06:51 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/02/18/java-au-futur-quotidien-stream/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />La nouvelle version du JDK vient avec son lot de nouveautés.<br />Une des plus importantes est l&#039;ajout des lambda expressions. <br /><br />Des évolutions significatives ont aussi été introduites autour de l&#039;API Collections.<br />Ces évolutions fournissent une approche fonctionnelle de la manipulation d&#039;ensembles de données. <br /><br />La question de la refonte de l&#039;API Collections au sein du JDK s&#039;est posée au moment de la version 8 de java.<br />Une des solutions aurait été de la refondre intégralement. <br />Une autre option a été choisie en enrichissant les interfaces Collection, List, Iterable de nouvelles méthodes et en ajoutant de nouvelles interfaces comme l&#039;interface <b>Stream</b>.<br /><br />Un point important est le choix d&#039;internaliser le mécanisme d&#039;itération sur un ensemble de données.<br />Aujourd&#039;hui, pour itérer sur une collection, nous n&#039;avons pas d&#039;autres choix que de le faire de manière séquentielle et selon l&#039;ordre défini par la collection à parcourir.<br />En règle générale, c&#039;est à l&#039;aide d&#039;une structure forEach, comme celle présentée ci-dessous, que l&#039;on parcourt une collection : <br /><br />	<i>for(Object o : objects){</i><br />		<i>/</i><b><i>do something</i></b><i>/</i><br /><i>}</i><br /><br />D&#039;autres alternatives existent à l&#039;aide d&#039;api externe comme <i>Guava</i>, <i>LambdaJ</i> , <i>commons-collections</i><br /><br />Dans la version 8, le mécanisme d&#039;itération a été internalisé. Ci-dessous un exemple de comment serait codé le parcours d&#039;une liste : <br /><br />	<i>objects.stream().forEach(/</i><b><i>do something</i></b><i>/);</i><br /><br />Dans cet exemple, <i>objects</i> est une collection d&#039;objets. Stream() est l&#039;une des méthodes venant enrichir l&#039;API existante.<br /><br />Cette internalisation permet de déléguer la gestion de l&#039;itération à l&#039;API. De cette manière, il est possible de mettre en place des mécanismes permettant d&#039;optimiser ou rationnaliser les traitements. par exemple : <br /><br />	- mise en place de la parallélisation,<br />	- exécution paresseuse de traitement,<br />	- le chainage des appels,<br />	- etc.<br /><br />Du fait de cette internalisation, il est possible de chaîner les traitements que l&#039;on souhaite appliquer à une collection.<br /><br />Soit le use case suivant:<br />Sur une collection de personne, je souhaite appliquer un traitement particulier sur toutes les personnes ayant pour métier pompier. <br /><br />personnes.stream().filter(p -&gt; p.metier==POMPIER)<br />				  .forEach(p -&gt; /<b>do something</b>/);	<br /><br />L&#039;exemple est ici très simple, mais l&#039;on peut faire des choses plus compliquées et ceci de manière très explicite et concise. Vous trouverez dans l&#039;article en lien d&#039;autres exemples.<br /><br />Lors de l&#039;utilisation des lambda expressions, celles-ci sont traduites en instance d&#039;interface à une méthode. Le JDK propose un jeu d&#039;interface utilisé par les expressions lambda, ci-dessous un exemple de ces interfaces : <br /><br />	-Predicate : permet de filtrer selon une condition<br />	-Block : permet d&#039;appliquer un block de code.<br />	-Function : permet de transformer un élément de la liste.<br /><br /><b>Parallélisation</b><br />Cette nouvelle version propose une fonctionnalité intéressante qui permet de se démarquer de l&#039;approche séquentielle que l&#039;on connait bien dans la version actuelle.<br />Cette fonctionnalité est la parallélisation des traitements appliqués sur une collection.<br /><br />De plus, la mise en œuvre est très simple et transparente : <br /><br />	personnes.stream().parallel().filter(p -&gt; p.metier==POMPIER)<br />				  .forEach(p -&gt; /<b>do something</b>/);	<br /><br />Comme nous pouvons le voir sur l&#039;exemple ci-dessus, il suffit d&#039;appeler la méthode <b>parallel()</b> lors du chainage des traitements.<br />Ce mécanisme se base sur le projet fork/join. L&#039;idée est de subdiviser l&#039;ensemble des données en sous-ensembles et de traiter ces sous-ensembles.<br /><br /><b>Gestion des références null</b><br />L&#039;équipe a décidé de ne pas gérer nativement les éléments <b>null</b> d&#039;une collection. Cette gestion est laissée à la main du développeur. <br />Il est vrai qu&#039;avec cette nouvelle syntaxe, il est possible de rapidement les traiter en appliquant une fonction filter() au début du chainage des traitements.<br /><br />Une autre particularité de l&#039;interface Stream est qu&#039;elle définit des ensembles de données non bornées. En effet, une collection standard correspond à un ensemble d&#039;une taille finie.<br />Cette notion est importante et doit être bien gardée à l&#039;esprit.<br /><br />Nous avons fait un tour d&#039;horizon des possibilités qui seront offertes avec Java 8 dans le domaine de la manipulation de collections. Nous avons vu ici les grandes lignes des possibilités offertes par l&#039;interface Stream (couplée aux expressions lambdas).<br /><br />Des perspectives vraiment séduisantes ! <br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23stream">#stream</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23lambda">#lambda</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java8">#java8</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23fonctionnelle">#fonctionnelle</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>281</wp:post_id>
		<wp:post_date>2013-02-18 22:06:51</wp:post_date>
		<wp:post_date_gmt>2013-02-18 22:06:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-au-futur-quotidien-stream</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fonctionnelle"><![CDATA[Fonctionnelle]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="lambda"><![CDATA[Lambda]]></category>
		<category domain="post_tag" nicename="stream"><![CDATA[Stream]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Weak Reference</title>
		<link>https://thecoderwriter.wordpress.com/2013/02/12/weak-reference/</link>
		<pubDate>Tue, 12 Feb 2013 23:30:14 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/02/12/weak-reference/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />En Java la gestion de la mémoire est complètement transparente pour le développeur.<br />En théorie, il n’est pas nécessaire de faire une action particulière pour libérer des objets dont on sait qu’ils ne sont plus référencés.<br /><br />Néanmoins, il existe quelques possibilités (qui relèvent de bonnes ou mauvaises pratiques) pour maîtriser cette gestion de la mémoire.<br /><br />Par exemple, il est possible d’appeler explicitement le garbage collector pour qu’il collecte et nettoie les objets en mémoire.<br /><i>Pour être précis, l&#039;appel au garbage collector pour réalisé ce nettoyage n&#039;est qu&#039;un ordre envoyé, on ne maîtrise pas le moment précis ou les objets seront détruit de manière effective.</i><br />Une autre possibilité demandant une certaine connaissance du fonctionnement de la JVM peut être mise en œuvre. Il s’agit des <b>weak references</b>.<br />Concrètement les weak references décrivent le poids des références entre les objets. Plus la référence est forte (Strong) plus elle empêchera le garbage collector d’agir sur les objets dépendants, en revanche, plus la référence est légère (Phantom), moins elle mettra d’obstacle vis à vis du garbage collector.<br /><br />Il existe 4 types de weak référence (par ordre de force)<br />	<br />- Strong référence (celle que l’on utilise quotidiennement)<br />- Soft référence,<br />- Weak référence,<br />- Phantom référence.<br /><br />Chaque référence listée ci-dessus hérite de la classe <b>Reference</b>.<br /><br />Il est assez rare d’avoir recours à cette gestion de la mémoire. Mais je pense qu’il est important d’avoir cette connaissance dans sa culture générale de développeur.<br /><br />Pour bien comprendre ce mécanisme, l’auteur de l’article, en pièce jointe à ce post, nous donne des cas d’utilisation concrets afin de mieux cerner le sujet.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23weak">#weak</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23reference">#reference</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23gc">#gc</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date>2013-02-12 23:30:14</wp:post_date>
		<wp:post_date_gmt>2013-02-12 23:30:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>weak-reference</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gc"><![CDATA[Gc]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="reference"><![CDATA[Reference]]></category>
		<category domain="post_tag" nicename="weak"><![CDATA[Weak]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java au quotidien épisode 5 : Collection de multi</title>
		<link>https://thecoderwriter.wordpress.com/2013/02/06/java-au-quotidien-episode-5-collection-de-multi/</link>
		<pubDate>Wed, 06 Feb 2013 22:33:59 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/02/06/java-au-quotidien-episode-5-collection-de-multi/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />L’api Guava propose depuis la version 2.0 deux types de collection que l’on ne trouve pas nativement dans le JDK.<br /><br />Il s’agit des interfaces <b>MultiSet</b> et <b>MultiMap</b>.<br /><br />Ces deux types apportent des solutions à des problématiques que l’on peut rencontrer assez couramment dans notre quotidien de développeur. <br /><br /><b>Multiset</b><br /><br />On peut lui ajouter plusieurs éléments (même identiques). Contrairement au Set classique, chaque élément sera référencé dans la collection. <br />Pour l’instant rien d’exceptionnel par rapport à une collection classique. La valeur ajoutée de MultiSet est de fournir des fonctionnalités comme :<br /> - compter le nombre de fois qu’un élément se trouve dans la collection<br />- extraire un sous-ensemble représentant chaque type stocké dans la collection (distinct),<br />- possibilité d’ajouter massivement un nombre d&#039;occurrences d’un type,<br />- etc...<br /><br />Il existe plusieurs implémentions : <br /><br />	- HashMultiset<br />	-TreeMultiset<br />	- LinkedHashMultiset<br />	- ConcurrentHashMultiset<br />	- ImmutableMultiset<br /><br /><b>Multimap</b><br /><br />Ce type permet d&#039;indexer sous une clef une collection d’éléments. Contrairement à la Map classique, ou une clef référence une valeur.<br /><br />Avec les classes du JDK, cette fonctionnalité pourrait être codée de la manière suivante :<br />Map&lt;K, List&lt;V&gt;&gt;<br /><br />L’interface Multimap fournit les fonctionnalités suivantes : <br />	<br />	- ajout d’une valeur associée à une clef<br />	- ajout d’une liste de valeurs associée à une clef<br />	- suppression d’une occurrence associée à une clef<br />	- suppression de tous les éléments associés à une clef, et la clef elle même.<br />	- etc...<br /><br /><br />Nous venons de voir un très bref aperçu des possibilités proposées par ces deux types.<br /><br />Je vous propose de consulter le pointeur attaché à ce post pour approfondir le sujet.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Guava">#Guava</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Collection">#Collection</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23multiset">#multiset</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23multibag">#multibag</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>283</wp:post_id>
		<wp:post_date>2013-02-06 22:33:59</wp:post_date>
		<wp:post_date_gmt>2013-02-06 22:33:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-au-quotidien-episode-5-collection-de-multi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="collection"><![CDATA[Collection]]></category>
		<category domain="post_tag" nicename="guava"><![CDATA[Guava]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="multibag"><![CDATA[Multibag]]></category>
		<category domain="post_tag" nicename="multiset"><![CDATA[Multiset]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jenv</title>
		<link>https://thecoderwriter.wordpress.com/2013/02/04/jenv/</link>
		<pubDate>Mon, 04 Feb 2013 23:15:04 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/02/04/jenv/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Lorsque l’on développe en Java, on peut avoir besoin de gérer plusieurs versions du jdk sur notre machine.<br /><br />Le projet Jenv, créé par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/114898599727948819390">Gildas Cuisinier</a></span>, adresse cette problématique. <br /><br />Il vous permettra de référencer l’ensemble des versions disponibles sur votre machine et de passer de l’une à l’autre au moyen d’une simple commande dans votre shell.<br /><br />L’article, en lien dans ce post, rédigé par l’auteur du projet, explique l’origine du projet et présente un quickstart permettant de mettre rapidement le pied à l’étrier.<br /><br />Bonne lecture!<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23gestion">#gestion</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23version">#version</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23jenv">#jenv</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date>2013-02-04 23:15:04</wp:post_date>
		<wp:post_date_gmt>2013-02-04 23:15:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jenv</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gestion"><![CDATA[Gestion]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jenv"><![CDATA[Jenv]]></category>
		<category domain="post_tag" nicename="version"><![CDATA[Version]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Programmation fonctionnelle</title>
		<link>https://thecoderwriter.wordpress.com/2013/01/28/programmation-fonctionnelle/</link>
		<pubDate>Mon, 28 Jan 2013 20:47:43 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/01/28/programmation-fonctionnelle/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Connaissez-vous la programmation fonctionnelle? <br />Bien que ce type de programmation soit vieux comme le ‘monde’, depuis quelques temps la programmation fonctionnelle revient sur le devant de la scène.<br /><br />Personnellement, j’ai découvert ce type d’approche sur les bancs du CNAM en travaillant avec le language <b>caml</b>  (<a href="http://caml.inria.fr/">http://caml.inria.fr/</a>).  <br />Ce style de programmation souvent considéré comme un peu marginal et réservé au monde scientifique et universitaire, on le retrouve de plus en plus dans le monde de l’industrie sous la forme de langages comme Scala, Groovy, Haskel, etc..<br /><br />Java (au sens large) se met aussi à la page avec les APIs comme Guava ou Lamdaj.<br />On notera (et ce n’est plus une grande nouvelle) que la prochaine version du JDK intégrera les Lambdas.<br /><br />Quand bien même ce style et ce terme sont très en vogue, mais est-ce que tout le monde en connaît vraiment les concepts.<br /><br />L’article, en lien dans ce post, propose une introduction claire et concise à ce style de programmation. Cet article est pour : <br /><br />	-Ceux qui ne connaissent pas et qui veulent découvrir,<br />	-Ceux qui ont une idée, mais aimeraient être sur,<br />	-Ceux qui ont su, mais qui ont oublié.<br />	-Ceux qui veulent briller en société avec des concepts :)<br /><br />Plus sérieusement, cet article est très intéressant et mérite toute votre attention !<br /><br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23programmation">#programmation</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23fonctionnelle">#fonctionnelle</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>285</wp:post_id>
		<wp:post_date>2013-01-28 20:47:43</wp:post_date>
		<wp:post_date_gmt>2013-01-28 20:47:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>programmation-fonctionnelle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fonctionnelle"><![CDATA[Fonctionnelle]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="programmation"><![CDATA[Programmation]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_cc99364468cd6d3ac788830f4272cd32</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Les lambdas expliquées par des Ninjas !</title>
		<link>https://thecoderwriter.wordpress.com/2013/01/21/les-lambdas-expliquees-par-des-ninjas/</link>
		<pubDate>Mon, 21 Jan 2013 20:08:05 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/01/21/les-lambdas-expliquees-par-des-ninjas/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />L’équipe Ninja Squad va fêter sa demi année d’existence. A cette occasion, l’équipe lance un évènement le mardi 12 février à 19h à la Cordée de Charpennes, à Lyon.<br /><br />L’idée de cet évènement est d’organiser la présentation d’un sujet suivi d’un workshop afin d’approfondir.<br /><br />Le sujet choisi : Les lambda du futur JDK8.<br /><br />Cette soirée est l’occasion de partager un bon moment entre passionnés et aussi d’en apprendre un peu plus sur le sujet.<br /><br />Vous trouverez plus de détails sur le lien joint au post.<br /><br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23lambda">#lambda</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23ninjasquad">#ninjasquad</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23conference">#conference</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>286</wp:post_id>
		<wp:post_date>2013-01-21 20:08:05</wp:post_date>
		<wp:post_date_gmt>2013-01-21 20:08:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-lambdas-expliquees-par-des-ninjas</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="conference"><![CDATA[Conference]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="lambda"><![CDATA[Lambda]]></category>
		<category domain="post_tag" nicename="ninjasquad"><![CDATA[Ninjasquad]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Code Story 2013</title>
		<link>https://thecoderwriter.wordpress.com/2013/01/09/code-story-2013/</link>
		<pubDate>Wed, 09 Jan 2013 22:42:51 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/01/09/code-story-2013/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Le challenge Code Story est organisé par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/100241047121875700803">David Gageot</a></span> et <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/104208514956133087454">Jean-Laurent de Morlhon</a></span>.<br /><br />L’idée du concours est de coder en live une application lors de la conférence Devoxx France.<br /><br />Ce concours se déroule en plusieurs étapes.<br />Il y a d’abord une première étape de présélection, ensuite une deuxième phase a lieu courant février. A la fin de celle-ci, David et Jean-Laurent choisiront le binôme qu’ils affronteront lors de la grande finale à Devoxx France 2013.<br /><br />Donc si vous voulez participer, lancez vous sur le défi de la pré-sélection... :)<br /><br />Vous trouverez tous les détails dans le lien attaché au post.<br /><br />A noter également que pour l’étape des premières sélections, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/117387060365568560076">nicolas de loof</a></span> met à disposition un environnement CloudBees pour héberger les projets participants.<br />Tous les détails sur le lien suivant : <a href="http://blog.loof.fr/2013/01/codestory.html">http://blog.loof.fr/2013/01/codestory.html</a><br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23devoxxFR">#devoxxFR</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23devoxxFR13">#devoxxFR13</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23code">#code</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23story">#story</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date>2013-01-09 22:42:51</wp:post_date>
		<wp:post_date_gmt>2013-01-09 22:42:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>code-story-2013</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="code"><![CDATA[Code]]></category>
		<category domain="post_tag" nicename="devoxxfr"><![CDATA[Devoxxfr]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="story"><![CDATA[Story]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e3e750765428884c4cabf5347a712f37</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java vs Scala : Question de performance</title>
		<link>https://thecoderwriter.wordpress.com/2013/11/14/java-vs-scala-question-de-performance/</link>
		<pubDate>Thu, 14 Nov 2013 23:19:00 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/11/14/java-vs-scala-question-de-performance/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Java et Scala sont souvent mis en concurrence sur un tas de sujets.<br />On compare leur syntaxe, leurs paradigmes et aussi leur performance...<br />Justement parlons de cette course contre la montre qui se joue entre ces deux langages. L&#039;article en lien dans ce poste fait justement un état des lieux concernant cette fameuse question.<br /><br />L&#039;auteur nous explique que la question posée n&#039;est pas la bonne.<br />En effet, quel que soit le langage utilisé et tournant sur la JVM, in fine le code exécuté sera du bytecode.<br /><br />Lors du benchmark mis en œuvre, on constate que Scala est sensiblement plus rapide que Java sur l&#039;implémentation d&#039;un quicksort.<br />Petite particularité dans ce use case, c&#039;est le style adopté pour l&#039;implémentation en Scala, c&#039;est-à-dire le style <i>impératif</i>.<br /><br />L&#039;avantage obtenu par Scala est lié à des optimisations (tailrec) mis en place par le compilateur du langage.<br /><br />En revanche, lorsque l&#039;on adopte un style fonctionnel et plus concis, les performances résultantes deviennent catastrophiques.<br /><br />Ce petit résumé vous donne un aperçu du propos contenu dans l&#039;article. Je vous laisse lire l&#039;article original pour compléter cette synthèse.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23scala">#scala</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23performance">#performance</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23question">#question</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>248</wp:post_id>
		<wp:post_date>2013-11-14 23:19:00</wp:post_date>
		<wp:post_date_gmt>2013-11-14 23:19:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-vs-scala-question-de-performance</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="performance"><![CDATA[Performance]]></category>
		<category domain="post_tag" nicename="question"><![CDATA[Question]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Parlons sans détour, Parlons cache</title>
		<link>https://thecoderwriter.wordpress.com/2013/11/11/parlons-sans-detour-parlons-cache/</link>
		<pubDate>Mon, 11 Nov 2013 14:58:00 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/11/11/parlons-sans-detour-parlons-cache/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Lors d&#039;un précédent article je vous avais parlé d&#039;un podcast technique : <i>Une tasse de thé : Quelques minutes de technique logicielle</i> animé par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/116964726184265306390">Eric Lefevre-Ardant</a></span> <br />Pour rappel, le principe de ce podcast est d&#039;aborder des sujets techniques de manière assez synthétique avec un invité expert sur le sujet.<br /><br />Dernièrement, le 27 octobre 2013, un épisode sur <i>les patterns du cache</i> a été publié. L&#039;invité est <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/108637836287903721076">Mathilde Rigabert Lemée</a></span>. Elle travaille actuellement chez Terracotta L&#039;enregistrement a eu lieu pendant la conférence <b>SoftShake</b>.<br />Les problématiques de cache sont transverses à toutes les plateformes.<br /><br />Mathilde présente les différentes stratégies de cache que l&#039;on peut mettre en oeuvre sur une application, comme :<br />- Cache Aside<br />- Cache as system of Record,<br />- TTL,<br />- TTR.<br /><br />Les premières stratégies sont expliquées de manière assez générale. En revanche, elle donne une explication plus détaillée sur les stratégies de type : <br />- Read-Through,<br />- Write-Through,<br />- Write-Behind,<br />- Refresh-Ahead.<br /><br />Elle donne aussi des conseils sur les choix de mise en oeuvre de la bonne stratégie. Elle explique qu&#039;il n&#039;y a pas de stratégie permettant de répondre à toutes les problématiques. <br />Comme tous les outils, chacun répond à une problématique précise. <br /><br />Le format des épisodes est assez court néanmoins il donne une bonne vision et les connaissances minimales permettant d&#039;approfondir la question sur les problématiques de cache.<br /><br />Sur le lien attaché au post, vous retrouverez tous les pointeurs permettant d&#039;approfondir les différentes stratégies, ainsi que l&#039;épisode au format MP3.<br /><br />Bonne écoute! <br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Java">#Java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23cache">#cache</a> 	 <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23pattern">#pattern</a> <br /> ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date>2013-11-11 14:58:00</wp:post_date>
		<wp:post_date_gmt>2013-11-11 14:58:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>parlons-sans-detour-parlons-cache</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cache"><![CDATA[Cache]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="pattern"><![CDATA[Pattern]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IntelliJ 13</title>
		<link>https://thecoderwriter.wordpress.com/2013/11/02/intellij-13/</link>
		<pubDate>Sat, 02 Nov 2013 22:15:12 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/11/02/intellij-13/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Plus qu&#039;un mois avant la sortie de la nouvelle version d&#039;Intellij.<br /><br />Il était possible de la tester cette année en mode <i>early preview access</i>.<br /><br />Pour ceux qui n&#039;auraient jamais utilisé cet outil, je ne peux que vous recommander de faire l&#039;essai. Sans vouloir reprendre un vieil adage : <i>&quot;l&#039;essayer, c&#039;est l&#039;adopter !&quot;</i> .<br /><br />Comme à chaque nouvelle release, les nouveautés vont impacter plusieurs parties de l&#039;IDE. Sur le lien attaché au post, vous trouverez une liste quasi exhaustive des nouvelles fonctionnalités. <br /><br />Parmi les nouveautés, celle que l&#039;on remarquera est l&#039;intégration d&#039;Android Studio. En effet, <b>Google</b> a désigné officiellement l&#039;IDE de Jetbrain comme l&#039;outil de référence pour le développement sous Android. Ils ont décidé d&#039;investir dans ce sens. <br />Auparavant, Eclipse était la plateforme de référence.<br /> <br />Google a également choisi de proposer le même niveau de fonctionnalité entre la version communautaire et ultimate.<br />Pour l&#039;avoir testé sur la version <i>early preview access</i>, Android studio est vraiment très bien.<br /><br />Je vous propose une petite synthèse des fonctionnalités les plus intéressantes, selon moi.<br /><br /><br />- Nouveau mode destiné aux présentations en public<br />- Une nouvelle interface de ligne de commande permettant d&#039;exécuter des commandes SSH<br />- Possibilité d&#039;affiner les scopes de recherche comme les chaines de caractères ou les commentaires.<br />- Un nouvel outil de recherche permettant de rechercher dans tous les scopes confondus.<br />- Intégration d&#039;un grand nombre d&#039;outils liés au Web.<br />- Support complet de JavaEE 7<br /><br />En suivant le lien, vous trouverez tous les détails.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23idea">#idea</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23intellij">#intellij</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23v13">#v13</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>250</wp:post_id>
		<wp:post_date>2013-11-02 22:15:12</wp:post_date>
		<wp:post_date_gmt>2013-11-02 22:15:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>intellij-13</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="idea"><![CDATA[Idea]]></category>
		<category domain="post_tag" nicename="intellij"><![CDATA[Intellij]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="v"><![CDATA[V]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>La plateforme Spring IO</title>
		<link>https://thecoderwriter.wordpress.com/2013/10/28/la-plateforme-spring-io/</link>
		<pubDate>Mon, 28 Oct 2013 23:53:32 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/10/28/la-plateforme-spring-io/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Annoncée à SpringOne, la plateforme Spring IO est lancée. <br /><br />L&#039;objectif de cette plateforme est de fournir aux développeurs un socle technique solide permettant de bâtir des applications modernes. <br />La plateforme Spring IO se divise en deux parties distinctes : <br />- Spring fondation<br />- Sprint Domaine-spécifique runtime environnement (DSRs)<br /><br />Ce socle de fondation (IO fondation) contient les différents modules techniques que l&#039;on connaît bien chez Spring. En voici une liste (non exaustive) : <br /><br />- Spring Data,<br />- Spring Intégration,<br />- Spring Batch,<br />- Spring Social,<br />- Spring WebService,<br />- etc.<br /><br />Au-dessus vient la couche d&#039;exécution (IO Execution) composée des trois modules suivants : <br /><br />- Spring XD<br />- Spring Boot<br />- Grails.<br /><br />Le module qui propose un réel intérêt dans la vie de tous les jours pour un développeur Spring, c&#039;est <b>Spring Boot</b>.<br />Il permet de démarrer (très) rapidement et simplement un projet. La simplification vient du fait qu&#039;il gère à notre place la cohérence des versions de dépendences utilisées pour le projet.<br /><br />Pour mieux comprendre la puissance fournie par l&#039;outil, je vous propose un exemple mettant en oeuvre un serveur HTTP répondant le traditionnel <i>&#039;Hello world&#039;</i> .<br /><br /><i>Même si l&#039;exemple est simple, il met en avant la simplicité proposée par la plateforme. L&#039;exemple est tiré du site de référence.</i><br /><br />Nous avons besoin d&#039;un pom.xml et d&#039;un fichier java possédant une méthode main ainsi que certaines annotations.<br /><br /> *pom.xml :*<br /> <br />   &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br />&lt;project xmlns=&quot;<a href="http://maven.apache.org/POM/4.0.0">http://maven.apache.org/POM/4.0.0</a>&quot; xmlns:xsi=&quot;<a href="http://www.w3.org/2001/XMLSchema-instance">http://www.w3.org/2001/XMLSchema-instance</a>&quot;<br />	xsi:schemaLocation=&quot;<a href="http://maven.apache.org/POM/4.0.0">http://maven.apache.org/POM/4.0.0</a> <a href="http://maven.apache.org/xsd/maven-4.0.0.xsd">http://maven.apache.org/xsd/maven-4.0.0.xsd</a>&quot;&gt;<br />	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br /><br />	&lt;groupId&gt;com.example&lt;/groupId&gt;<br />	&lt;artifactId&gt;myproject&lt;/artifactId&gt;<br />	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;<br /><br />	&lt;!-- Inherit defaults from Spring Boot --&gt;<br />	&lt;parent&gt;<br />		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br />		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br />		&lt;version&gt;0.5.0.M4&lt;/version&gt;<br />	&lt;/parent&gt;<br /><br />	&lt;!-- Add typical dependencies for a web application --&gt;<br />	&lt;dependencies&gt;<br />		&lt;dependency&gt;<br />			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br />			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br />		&lt;/dependency&gt;<br />	&lt;/dependencies&gt;<br /><br />	&lt;!-- Package as an executable JAR --&gt;<br />	&lt;build&gt;<br />		&lt;plugins&gt;<br />			&lt;plugin&gt;<br />				&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br />				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br />			&lt;/plugin&gt;<br />		&lt;/plugins&gt;<br />	&lt;/build&gt;<br /><br />	&lt;!-- Allow access to Spring milestones and snapshots --&gt;<br />	&lt;!-- (you don&#039;t need this if you are using anything after 0.5.0.M2) --&gt;<br />	&lt;repositories&gt;<br />		&lt;repository&gt;<br />			&lt;id&gt;spring-snapshots&lt;/id&gt;<br />			&lt;url&gt;<a href="http://repo.springsource.org/snapshot">http://repo.springsource.org/snapshot</a>&lt;/url&gt;<br />			&lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;<br />		&lt;/repository&gt;<br />		&lt;repository&gt;<br />			&lt;id&gt;spring-milestones&lt;/id&gt;<br />			&lt;url&gt;<a href="http://repo.springsource.org/milestone">http://repo.springsource.org/milestone</a>&lt;/url&gt;<br />			&lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;<br />		&lt;/repository&gt;<br />	&lt;/repositories&gt;<br />	&lt;pluginRepositories&gt;<br />		&lt;pluginRepository&gt;<br />			&lt;id&gt;spring-snapshots&lt;/id&gt;<br />			&lt;url&gt;<a href="http://repo.springsource.org/snapshot">http://repo.springsource.org/snapshot</a>&lt;/url&gt;<br />		&lt;/pluginRepository&gt;<br />		&lt;pluginRepository&gt;<br />			&lt;id&gt;spring-milestones&lt;/id&gt;<br />			&lt;url&gt;<a href="http://repo.springsource.org/milestone">http://repo.springsource.org/milestone</a>&lt;/url&gt;<br />		&lt;/pluginRepository&gt;<br />	&lt;/pluginRepositories&gt;<br />&lt;/project&gt;<br /><br /><b>Fichier Java</b><br /><br />  import org.springframework.boot.*;<br />import org.springframework.boot.autoconfigure.*;<br />import org.springframework.stereotype.*;<br />import org.springframework.web.bind.annotation.*;<br /><br />@Controller<br />@EnableAutoConfiguration<br />public class MyController {<br /><br />	@RequestMapping(&quot;/&quot;)<br />	@ResponseBody<br />	String home() {<br />		return &quot;Hello World!&quot;;<br />	}<br /><br />	public static void main(String[] args) throws Exception {<br />		SpringApplication.run(MyController.class, args);<br />	}<br />}<br /><br />Une fois le projet <b>Maven</b> créé, il suffit de lancer la commande suivante : <br /><br />  mvn package<br />  <br />pour générer le jar exécutable et ensuite lancer la commande suite : <br /><br />  java -jar target/myproject-0.0.1-SNAPSHOT.jar<br />  <br />pour lancer notre serveur. Une fois le serveur lancé, aller dans votre browser préféré et taper l&#039;adresse suivante : <br /><br />  <a href="http://localhost:8080/">http://localhost:8080/</a><br /><br />Vous devriez voir le résultat suivant dans votre navigateur: <br /><br />  Hello world!.<br />  <br /><br />Concrètement, ce (petit) projet s&#039;appuie sur le module <b>Spring MVC</b><br />On peut remarquer que dans le descripteur maven on ne référence pas explicite la version du module utilisé. Celle-ci est définie par le pom parent. <br /><br />On s&#039;apercoit également, au travers de cet exemple, que très simplement nous avons pu exploiter la puissance de spring sans écrire une seule ligne de configuration xml. <br /><br />En effet, l&#039;ensemble de la plateforme se base sur le principe de <b>convention par-dessus la configuration</b>. Cela veut dire que si l&#039;on respecte les conventions adoptées par l&#039;outil, alors un certain de nombre de choses est pris en charge automatique.<br /><br />Aujourd&#039;hui la plateforme n&#039;en est pas encore à une version majeur, néanmoins, celle-ci est déjà largement opérationnelle.<br /><br />Sur le site du projet, on peut trouver une multitude de <i>&#039;getting started&#039;</i> se basant sur plusieurs scénarii différents. A partir de ces projets et selon nos besoins on peut mettre en place un projet en <i>&#039;2 temps, 3 mouvements&#039;</i>.<br /><br />Je ne vous ai présenté qu&#039;un survol assez général, je vous recommande le site de référence. Il est très bien fait et permet une prise en main de l&#039;outil très facilement.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> #<a href="http://spring.io">spring.io</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23springBoot">#springBoot</a><br /> ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2013-10-28 23:53:32</wp:post_date>
		<wp:post_date_gmt>2013-10-28 23:53:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>la-plateforme-spring-io</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="springboot"><![CDATA[SpringBoot]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jongo</title>
		<link>https://thecoderwriter.wordpress.com/2013/10/21/jongo/</link>
		<pubDate>Mon, 21 Oct 2013 20:54:18 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/10/21/jongo/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Dernièrement je suis allé à la conférence <i>Codeur en Seine</i>. <i>&quot;Juste en passant, c&#039;est une très bonne conférence je vous la recommande.&quot;</i><br /><br />J&#039;ai assisté à un talk sur MongoDb donné par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/105175156939655748633">Katia Aresti</a></span> <br />Le principe était de présenter à grosses mailles l&#039;outil et de faire un retour d&#039;expérience d&#039;un projet de la vraie vie.<br />Une présentation très intéressante.<br /><br />Durant la présentation, Katia a parlé du projet <b>Jongo</b>. C&#039;est un projet qui a pour objectif de développer un driver Java pour MongoDB.<br /><br />Actuellement, il existe un driver nommé Morphia qui se base sur une syntaxe à la JPA. Étant donné la nature de la base, il est vrai que l&#039;approche JPA n&#039;est finalement pas très adaptée.<br /><br />Il existe déjà un driver Java proposé par l&#039;éditeur de MongoDB. Globalement, le driver est bien, mais la syntaxe n&#039;est pas toujours intuitive et risque de perdre le développeur à l&#039;aise dans la console.<br /><br />Et il y a Jongo. <br />Jongo vient combler un manque dans l&#039;écosystème : celui de fournir une api permettant d&#039;écrire des requêtes de la même manière que celle utilisée dans la console.<br /><br />On peut quasiment copier les requêtes rédigées dans la console et les coller dans notre code Java : <br /><br /><b>Dans la console :</b><br /><i>db.friends.find({age: {$gt: 18}})</i><br /><br /><b>Dans le code Java</b><br /><i>friends.find(&quot;{age: {$gt: 18}}&quot;).as(Friend.class)</i><br /><br />Et pour vraiment voir l&#039;avantage, ci-dessous la même requête redigée avec le driver Java :<br /><i>friends.find(new BasicDBObject(&quot;age&quot;,new BasicDBObject(&quot;$gt&quot;,18)))</i><br /><br /><i>(les exemples ci-dessus sont tirés du site du projet)</i><br /><br />La documentation du projet est très claire et pragmatique, ce qui permet un démarrage rapide avec l&#039;API.<br /><br />Je vous invite à jeter un coup d’œil sur le site pour vous faire une idée plus précise.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Java">#Java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23jongo">#jongo</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23driver">#driver</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23mongoDB">#mongoDB</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>252</wp:post_id>
		<wp:post_date>2013-10-21 20:54:18</wp:post_date>
		<wp:post_date_gmt>2013-10-21 20:54:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jongo</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="driver"><![CDATA[Driver]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jongo"><![CDATA[Jongo]]></category>
		<category domain="post_tag" nicename="mongodb"><![CDATA[MongoDB]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java ou Scala?</title>
		<link>https://thecoderwriter.wordpress.com/2013/10/08/java-ou-scala/</link>
		<pubDate>Tue, 08 Oct 2013 22:53:40 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/10/08/java-ou-scala/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Bien que cette page traite principalement du langage Java, ce soir je vous propose d&#039;élargir le champ en parlant d&#039;un langage faisant partie de l&#039;écosystème de Java : Scala (Nous restons malgré tout dans la JVM ;) )<br /><br />Je vous propose donc un pointeur vers un article, faisant un état des lieux des idées reçues sur les points différenciateurs entre Java et Scala. <br /><br /><i>Un point à noter, l&#039;article date de mars 2012. Même si celui-ci a été publié il y a plus d&#039;un an, certains points sont toujours d&#039;actualité.</i><br /><br />Cet article tente de garder un regard objectif sur les idées reçues (ou fondées) sur le sujet.<br /><br />L&#039;auteur, +Julio Faerman, aborde un à un les points principaux en comparant les deux langages.<br /><br />Voici les principaux points abordés : <br />- la différence de productivité,<br />- Concision du code,<br />- Complexité du langage,<br />- Gestion de la concurrence,<br />- Extensibilité,<br />- Interopérabilité,<br />- etc...<br /><br />Pour les javaistes puristes en cours de questionnement sur l&#039;apprentissage d&#039;un nouveau langage, l&#039;article en lien de ce post pourra apporter des éléments de réponse.<br /><br /> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>    <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23scala">#scala</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23versus">#versus</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>253</wp:post_id>
		<wp:post_date>2013-10-08 22:53:40</wp:post_date>
		<wp:post_date_gmt>2013-10-08 22:53:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-ou-scala</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="versus"><![CDATA[Versus]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Avatar</title>
		<link>https://thecoderwriter.wordpress.com/2013/10/03/avatar/</link>
		<pubDate>Thu, 03 Oct 2013 22:28:47 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/10/03/avatar/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Lors de la dernière édition de la conférence JavaOne, Oracle annonçait la release du projet open source : <i>Avatar</i><br />C&#039;est lors de l&#039;édition 2011 que le projet avait été annoncé.<br /><br />Aujourd&#039;hui, l&#039;ensemble des applications Web définissent une architecture SPA (Single Page Application). Dans ce type d&#039;application, l&#039;ensemble de la logique est déportée du serveur vers le client, où l&#039;on retrouve l&#039;ensemble des composants modèle, vue et contrôleur. Pour aider à l&#039;implémentation, il existe une multitude de frameworks (Angular.js, Backbone.js, ...)<br /><br />Ce type d&#039;architecture requiert une connaissance avancée de Javascript.<br /><br />L&#039;idée du projet Avatar est de proposer un framework basé, entre autres, sur Javascript <b>côté serveur</b> et HTML5 coté client. <br /><br />C&#039;est-à-dire que toute la <i>stack</i> technique côté serveur est basée sur Javascript (un schéma très clair est disponible ici : <a href="https://avatar.java.net/docs/overview.html">https://avatar.java.net/docs/overview.html</a>). <br />Cette couche a pour objectif de fournir des services basés sur un protocole &#039;standard&#039; (REST et Websoket).<br /><br />La partie cliente sera basée principalement sur HTML5 et propose un découplage net entre la vue et la couche de service.<br />Le framework facilite la conception et la réalisation d&#039;application de type SPA.<br /><b>Un point original</b> : La documentation du projet indique que les développeurs ont seulement besoin de faire des copier/coller à partir d&#039;exemples, et ensuite adapter le code pour bâtir une application.  <br /><br />L&#039;utilisation de Javascript n&#039;est pas là pour remplacer Java, mais plutôt comme une nouvelle possibilité dans les choix d&#039;implémentation côté serveur.<br />Il est naturellement possible d&#039;utiliser conjointement les deux langages (cas d&#039;une ancienne API écrite en Java, par exemple).<br /><br /><b>Les pré requis techniques :</b> <br />- un conteneur compatible avec la spec JavaEE 7, <br />- un runtime Java 8<br /><br />L&#039;interprétation du Javascript côté serveur sera assurée par le runtime issu du projet <b>Nashorn</b>.<br /><br />Le projet est sous licence open source et le code est disponible sur github.<br />La documentation du projet est bien faite et permet une prise en main aisée de l&#039;outil.<br /><br />Avatar permet à Oracle d&#039;intégrer dans son socle technique qu&#039;est la stack JavaEE, la possibilité d&#039;implémenter facilement des applications aux architectures contemporaines.<br /><br />Je me souviens que lors d&#039;un épisode du podcast des castcodeurs, Antonio Goncalvez exprimait le regret de l&#039;absence d&#039;un outil tel que Avatar dans la stack JavaEE... visiblement son vœu a été exaucé. :)<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23javaEE7">#javaEE7</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Avatar">#Avatar</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date>2013-10-03 22:28:47</wp:post_date>
		<wp:post_date_gmt>2013-10-03 22:28:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>avatar</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="avatar"><![CDATA[Avatar]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="javaee"><![CDATA[JavaEE]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Typeof</title>
		<link>https://thecoderwriter.wordpress.com/2013/09/30/typeof/</link>
		<pubDate>Mon, 30 Sep 2013 21:35:52 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/09/30/typeof/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Typeof est l&#039;API qui a été développée avec pour objectif d’éliminer (ou de limiter) l’utilisation de l’opérateur <i>instanceof</i> et du <i>downcasting</i>. <br />Il est bien connu que l’usage de cet opérateur relève d’une mauvaise pratique tout comme le principe de downcasting. <br /><br />Cette API a été développée à l’origine dans le cadre d’un projet afin de limiter l’utilisation des deux éléments décriés ci-dessus.<br />L’auteur, <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/104737943609231749396">Tomasz Nurkiewicz</a></span> , a implémenté cette API sous forme d’un DSL. <br />Les propriétés mises en avant sont :<br /><br />- plus de downcasting explicite,<br />- limitation de l’utilisation de l’opérateur instanceof,<br />- une syntaxe plus claire et facile à utiliser,<br />- utilisation du typage fort de Java,<br />- permet de travailler avec tout type de classe.<br /><br />Voici un exemple de la syntaxe  : <br /><br />int result = whenTypeOf(obj).<br />   is(String.class).thenReturn(String::length).<br />   is(Date.class).thenReturn(d -&gt; (int) d.getTime()).<br />   is(Number.class).thenReturn(Number::intValue).<br />   is(TimeZone.class).thenReturn(tz -&gt; tz.getRawOffset() / 1000).<br />   is(MyType.class).thenReturn(7).<br />   get();<br /><br />Pour les Javaistes/Scalaistes, on retrouve des bribes du <i>pattern matching</i> .<br /><br />Un des avantages du DSL est de prévenir de toute utilisation incorrecte au moment de la compilation (gain de temps). Vous pourrez trouver des exemples sur le lien attaché à ce post ainsi que des détails sur l’implémentation de typeof.<br /><br />Les sources, très légères (peu de classes) sont disponibles sur github.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23instanceOf">#instanceOf</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23DSL">#DSL</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23API">#API</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>255</wp:post_id>
		<wp:post_date>2013-09-30 21:35:52</wp:post_date>
		<wp:post_date_gmt>2013-09-30 21:35:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>typeof</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="post_tag" nicename="dsl"><![CDATA[DSL]]></category>
		<category domain="post_tag" nicename="instanceof"><![CDATA[InstanceOf]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Javolution</title>
		<link>https://thecoderwriter.wordpress.com/2013/09/23/javolution/</link>
		<pubDate>Mon, 23 Sep 2013 21:39:18 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/09/23/javolution/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Certains domaines fonctionnels nécessitent d&#039;avoir du traitement en temps réel, comme le domaine bancaire, le domaine du jeu, l&#039;aviation, etc.<br /><br />On peut retrouver dans tous ces domaines le langage Java. Malheureusement, il souffre de certains maux qui ont un impact directement sur les temps de réponse. <br />Bien entendu, ces problématiques de temps de réponse sont vraiment liés à ces domaines fonctionnels très exigeants.<br /><br />L&#039;origine de ces problèmes est liée en général aux points suivants :<br /><br />- Garbage collector, lorsqu&#039;il <i>&quot;stoppe le monde&quot;</i> ,<br />- des temps de réponse liés au JIT,<br />- l&#039;initialisation des classes,<br />- dans le cadre des collections, le redimensionnement interne.<br />- etc<br /><br /><i>Je le répète, les points soulevés ci-dessus sont critiques dans certains domaines fonctionnels exigeants.</i><br /><br />Face à ces problématiques, IBM et Sun ont développé respectivement <b>IBM Websphere Real Time</b> et <b>Sun Mackinac</b>. Ces deux solutions sont payantes. En face, Jean-Marie Dautelle a développé une librairie gratuite nommée : <b>Javolution</b>.<br /><br />L&#039;objectif de cette librairie est de permettre des temps d&#039;exécution beaucoup plus rapides et prévisibles.<br />Les points suivants vous donnent une idée des possibilités de Javolution. <br /><br />Elle permet :<br /> - d&#039;exploiter plusieurs coeurs sur un processeur.<br /> - de réduire les temps d&#039;exécution à l&#039;aide d&#039;un jeu d&#039;annotations<br /> - l&#039;intégration native avec un écosystème OSGi.<br /> - collections : support de Map-Reduce, parallélisme, views (~Stream dans Java8).<br /> - manipulation des collections.<br /> - etc...<br /> <br /> Cette liste n&#039;est pas exhaustive. L&#039;ensemble des fonctionnalités est décrit dans le lien attaché à ce post.<br /> <br /> Il est intéressant de souligner la légèreté du jar de la librairie : ~400Ko<br />Javolution supporte Maven, et est disponible sur les repositories publiques.<br /><br />L&#039;ayant découvert que très récemment au travers d&#039;une discussion technique, Je n&#039;ai pas eu le temps de la mettre en oeuvre. je vous recommande de parcourir le site ainsi que l&#039;ensemble des liens disponibles sur le site attaché à l&#039;article.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23real">#real</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23time">#time</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23api">#api</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date>2013-09-23 21:39:18</wp:post_date>
		<wp:post_date_gmt>2013-09-23 21:39:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>javolution</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="real"><![CDATA[Real]]></category>
		<category domain="post_tag" nicename="time"><![CDATA[Time]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java8 : JDeps</title>
		<link>https://thecoderwriter.wordpress.com/2013/09/17/java8-jdeps/</link>
		<pubDate>Tue, 17 Sep 2013 22:26:27 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/09/17/java8-jdeps/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Dans la prochaine version du JDK, la version 8, un outil sera présent, appelé JDeps. Il aura pour but de fournir une analyse des dépendances statiques d&#039;un projet.<br /><br />JDeps permet de voir les packages dont dépend la cible analysée (un fichier .class, un répertoire ou une archive .jar)<br /><br />Voici un exemple tiré de lien attaché à ce post : <br /><br />$./bin/jdeps demo/jfc/Notepad/Notepad.jar<br />&lt;unnamed&gt; (demo/jfc/Notepad/Notepad.jar)<br />     -&gt; java.awt<br />     -&gt; java.awt.event<br />     -&gt; java.beans<br />     -&gt; <a href="http://java.io">java.io</a><br />     -&gt; java.lang<br />     -&gt; <a href="http://java.net">java.net</a><br />     -&gt; java.util<br />     -&gt; java.util.logging<br />     -&gt; javax.swing<br />     -&gt; javax.swing.border<br />     -&gt; javax.swing.event<br />     -&gt; javax.swing.text<br />     -&gt; javax.swing.tree<br />     -&gt; javax.swing.undo<br /> <br />Dans cet exemple, JDeps décrit l&#039;ensemble des packages utilisé dans le projet <i>Notepad.jar</i><br /><br />Plusieurs options sont disponibles comme la possibilité de définir la profondeur de la transitivité (--depth).<br /><br />Pour en savoir plus, vous trouverez d&#039;autres exemples en suivant le lien attaché à ce post.<br /><br /> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23dependance">#dependance</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java8">#java8</a>    ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>257</wp:post_id>
		<wp:post_date>2013-09-17 22:26:27</wp:post_date>
		<wp:post_date_gmt>2013-09-17 22:26:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java8-jdeps</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dependance"><![CDATA[Dependance]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mieux comprendre le bytecode de Java</title>
		<link>https://thecoderwriter.wordpress.com/2013/09/09/mieux-comprendre-le-bytecode-de-java/</link>
		<pubDate>Mon, 09 Sep 2013 21:51:08 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/09/09/mieux-comprendre-le-bytecode-de-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/102738685126315917896">Yohan Beschi</a></span>  développeur et expert chez Soat, présentera le <b>24 septembre</b> prochain une soirée autour du bytecode de Java.<br /><br />Cette soirée permettra de répondre aux questions suivantes : <br />- Comment fonctionne le bytecode Java ?<br />- Comment la JVM fonctionne ?<br /><br />Yohann proposera une introduction au fonctionnement de la JVM et s&#039;intéressera aux bases du bytecode de Java. L&#039;approche se fera au travers d&#039;exemples concrets.<br /><br />La soirée se découpera en deux parties : <br />	1- La JVM et le bytecode<br />	2- La structure d&#039;un fichier .class<br /><br />Cet événement est gratuit, il nécessite un niveau intermédiaire pour suivre la soirée dans de bonnes conditions.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23bytecode">#bytecode</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23jvm">#jvm</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>258</wp:post_id>
		<wp:post_date>2013-09-09 21:51:08</wp:post_date>
		<wp:post_date_gmt>2013-09-09 21:51:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mieux-comprendre-le-bytecode-de-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bytecode"><![CDATA[Bytecode]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jvm"><![CDATA[Jvm]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Catch-Exception</title>
		<link>https://thecoderwriter.wordpress.com/2013/09/05/catch-exception/</link>
		<pubDate>Thu, 05 Sep 2013 21:30:21 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/09/05/catch-exception/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Dans les tests unitaires, il existe plusieurs façons de vérifier que le comportement des exceptions répond bien aux attentes.<br /><br /><i>Pour information j&#039;utilise fest-assert pour la gestion des assertions ; même si l&#039;information n&#039;est pas capitale, cela permet de savoir de quoi on parle ;)</i><br /><br />Voici un premier exemple qui présente la manière basique d&#039;effectuer cette vérification : <br /><br /><br />   @Test<br />    public void first_way_to_exception() throws Exception {<br /><br />        //case 1<br />        try {<br />            ms.computeSomething(1, 1);<br />            fail(&quot;should throw an exception!&quot;);<br />        } catch (Exception e) {<br /><br />        }<br /><br />       //case 2<br />        try {<br />            ms.computeSomething(1, 2);<br />        } catch (Exception e) {<br />            fail(&quot;no exception should be threw&quot;);<br />        }<br /><br />    }<br /><br /><br />Dans le cas 1, on va vérifier que le fil d’exécution du test unitaire passe bien dans le block <i>catch</i>, ce qui voudrait dire qu’une exception a bien été levée et correspond au comportement attendu.<br />Si l’invocation de la méthode du service ne lançait pas d’exception alors le test échouerait avec la méthode <i>fail(..)</i> <br /><br />Cette solution très pragmatique et qui fonctionne bien, implique la mise en place de pas mal de lignes de code qui présente peu d’intérêt pour le test unitaire en lui-même.<br /><br />Avec l’évolution du JDK et de JUnit, il est possible d&#039;avoir recours aux annotations. En effet, l&#039;ajout du paramètre <i>expected</i> dans l&#039;annotation @Test permet d&#039;exprimer de manière plus synthétique le fait que le lancement d&#039;une exception est attendu par le test. Voici un exemple d&#039;implémentation : <br /><br />  @Test(expected=OneException.class)<br />   public void second_way_to_exception() throws Exception {<br />        ms.computeSomething(1, 1);<br />   }<br /><br />Cette solution est plus concise, néanmoins elle ne permet pas de manipuler l&#039;exception levée pour, par exemple, analyser le message contenu dans l&#039;exception à l&#039;instar de la première solution.<br /><br />La troisième solution repose sur une librairie nommée <b>catch-exception</b>.<br />Cette librairie permet d&#039;obtenir, en quelque sorte, un mix des deux solutions précédentes.<br />c&#039;est-à-dire que le code écrit restera (très) concis et que cela permettra de faire une analyse fine de l&#039;exception que l&#039;on souhaite traiter. <br />Voici un exemple : <br /><br /> @Test<br /> public void third_way_to_exception() throws Exception {<br />        catchException(ms).computeSomething(1, 1);<br /><br />         assertThat(caughtException())<br />             .isInstanceOf(OneException.class)<br />             .hasMessage(EVERYONE_ARE_EQUALS_TO_1);<br /> }<br />    <br />Cette librairie fournit une manipulation à la <i>Mockito</i> (très expressive). Il est d&#039;ailleurs très facile de comprendre l&#039;exemple.<br />La première ligne du test va encapsuler l&#039;instance de l&#039;objet que l&#039;on souhaite surveiller. Ensuite, on enregistre la méthode que l&#039;on souhaite contrôler.<br /><br />Après, on écrit l&#039;assertion. Dans ce cadre, on a accès à un ensemble d&#039;informations (comme son type, le contenu du message, etc..)<br /><br />Des trois solutions, c&#039;est naturellement la dernière que je retiendrai.<br /><br />Vous trouverez plus de détails dans le lien attaché à ce post.<br /><br />     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23test_unitaire">#test_unitaire</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23exception">#exception</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>259</wp:post_id>
		<wp:post_date>2013-09-05 21:30:21</wp:post_date>
		<wp:post_date_gmt>2013-09-05 21:30:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>catch-exception</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="exception"><![CDATA[Exception]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Podcast : Une tasse de thé</title>
		<link>https://thecoderwriter.wordpress.com/2013/09/02/podcast-une-tasse-de-the/</link>
		<pubDate>Mon, 02 Sep 2013 22:18:25 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/09/02/podcast-une-tasse-de-the/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Un nouveau podcast a vu le jour il y a quelques mois. Il a été créé et est animé par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/116964726184265306390">Eric Lefevre-Ardant</a></span> <br />Ce podcast a pour objectif d&#039;aborder des sujets techniques assez variés (le cloud, java, haskell,...).<br /><br />La durée d&#039;une épisode est limitée à environ 10mn. Cela peut paraitre court néanmoins l&#039;entretien est mené de manière très pragmatique afin de couvrir le sujet sur ses points essentiels. <br /><br />En règle générale, un épisode est basé sur un échange avec un invité. Celui-ci vient présenter un sujet technique précis.<br /><br />Actuellement le rythme des épisodes est d&#039;environ 2 épisodes par mois. <br /> <br />Le premier épisode a été diffusé le 24 avril dernier et aujourd&#039;hui le podcast compte 7 épisodes.<br /><br />Vous pourrez trouver les sujets qui ont été abordés jusqu&#039;à présent en suivant le lien attaché au post. <br /><br />La diversité des sujets fait que tout le monde peut y trouver son compte. Le format très court est intéressant car en un temps réduit, il est possible de se faire une idée sur un sujet.<br /><br />Les épisodes de ce podcast sont disponibles sur l&#039;ensemble des plateforme habituelles.<br /><br />Au lieu de ne boire que du café à longueur de journée, tentez une tasse de thé! ;)<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23podcast">#podcast</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2013-09-02 22:18:25</wp:post_date>
		<wp:post_date_gmt>2013-09-02 22:18:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>podcast-une-tasse-de-the</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="podcast"><![CDATA[Podcast]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IntelliJ : Folding</title>
		<link>https://thecoderwriter.wordpress.com/2013/07/01/intellij-folding/</link>
		<pubDate>Mon, 01 Jul 2013 21:46:25 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/07/01/intellij-folding/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />L&#039;article de ce soir vous propose un pointeur sur un court article présentant une fonctionnalité intéressante du célèbre IDE Java édité par JetBrain.<br /><br />L&#039;article, hébergé sur le confluence de l&#039;éditeur décrit la fonctionnalité de <i>folding</i> . Cette fonctionnalité a pour objectif de clarifier le code. En effet, lorsque nous codons dans notre langage favori, certains détails peuvent venir polluer la clarté du code.<br /><br />L&#039;article liste les différents cas ou l&#039;IDE intervient pour aider à la lecture du code.<br /><br />Pour mieux comprendre ce qu&#039;est le folding, voici un exemple présentant le cas des générics.<br /><br />Lorsque nous écrivons la ligne suivante :<br /><br /><i>ListMyClass&gt; l = new ArrayListMyClass&gt;();</i><br /><br />Le code ci-dessus présente de l&#039;information redondante : <b>My Classe&gt;</b>, qui est indiqué 2 fois. Cette information en double peut nuire à la lecture.<br /><br />La fonctionnalité de folding va transformer la ligne précédente de la façon suivante :<br /><br /><i>ListMyClass&gt; l = new Array List ~&gt;();</i><br /><br />Ce qui améliore la lisibilité du code. Cet exemple n&#039;est peut-être pas très représentatif de la pollution visuelle générée, mais imaginer une classe plus complexe avec beaucoup plus de code...<br /><br />Vous trouverez dans l&#039;article d&#039;autres cas ou le folding intervient.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23ide">#ide</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23idea">#idea</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23folding">#folding</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>261</wp:post_id>
		<wp:post_date>2013-07-01 21:46:25</wp:post_date>
		<wp:post_date_gmt>2013-07-01 21:46:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>intellij-folding</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="folding"><![CDATA[Folding]]></category>
		<category domain="post_tag" nicename="ide"><![CDATA[Ide]]></category>
		<category domain="post_tag" nicename="idea"><![CDATA[Idea]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Les vrais développeurs Java : où sont-ils ?</title>
		<link>https://thecoderwriter.wordpress.com/2013/06/24/les-vrais-developpeurs-java-ou-sont-ils/</link>
		<pubDate>Mon, 24 Jun 2013 21:23:35 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/06/24/les-vrais-developpeurs-java-ou-sont-ils/</guid>
		<description></description>
		<content:encoded><![CDATA[<br /><br />Voici un article intéressant faisant état des déboires rencontrés d&#039;une session de recrutement de développeurs Java.<br />L&#039;auteur de l&#039;article nous explique son désappointement lorsqu&#039;il voit arriver des CVs mentionnant une multitude de technos et que les candidats associés n&#039;en connaissent réellement aucun.<br /><br />D&#039;autre part, il constate également les effets de l&#039;endoctrinement des frameworks (tel que spring, hibernate, etc.) sur les développeurs (Java).<br /><br />Ce constat amène l&#039;auteur à se poser la question de la pertinence de ces profils connaissant la manière de faire discuter un conteneur spring avec hibernate, mais ne sachant pas écrire une requête SQL (c&#039;est un exemple parmi tant d&#039;autres), ni traiter une requête http dans un conteneur de servlet.<br /><br />L&#039;article peut faire sourire, mais je trouve que le fond est intéressant. Il met en avant le problème de certains profils qui n&#039;ont appris leur métier qu&#039;au travers des frameworks et qui n&#039;ont jamais regardé comment tout ça fonctionnait.<br /><br />Ce point de vue rejoint un conseil que je donne toujours à quelqu&#039;un qui débute en Java et qui me demande quel est le meilleur IDE pour débuter en Java, ce à quoi je réponds : la console.<br />N&#039;hésitez pas à venir partager votre point de vue dans les commentaires de ce post !<br /><br /> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>     <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23profil">#profil</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23recrutement">#recrutement</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date>2013-06-24 21:23:35</wp:post_date>
		<wp:post_date_gmt>2013-06-24 21:23:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>les-vrais-developpeurs-java-ou-sont-ils</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="profil"><![CDATA[Profil]]></category>
		<category domain="post_tag" nicename="recrutement"><![CDATA[Recrutement]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mémento Java</title>
		<link>https://thecoderwriter.wordpress.com/2013/06/17/memento-java/</link>
		<pubDate>Mon, 17 Jun 2013 19:20:44 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/06/17/memento-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Ce post s&#039;adresse à tous les javaistes, qu&#039;ils soient seniors ou débutants, tout le monde y trouvera son compte :)<br />Ce document recense l&#039;ensemble des mots-clefs réservés du langage Java.<br /><br />L&#039;auteur fournit une explication et un exemple pour chaque mot-clef.<br /><br />En plus de la version électronique disponible en ligne, il est possible de télécharger une version imprimable.<br /><br />Sur le site les mots-clefs sont répertoriés par ordre alphabétique ou par catégorie.<br />Même si ce document n&#039;est pas une révolution, je pense qu&#039;il a sa place dans une boîte à outils de javaiste débutant (voire confirmé).<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23memento">#memento</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23keyword">#keyword</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date>2013-06-17 19:20:44</wp:post_date>
		<wp:post_date_gmt>2013-06-17 19:20:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>memento-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="keyword"><![CDATA[Keyword]]></category>
		<category domain="post_tag" nicename="memento"><![CDATA[Memento]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Droidcon Paris</title>
		<link>https://thecoderwriter.wordpress.com/2013/06/12/droidcon-paris/</link>
		<pubDate>Wed, 12 Jun 2013 19:34:28 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/06/12/droidcon-paris/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le Droidcon se tiendra les 17 et 18 juin prochains pour la première édition parisienne.<br /><br />La première conférence Droidcon a vu le jour en 2009. Depuis cette date, la conférence s&#039;est tenue un peu partout sur le globe.<br /><br />Cette conférence est entièrement dédiée à la plateforme Android et son écosystème.<br /><br />Afin de préparer son programme de manière optimale, chaque session est estampillée du niveau requis (beginner, intermediate, etc.), ce qui permet d&#039;éviter les erreurs de casting :)<br />Une particularité intéressante, c&#039;est le démocamp. Il a pour objectif de fournir une tribune pour présenter un projet devant des investisseurs. L&#039;objectif étant d&#039;essayer de donner une autre dimension à son projet (vous trouverez toutes les informations en suivant le lien democamp sur le site du Droidcon).<br /><br />L&#039;entrée est payante, à un prix relativement attractif : 120 euros pour les deux jours. Néanmoins, en cherchant bien sûr le site, il est possible d&#039;obtenir une réduction rendant le prix encore plus attractif !<br /><br />L&#039;évènement se tient à l&#039;adresse suivante :<br />Tapis Rouge 67<br />rue du Faubourg Saint-Martin<br />75010 Paris<br /><br />Les inscriptions sont ouvertes jusqu&#039;au 16 juin, ne tardez pas trop !<br /><br />En suivant le lien ci-dessous, vous trouverez l&#039;agenda des deux jours.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23android">#android</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23conf%C3%A9rence">#conférence</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>264</wp:post_id>
		<wp:post_date>2013-06-12 19:34:28</wp:post_date>
		<wp:post_date_gmt>2013-06-12 19:34:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>droidcon-paris</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="post_tag" nicename="conf"><![CDATA[Conf]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ProGuard</title>
		<link>https://thecoderwriter.wordpress.com/2013/06/05/proguard/</link>
		<pubDate>Wed, 05 Jun 2013 19:33:55 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/06/05/proguard/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />ProGuard est un outil intéressant adressant des problématiques transversent aux projets informatiques réalisés en Java.<br />Cet outil va vous permettre de réaliser, entre autres, les choses suivantes :<br />- création ne code plus compact permettant d’alléger les archives;<br />- Sécuriser le code sensible;<br />- identification du code mort;<br />- Prévérification du code afin de rendre le chargement des classes plus rapide.<br /><br />ProGuard est un outil gratuit. il s’utilise principalement en ligne de commande. Il existe néanmoins des plugins permettant de l’intégrer au cycle de vie de vos projets (Ant, gradle, JME Wireless Toolkit).<br /><br />Par rapport à ses principaux concurrents, ProGuard présente l’avantage d’être plus léger et rapide en plus d’être très efficace (vous pourrez retrouver dans la partie <i>result</i> des chiffres mettant en évidence ses performances)<br /><br />ProGuard fait partie des outils de packaging de Dalvik pour la plateforme Android sous le nom de <b>Dexguard</b>. Il permet notamment dans ce contexte, d’optimiser la taille du .Apk générer ainsi que d’obfusquer le code.<br /><br />Je vous recommande de parcourir le site de référence pour avoir plus de détails.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> # proguard <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23android">#android</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>265</wp:post_id>
		<wp:post_date>2013-06-05 19:33:55</wp:post_date>
		<wp:post_date_gmt>2013-06-05 19:33:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>proguard</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="android"><![CDATA[Android]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Changement chez Oracle</title>
		<link>https://thecoderwriter.wordpress.com/2013/05/27/changement-chez-oracle/</link>
		<pubDate>Mon, 27 May 2013 23:06:30 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/05/27/changement-chez-oracle/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Jusqu&#039;à aujourd&#039;hui le nommage des différentes versions de Java était un peu confus.<br /><br />Dans un souci de clarté et de cohérence Oracle a revu sa copie et propose une nouvelle nomenclature. elle se traduit de la manière suivante :<br /><br />le numéro de la mise à jour mineure sera un multiple de 20, tandis que celui de la mise à jour majeure sera un nombre impair multiple de 5.<br /><br />Tous les détails sont dans le lien attaché à ce Poste.<br /><br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23nommenclature">#nommenclature</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23oracle">#oracle</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date>2013-05-27 23:06:30</wp:post_date>
		<wp:post_date_gmt>2013-05-27 23:06:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>changement-chez-oracle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="nommenclature"><![CDATA[Nommenclature]]></category>
		<category domain="post_tag" nicename="oracle"><![CDATA[Oracle]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ubiquity framework</title>
		<link>https://thecoderwriter.wordpress.com/2013/05/20/ubiquity-framework/</link>
		<pubDate>Mon, 20 May 2013 21:23:40 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/05/20/ubiquity-framework/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br /><br />Ubiquity est un outil permettant d’effectuer des copies d’objets vers d’autres objets. Pour être plus précis, le framework permet, à la manière d’un adaptateur, de transformer un type d’objet en un autre.<br />Il a été développé par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/114670914097704498165">Francois Laroche</a></span> <br /><br />Vous me direz, il existe déjà pas mal d’outils pour effectuer ce genre de tâche. Ce n&#039;est pas faux. Néanmoins, lorsque les autres outils se basent sur la réflexion, Ubiquity présente une autre façon de mettre en oeuvre le mapping.<br /><br />Ubiquity va parser le bytecode et générer à la volée le code nécessaire à la copie d’objet à objet.<br /><br />Cette technique permet de battre des records de performance et de se trouver 20 fois plus rapide que Dozer.<br /><br />Le copieur effectue une copie récursive en profondeur.<br /><br />Pour son fonctionnement, l’outil ne requiert qu’une seule dépendance à l’api ASM.<br />Sa mise en oeuvre se résume en 3 lignes de code :<br /><br />ubiquity ubiquity = new Ubiquity();<br />MyObject1 myObject1 = new MyOject1();<br />// Populate and have fun with your objet<br />MyObject2 myObject2 = ubiquity.Map(myObject1, MyObject 2.class);<br /><br />Face à des cas plus complexes, le framework fournit des points d’entrée permettant de traiter des cas particuliers.<br /><br />Il supporte les collections standard du JDK avec la possibilité de fournir l’implémentation d’un factory ( <b>CollectionFactory</b> ) en cas de traitement spécifique.<br />Ubiquity fournit également un jeu d’annotations utilitaires.<br />Cet outil se focalise sur une tâche, la copie d’objet à objet, et il le fait très bien (et ceci sans étape déclarative).<br /><br />Le code est hébergé sur <b>Github</b>.<br /><br />Vu la simplicité de mise en oeuvre, aucune excuse pour ne pas l’essayer :)<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23bytecode">#bytecode</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23map">#map</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23ubiquity">#ubiquity</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2013-05-20 21:23:40</wp:post_date>
		<wp:post_date_gmt>2013-05-20 21:23:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ubiquity-framework</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bytecode"><![CDATA[Bytecode]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="map"><![CDATA[Map]]></category>
		<category domain="post_tag" nicename="ubiquity"><![CDATA[Ubiquity]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>About</title>
		<link>https://thecoderwriter.wordpress.com/about/</link>
		<pubDate>Sun, 08 Feb 2015 18:35:09 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.wordpress.com/?page_id=1</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://thecoderwriter.files.wordpress.com/2015/02/newprofile.jpg"><img class=" size-medium wp-image-4 aligncenter" src="https://thecoderwriter.files.wordpress.com/2015/02/newprofile.jpg?w=300" alt="Newprofile" width="300" height="300" /></a>

<p style="text-align:center;"><strong>Software Developer Java / Scala / Web </strong>@<strong>Zenika</strong></p>

<p style="text-align:center;"><a title="Linked in" href="https://www.linkedin.com/in/fsznajderman" target="_blank">Linked in</a> - <a title="Github" href="https://github.com/Fabszn" target="_blank">Github</a> - <a href="https://www.instagram.com/fsznajderman/" target="_blank">Instagram</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1</wp:post_id>
		<wp:post_date>2015-02-08 18:35:09</wp:post_date>
		<wp:post_date_gmt>2015-02-08 18:35:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Les objets Calisthenics</title>
		<link>https://thecoderwriter.wordpress.com/?p=2</link>
		<pubDate></pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=2</guid>
		<description></description>
		<content:encoded><![CDATA[#Les objets Calisthenics

##Avant propos
Nous allons parler dans cet article de 9 règles permettant d'améliorer la qualité de votre code. Ces règles décrivent la manière d'écrire des objets (au sens POO) afin de garantir plusieurs choses au niveau de notre code :

* la lisibilité
* la maintenabilité
* la cohérence
* une sémantique plus claire
* ...

A la lecture de cette liste, le concept semble très intéressant. Maintenant, il faut voir qu'elles sont ces règles et quelles contraintes vont elles induires dans notre quotidien (ou pas).
Nous allons énumérer dans cet article ces 9 règles et expliquer les enjeux de chacune d'entres elle et surtout comme les mettre en oeuvre.

* _Only One Level Of Indentation Per Method_
* _Don't Use The ELSE Keyword_
* _Wrap All Primitives And Strings_
* _First Class Collections_
* _One Dot Per Line_
* _Don't Abbreviate_
* _Keep All Entities Small_
* _No Classes With More Than Two Instance Variables_
* _No Getters/Setters/Properties_
*
ressources :
[ 1 ](http://www.cs.helsinki.fi/u/luontola/tdd-2009/ext/ObjectCalisthenics.pdf)
[ 2 ](http://williamdurand.fr/2013/06/03/object-calisthenics/)
[ 3 ](https://schneide.wordpress.com/2013/12/03/object-calisthenics-change-the-way-you-think/)
[ 4 ](http://www.frandieguez.com/blog/2012/12/object-calisthenics-write-better-object-oriented-code/)

## Règle n°1 : _Un seul niveau d'intentation_
## Règle n°2 : _Proscrire le mot clef ELSE_
## Règle n°3 : _Encapsuler toutes les primitives et les Strings_
## Règle n°4 : _Encapsuler tous les types primitifs et les types Strings_
## Règle n°5 : _Encapsuler tous les types primitifs et les types Strings_]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2015-03-08 11:27:29</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Newprofile</title>
		<link>https://thecoderwriter.wordpress.com/about/newprofile/</link>
		<pubDate>Tue, 17 Feb 2015 20:48:41 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/02/newprofile.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2015-02-17 20:48:41</wp:post_date>
		<wp:post_date_gmt>2015-02-17 20:48:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>newprofile</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>1</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/02/newprofile.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/02/newprofile.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:354;s:6:"height";i:354;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/02/newprofile.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Le type Optional - Java 8</title>
		<link>https://thecoderwriter.wordpress.com/2015/01/26/le-type-optional-java-8/</link>
		<pubDate>Mon, 26 Jan 2015 23:37:24 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2015/01/26/le-type-optional-java-8/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />L&#039;objectif de cet article n&#039;est pas de faire une enième présentation du type Optional de Java 8. Personnellement, j&#039;en avais parlé <a href="https://plus.google.com/112440333946538821016/posts/Hf7ZTATQhaJ">https://plus.google.com/112440333946538821016/posts/Hf7ZTATQhaJ</a> (c&#039;était sur le type proposé par Guava) et d&#039;autres blogs avaient abordé le sujet également.<br /><br />Aujourd&#039;hui, l&#039;objectif est de vous parler des points étranges proposés par le type Optional de Java 8.<br />En effet, l&#039;implémentation disponible dans la dernière version du JDK propose des méthodes pour le moins surprenantes. Surtout en regard de ce qui se passe chez les voisins (Guava et Scala par exemple).<br /><br />Bon rentrons dans le vif du sujet...<br /><br />Dans cet article nous aborderons 2 méthodes : <br /><br /><i>Optional.of();</i><br /><i>Optional.OfNullable();</i><br /><br /><br />Les choses étranges ne se limitent pas à ces 2 méthodes, j&#039;aborderai les autres dans d&#039;autres articles.<br /><br /><b>Optional.of et Optional.ofNullable</b><br /><br />Ces deux méthodes servent à construire un Optional à partir d&#039;une référence.<br /><br />Dans le premier cas, il faut fournir obligatoirement une référence valide en paramètre, sinon on se retouve confronté à la fameuse NullpointerException.. <br />Etrange comme comportement, en effet c&#039;est un peu ironique d&#039;être exposé à une NPE en manipulant un type censé nous protéger de ce type d&#039;exception.<br /><br />Dans le deuxième cas, ofNullable(), le contrat est plus souple autorise une référence nulle en paramètre.<br />Selon le cas, la méthode renverra un Optional &#039;VIDE&#039; ou &#039;PLEIN&#039;.<br /><br />Si on prend ces deux méthodes avec un peu de recule, on peut se dire que <br />- of() servirait à gérer le cas où l&#039;on veut encapsuler un objet pour remplir le contrat d&#039;une méthode qui renvoie un Optional.<br />- ofNullable() servirait à encapsuler une référence dont on n&#039;est pas trop sur de sa validité.<br /><br />Avec ce bilan, on est en droit de se poser la question de pourquoi ne pas avoir fait un mixe des deux et proposer une seule méthode : of() qui aurait le comportement de la méthode ofNullable(). C&#039;est-à-dire, si le paramètre est null alors cela renvoie une Optional Vide et si la référence en paramètre n&#039;est pas null alors un Optional Plein et c&#039;est tout.. <br /><br />Ca simplifierait l&#039;API et les problèmes possibles posés par la présence de ces deux méthodes.<br />Si on regarde la librairie Guava, on peut constater que les mêmes méthodes sont proposées (et même comportement). en revanche, dans Scala, par un mécanisme spécifique au langage, on ne trouve qu&#039;un seul point d&#039;entrée pour la construction d&#039;un Optional.<br /><br />Java 8 et Guava -&gt; 0<br />Scala -&gt; 1<br />Scala wins! :)<br /><br />En conclusion, l&#039;introduction du type Optional dans le langage Java est une très bonne chose. Par contre le choix fait pour la construction d&#039;un Optional est un peu étrange. Il implique des erreurs potentielles notamment, et paradoxalement, en générant une NullpointerException.<br /><br />to be continued....﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>235</wp:post_id>
		<wp:post_date>2015-01-26 23:37:24</wp:post_date>
		<wp:post_date_gmt>2015-01-26 23:37:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>le-type-optional-java-8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Paris Jug : soirée Young blood II</title>
		<link>https://thecoderwriter.wordpress.com/2014/11/25/paris-jug-soiree-young-blood-ii/</link>
		<pubDate>Tue, 25 Nov 2014 10:46:46 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2014/11/25/paris-jug-soiree-young-blood-ii/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Le 13 janvier prochain, le Paris Jug organise une soirée un peu particulière. C&#039;est une soirée quickies ouverte à tous. <br /><br />Si vous n&#039;avez jamais présenté en public, que vous avez un sujet qui vous tiens à coeur et que celui-ci peut être présenté en 15minutes alors C&#039;est le moment de se lancer!!<br /><br />Pour postuler, il faut remplir un formulaire que vous trouverez sur le lien attaché à ce post.<br /><br />Il y aura 6 quickies au total. <br />5 seront sélectionnés par un jury entre le 1/12/14 et le 07/012/14 et 1 tiré au sort.<br /><br />Pour préparer sa présentation, il sera possible d&#039;être coaché entre le 14/12/14 et 13/01/15 à raison de 2 ou 3 soirées durant cette période.<br /><br />Durant cette soirée, un vote aura lieu sur l&#039;ensemble des quickies présenté et le gagnant pourra présenter son sujet à Devoxx FR 2015.<br /><br />Cette opportunité ne se rate pas :) alors à vos idées! <br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23parisjug">#parisjug</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23quickies">#quickies</a>  ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>236</wp:post_id>
		<wp:post_date>2014-11-25 10:46:46</wp:post_date>
		<wp:post_date_gmt>2014-11-25 10:46:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>paris-jug-soiree-young-blood-ii</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="parisjug"><![CDATA[Parisjug]]></category>
		<category domain="post_tag" nicename="quickies"><![CDATA[Quickies]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java 9 : Les premières fonctionnalités</title>
		<link>https://thecoderwriter.wordpress.com/2014/08/18/java-9-les-premieres-fonctionnalites/</link>
		<pubDate>Mon, 18 Aug 2014 21:52:11 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2014/08/18/java-9-les-premieres-fonctionnalites/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Lundi dernier, le 11 août 2014, Mark Reinhold a publié une liste de plusieurs JEPs (JDK-Enhancement Proposal), sur la <i>mailling list</i> JDK9-Dev. <br /><br />Cette liste a pour objectif de fixer un point de départ pour la future version du JDK. <br />Chaque Committer du projet pouvait donner son avis sur la liste.<br /><br />La clôture des votes était aujourd&#039;hui (18/08/2014). Le résultat de ce sondage permettra de définir les fonctionnalités qui seront traitées pour la version 9 du JDK.<br /><br />Voici les JEPs qui ont été soumises au vote :<br /><br />  - 102: Process API Updates<br />  - 143: Improve Contended Locking<br />  - 197: Segmented Code Cache<br />  - 198: Light-Weight JSON API<br />  - 199: Smart Java Compilation, Phase Two<br />  - 201: Modular Source Code<br /><br />Cette liste est issue de la longue liste des JEPs disponible ici : <a href="http://openjdk.java.net/jeps/0">http://openjdk.java.net/jeps/0</a><br /><br />Ci-dessous une brève présentation de chaque JEP proposées :<br /><br /><b>Process API Updates</b><br />Amélioration de l&#039;API permettant de contrôler et gérer les processus du système d&#039;exploitation. Les limitations de l&#039;API existante obligent souvent les développeurs à avoir recours à du code natif.<br /><br /><b>Improve Contended Locking</b><br />Amélioration des performances dans un environnement concurrent. <br /><br /><b>Segmented Code Cache</b><br />Segmentation du cache du compilateur JIT afin d&#039;améliorer les performances et de permettre des extensions futures.<br /><br /><b>Light-Weight JSON API</b><br />Fournir une API permettant de consommer et générer des documents JSON selon la RFC7159.<br /><br /><b>Smart Java Compilation, Phase Two</b><br />A cause de plusieurs problèmes de stabilité et de portabilité, sjavac (smart java compiler) n&#039;est pas utilisé par défaut. L&#039;objectif premier de ce JEP est de fixer ces problèmes. Il s&#039;agit de s&#039;assurer que l&#039;outil produira un résultat fiable sur l&#039;ensemble des environnements (software et hardware).<br /><br /><b>Modular Source Code</b><br />Il s&#039;agit de réorganiser le code source du JDK en modules. D&#039;améliorer le système de build pour compiler ces modules. Et enfin de bien délimiter l&#039;utilisation de chaque module.<br /><br />Je n&#039;ai pas trouvé pour le moment les résultats du vote. ils devront être publier dans les jours à venir. J&#039;essaierai de faire un update du post dès qu&#039;ils seront disponibles.<br /><br />En attendant, vous trouverez sur le lien attaché au post plus de détails concernant chaque JEP.﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>237</wp:post_id>
		<wp:post_date>2014-08-18 21:52:11</wp:post_date>
		<wp:post_date_gmt>2014-08-18 21:52:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-9-les-premieres-fonctionnalites</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_23ba99a472e753f02163d87f3f9524ac</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Intellij IDEA 14 early preview</title>
		<link>https://thecoderwriter.wordpress.com/2014/06/28/intellij-idea-14-early-preview/</link>
		<pubDate>Sat, 28 Jun 2014 15:27:40 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2014/06/28/intellij-idea-14-early-preview/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />JetBrains vient de sortir la dernière version de son IDE Java.<br />Cette version est accessible en <i>early preview</i>. C&#039;est à dire que vous pouvez profiter de la version dès maintenant pour la tester. <br /><br />Bien entendu cette version n&#039;est pas complètement sèche et il est possible de rencontrer des petits soucis qui seront naturellement corrigés lors de la release finale. <br /><br />Voici les principales nouvelles fonctionnalités ou améliorations qui font partie de ce nouvel opus.<br /><br />En ce qui concerne le <b>debugger Java</b>, il a été entièrement réécrit et la fenêtre de debuggage a été unifiée pour tous les langages.<br />Les breakpoints peuvent être organisés par groupes d&#039;utilisateurs.<br />La visualisation des tableaux et des collections peut se faire directement dans le debugger, il n&#039;est plus nécessaire d&#039;utiliser la fonction de visualisation.<br /><br />En ce qui concerne l&#039;éditeur Java, il est possible de générer des nouvelles méthodes de test dans des tests unitaires existants.<br /><br />D&#039;un point de vue plus général, le temps de démarrage a été amélioré.<br />Meilleure intégration de Gradle et Grails.<br /><br />Cette liste n&#039;est pas exhaustive. Je vous invite à consulter le lien attaché au post pour connaitre la liste complète des nouveautés.<br /><br />Un autre point intéressant est la mise à disposition dans la version communautaire de fonctionnalité clés : <br /> - Code coverage,<br /> - Structural search and replace,<br /> - Type migration refactoring.<br /><br />Pour vous faire une idée plus précise, il suffit de télécharger la version et de commencer à jouer avec !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23idea">#idea</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23early">#early</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23preview">#preview</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23v14">#v14</a>  ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date>2014-06-28 15:27:40</wp:post_date>
		<wp:post_date_gmt>2014-06-28 15:27:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>intellij-idea-14-early-preview</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="early"><![CDATA[Early]]></category>
		<category domain="post_tag" nicename="idea"><![CDATA[Idea]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="preview"><![CDATA[Preview]]></category>
		<category domain="post_tag" nicename="v"><![CDATA[V]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JinQ : Requêtes SQL et Java8</title>
		<link>https://thecoderwriter.wordpress.com/2014/05/19/jinq-requetes-sql-et-java8/</link>
		<pubDate>Mon, 19 May 2014 23:09:04 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2014/05/19/jinq-requetes-sql-et-java8/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /> <br /> <br />La librairie dont nous allons parler a la particularité d&#039;utiliser les nouveautés de la dernière version du JDK.<br />Elle a été créée par <b>Dr Ming-Yee lu</b> + pour son projet de recherche lorsqu&#039;il était à <b>l&#039;EPFL</b>.<br /> <br />JinQ a pour objectif de fournir une manière simple et naturelle d&#039;écrire des requêtes vers une base de données en Java.<br /> <br />JinQ propose une syntaxe basée sur le paradigme de la programmation fonctionnelle, apporté par Java 8. <br />Une requête écrite avec JinQ ressemblerait à ça :  <br /> <br />database.countryStream().where(<br />  country-&gt; country.getName().equals(&quot;France&quot;));<br />  <br />On s&#039;aperçoit de la puissance de la syntaxe en terme de lisibilité et de concision. La ligne ci-dessus sélectionne l&#039;ensemble des pays qui ont comme nom : &quot;France&quot;. <br />On trouve la possibilité d&#039;écrire du code concis et clair. L&#039;exemple donné ci-dessus est assez simpliste, on peut écrire des choses plus complexes de manière très élégante.<br /><br />Un des avantages de la librairie est que la requête est écrite en Java natif. Ce qui permet au moment de la compilation de vérifier la validité de la requête.<br /> <br />Pour son fonctionnement, JinQ a besoin d&#039;un mapping entre les entités et la base de données (via un fichier xml ou via une description JPA). Ensuite une phase de génération du code instrumenté.<br />Cette phase de description et génération est très simple à mettre en œuvre.<br /><br />Aujourd&#039;hui, le framework ne permet de faire que de la lecture. Il propose toutes les fonctionnalités de jointure, d&#039;agrégation, de mapping, etc...<br />Dans une architecture basée sur le pattern CQRS, cet outil trouverait sa place dans la partie Query.<br /><br />Ce projet est très jeune  (v 0.1), même si l&#039;on ne peut pas l&#039;utiliser directement en prod, il présente le véritable intérêt d&#039;utiliser les nouveautés du JDK8 (lambda, Stream). Il offre des perspectives intéressantes.<br /><br />Un projet à suivre...<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java8">#java8</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23Jinq">#Jinq</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23orm">#orm</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23lambda">#lambda</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2014-05-19 23:09:04</wp:post_date>
		<wp:post_date_gmt>2014-05-19 23:09:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jinq-requetes-sql-et-java8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jinq"><![CDATA[Jinq]]></category>
		<category domain="post_tag" nicename="lambda"><![CDATA[Lambda]]></category>
		<category domain="post_tag" nicename="orm"><![CDATA[Orm]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java 8 : Les lambdas par l&#039;exemple</title>
		<link>https://thecoderwriter.wordpress.com/2014/04/01/java-8-les-lambdas-par-lexemple/</link>
		<pubDate>Tue, 01 Apr 2014 21:06:16 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2014/04/01/java-8-les-lambdas-par-lexemple/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Java 8 est sorti ! Ce n&#039;est plus une grande nouvelle... <br />Maintenant, plus d&#039;excuses pour ne pas utiliser cette nouvelle version du langage.<br />Comme nous avons pu le voir au travers de précédents articles. pas mal de nouveautés sont arrivées avec ce nouvel opus.<br /><br />Parmi ces nouveautés : <b>les expressions lambdas</b>. <br />Cette nouvelle fonctionnalité permet de déclarer <i>en ligne</i> des fonctions. Il était possible de faire quelque chose de similaire auparavant au moyen d&#039;une classe anonyme. L&#039;inconvénient était le nombre de lignes qu&#039;il fallait écrire avant de réellement implémenter le code métier. Avec les lambdas, <i>une ligne</i> suffit..<br /><br />Pour bien comprendre le mécanisme et la valeur apportée par ce mécanisme (inspiré en partie du monde de la programmation  fonctionnelle), je vous propose l&#039;article attaché à ce post qui décrit 10 exemples mettant en œuvre les expressions lambdas.<br /><br />Les exemples que vous pourrez découvrir sont : <br /><br />- Implémentation d&#039;un thead<br />- Implémentation d&#039;un listener d&#039;évènement<br />- Parcourir une liste<br />- Utilisation de l&#039;interface Predicate de manière fonctionnelle<br />- Créer une combinaison de Predicate<br />- Implémentation d&#039;un Map Reduce<br />- Création d&#039;une liste de String via un filtre<br />- Appliquer une fonction sur chaque élément d&#039;une liste<br />- Création d&#039;un sous-liste<br />- Calcule du Max, Min, moyenne et somme sur une liste d&#039;élément.<br /><br />Pour les personnes qui découvrent cette syntaxe, cela peut être déroutant voir même pas très intuitif. <br />Si vous prenez le temps de bien comprendre, cela vous ouvrira de nouvelles perspectives.<br /><br />Bonne lecture !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23lambda">#lambda</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23version8">#version8</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>240</wp:post_id>
		<wp:post_date>2014-04-01 21:06:16</wp:post_date>
		<wp:post_date_gmt>2014-04-01 21:06:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java-8-les-lambdas-par-lexemple</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="lambda"><![CDATA[Lambda]]></category>
		<category domain="post_tag" nicename="version"><![CDATA[Version]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Easy Eclipse for Java</title>
		<link>https://thecoderwriter.wordpress.com/2014/03/04/easy-eclipse-for-java/</link>
		<pubDate>Tue, 04 Mar 2014 23:38:09 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2014/03/04/easy-eclipse-for-java/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Je viens de lire une news vraiment intéressante concernant une initiative lancée par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/116306150628679558948">Pascal Rapicault</a></span>.<br /><br />Le principe est de proposer une version de l&#039;IDE Eclipse exclusivement dédiée à Java. Jusque là, rien de nouveau. La nouveauté est que cette version sera sous licence payante. <br /><br />L&#039;objectif de cette licence n&#039;est pas d&#039;enrichir l&#039;éditeur de la version mais de proposer une version stable fournissant une meilleure expérience utilisateur.<br /><br />Ce modèle économique rappelle clairement l&#039;IDE IntelliJ qui connaît un succès grandissant dans la communauté des développeurs sous la JVM.<br /><br />La première version de EasyEclipse se focalisera sur les fonctionnalités suivantes : <br /><br />	-Le support de Java 8,<br />	-Maven et Ant,<br />	-Git, SVN, CVS,<br />	-XML, HTML, CSS.<br />	<br />L&#039;idée est que ces fonctionnalités soient natives, directement dans la distribution.<br /><br />Les autres principales fonctionnalités seront de fournir, entre autres, une launch bar, une épuration des menus contextuels, un enrichissement des templates de code, etc...<br /><br />Comme dit précédemment, l&#039;objectif de <b>EasyEclipse</b> est de devenir un outil exigeant en terme de qualité. Pour cela, l&#039;ajout de fonctionnalités n&#039;est pas suffisant pour atteindre cette excellence. Pour atteindre ce niveau d&#039;exigence, l&#039;équipe va se focaliser sur les problématiques de performance et de stabilité.<br /><br />La première version intégrant toutes les fonctionnalités décrites dans le lien attaché au post est prévue pour décembre 2014.<br /><br />Actuellement, le projet est exposé sur <i>kickstarter</i>. Vous trouverez l&#039;ensemble des informations sur le projet en suivant le lien attaché au post. Ainsi que la manière d&#039;y contribuer.<br /><br />Vous trouverez également en suivant ce lien, un article de <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/108129789633426338913">Jérémie Bresson</a></span> sur ce nouvel outil :<br /><a href="http://blog.developpez.com/jmini/p12512/eclipse/easyeclipse-ide-java-payant">http://blog.developpez.com/jmini/p12512/eclipse/easyeclipse-ide-java-payant</a><br /><br />Bonne lecture !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23easyEclipse">#easyEclipse</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23eclipse">#eclipse</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>241</wp:post_id>
		<wp:post_date>2014-03-04 23:38:09</wp:post_date>
		<wp:post_date_gmt>2014-03-04 23:38:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>easy-eclipse-for-java</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="easyeclipse"><![CDATA[EasyEclipse]]></category>
		<category domain="post_tag" nicename="eclipse"><![CDATA[Eclipse]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java2Scala Cheatsheet</title>
		<link>https://thecoderwriter.wordpress.com/2014/02/12/java2scala-cheatsheet/</link>
		<pubDate>Wed, 12 Feb 2014 00:31:32 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2014/02/12/java2scala-cheatsheet/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />L&#039;écosystème de Java s&#039;est considérablement ouvert ces dernières années avec tous les langages créés pour la JVM. <br />Personnellement, un a retenu mon attention : Scala. <br /><br />Sans rentrer dans le détail du pourquoi celui-là plutôt qu&#039;un autre, je me suis rendu compte de la difficulté d&#039;aborder un autre langage mettant en place une nouvelle syntaxe et de nouveaux concepts. <br />Pour ma part, le démarrage a été assez rude, j&#039;ai commencé à coder en Scala en faisant la formation sur Coursera (partie 1).<br /><br />Ce qui est difficile au départ, c&#039;est de retrouver ses points de repère dans le langage. <br />Même si le fait de faire des liens, entre notre langage préféré et le nouveau langage abordé n&#039;est pas toujours une bonne idée ; cela permet de monter rapidement en compétence sur notre cible.<br /><br />Pour cela, je vous propose un document du type <i>cheatsheet</i> décrivant les équivalences entre les deux langages.<br />Les points abordés permettent de vraiment prendre en main la nouvelle syntaxe très rapidement. <br /><br />Naturellement, une fois ce cap passé, il faudra couper les liens de manière plus profonde avec notre de zone de confort et se plonger la tête la première dans les concepts du nouveau langage.<br /><br />Bonne lecture !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23scala">#scala</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23cheatsheet">#cheatsheet</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23migration">#migration</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>242</wp:post_id>
		<wp:post_date>2014-02-12 00:31:32</wp:post_date>
		<wp:post_date_gmt>2014-02-12 00:31:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java2scala-cheatsheet</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cheatsheet"><![CDATA[Cheatsheet]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="migration"><![CDATA[Migration]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JSONassert</title>
		<link>https://thecoderwriter.wordpress.com/2014/02/03/jsonassert/</link>
		<pubDate>Mon, 03 Feb 2014 21:40:05 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2014/02/03/jsonassert/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />A l&#039;heure du déploiement massif d&#039;API REST et de l&#039;utilisation intensive du format JSON, il est très utile de pouvoir tester de manière simple mais efficace les différents flux que nous mettons à disposition.<br /><br />Malgré la simplicité du format Json, la mise en place de test unitaire est toujours un peu fastidieuse sur ce format.<br />En effet, la représentation du flux est sous forme de chaîne de caractères. Comparer deux flux strictement identiques cela ne pose aucun problème. <br />Par contre deux flux identiques sur le contenu mais dans un ordre différent cela se complique. <br />Pour traiter ce cas, il va falloir parcourir chacun des éléments et ensuite faire des comparaisons un à un afin de vérifier que tous les éléments d&#039;un flux sont bien présents dans le second. Je vous laisse imaginer le code à écrire et surtout à relire ultérieurement.<br /><br />C&#039;est précisément là que la librairie <i>JSONassert</i> intervient.<br />Cet outil permettra de faire des comparaisons de flux Json au niveau de la structure mais aussi des données.<br /><br />L&#039;exemple présenté sur le site de la librairie est assez éloquent : <br /><br /><i>JSONObject data = getRESTData(&quot;/friends/367.json&quot;);</i><br /><i>String expected = &quot;{friends:[{id:123,name:\&quot;Corby Page\&quot;},{id:456,name:\&quot;Carter Page\&quot;}]}&quot;;</i><br /><i>JSONAssert.assertEquals(expected, data, false);</i><br /><br />La librairie propose deux types de vérification : une vérification stricte qui impose que les flux soient strictement identiques et l&#039;autre qui tolérera que tous les champs résultats ne soient pas dans les champs attendus (très pratique pour vérifier quelques champs importants, sans vérifier tout le contenu du flux JSON). Dans tous les cas, l&#039;ordre des champs n&#039;a pas d&#039;importance. Le deuxième mode est recommandé.<br /><br />Actuellement, la librairie supporte comme framework de test  _JUnit_.<br /><br />Comme toute bonne librairie, un quick start est proposé afin de rapidement prendre en main l&#039;outil. Vous trouverez aussi un CookBook également très utile pour répondre aux cas classiques.<br /><br />JSONassert est disponible sur les repos traditionnels Maven.<br /><br />Bons tests !<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a>  <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23json">#json</a>   <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23test">#test</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>243</wp:post_id>
		<wp:post_date>2014-02-03 21:40:05</wp:post_date>
		<wp:post_date_gmt>2014-02-03 21:40:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>jsonassert</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="json"><![CDATA[Json]]></category>
		<category domain="post_tag" nicename="test"><![CDATA[Test]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Google Style</title>
		<link>https://thecoderwriter.wordpress.com/2014/01/29/google-style/</link>
		<pubDate>Wed, 29 Jan 2014 22:06:36 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2014/01/29/google-style/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Les développeurs de chez Google ont mis en ligne un document décrivant les règles (internes) standards de coding Java.<br /><br />Les règles énoncées dans ce document concernent les aspects esthétiques de formatage du code, mais pas seulement. On en trouve également sur des conventions de codage, de nommage, de structure de fichier source, etc...<br />Le document se concentre principalement sur des règles universelles simples et rapides à mettre en oeuvre.<br /><br />Les principaux points abordés sont regroupés selon 6 chapitres : <br /><br />	- Les fichiers sources de bases<br />	- La structure des fichiers sources<br />	- Le formatage du code<br />	- Les conventions de nomage<br />	- Les bonnes pratiques de coding<br />	- La javadoc.<br /><br />La première phrase énoncée dans le document montre bien la rigueur des développements réalisés chez Google : <br /><br /><i>A Java source file is described as being in Google Style if and only if it adheres to the rules herein</i><br /><br />Même si suivre à la lettre toutes ces règles peut paraitre utopique, il peut être intéressant de s&#039;en inspirer et de piocher celle ayant du sens pour son contexte de projet.<br /><br />Une lecture assidue sera toujours bénéfique.<br /><br />Bonne lecture!<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23regle">#regle</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23coding">#coding</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23google">#google</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>244</wp:post_id>
		<wp:post_date>2014-01-29 22:06:36</wp:post_date>
		<wp:post_date_gmt>2014-01-29 22:06:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>google-style</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="coding"><![CDATA[Coding]]></category>
		<category domain="post_tag" nicename="google"><![CDATA[Google]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="regle"><![CDATA[Regle]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Un peu d&#039;histoire</title>
		<link>https://thecoderwriter.wordpress.com/2013/12/10/un-peu-dhistoire/</link>
		<pubDate>Tue, 10 Dec 2013 22:10:21 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/12/10/un-peu-dhistoire/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Au travers de l&#039;article attaché à ce post, vous retrouverez l&#039;ensemble des dates clefs qui constitue l&#039;histoire du langage Java.<br /><br />Depuis le <i>green project en 1991</i> à <i>aujourd&#039;hui</i>, l&#039;auteur décrit l&#039;histoire de Java.<br /><br />Pour certains cela rappelera des souvenirs, pour d&#039;autres ils apprendront comment est né le langage.<br /><br />Si vous constatiez des erreurs ou si vous aviez des précisions à apporter, n&#039;hésiter pas à contacter l&#039;auteur du post.<br /><br />Bonne lecture!<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23histoire">#histoire</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23oak">#oak</a>﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>245</wp:post_id>
		<wp:post_date>2013-12-10 22:10:21</wp:post_date>
		<wp:post_date_gmt>2013-12-10 22:10:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>un-peu-dhistoire</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="histoire"><![CDATA[Histoire]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="oak"><![CDATA[Oak]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Plugin Jenkins pour Intellij</title>
		<link>https://thecoderwriter.wordpress.com/2013/12/04/plugin-jenkins-pour-intellij/</link>
		<pubDate>Wed, 04 Dec 2013 22:57:11 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/12/04/plugin-jenkins-pour-intellij/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />Sur mon projet actuel, nous utilisons classiquement Jenkins.<br />Nous avons mis en place du <i>continuous delivery</i>. Pour cela, nous avons un certain nombre de builds configurés. Chacun de ces builds constitue un pipeline.<br /><br />A chaque commit, nous avons un oeil sur les écrans de monitoring proposés par Jenkins.<br />La conséquence est qu&#039;il faut switcher régulièrement entre notre IDE et le navigateur. Même si cette action n&#039;est pas d&#039;un coût énorme, elle nous fait changer de contexte régulièrement.<br /><br />Je me suis demandé s&#039;il n&#039;y avait pas un moyen d&#039;intégrer l&#039;outil directement dans l&#039;IDE. <br />Naturellement, je me doutais bien qu&#039;il existait un plugin permettant cette intégration.<br /><br />J&#039;ai donc trouvé un plugin vraiment intéressant. <br />Il a été développé par <span class="proflinkWrapper"><span class="proflinkPrefix">+</span><a class="proflink" href="https://plus.google.com/103948352471870418506">David Boissier</a></span>. <br />Il est compatible à partir de la version 11 d&#039;IDEA.<br />Le projet n&#039;est pas encore publié sous une version majeure, néanmoins la version proposée est très stable.<br /><br />Le plugin permet d&#039;afficher dans un espace dédié l&#039;ensemble des builds disponibles sur Jenkins. On retrouve la traditionnelle pastille d&#039;état ainsi que la météo du build.<br />Pour chaque job, il est possible de cliquer dessus pour ouvrir la page web correspondante.<br /><br />Evidemment, lorsqu&#039;un build est en train de tourner, l&#039;interface graphique l&#039;affiche en suffixant le build concerné par <b>(Running)</b><br /><br />Bien que les builds soient déclenchés par un commit, il est possible de lancer un build spécifique.<br /><br />Il est également possible de filtrer sur le nom des builds selon une liste déroulante.<br />Actuellement, je trouve qu&#039;il manque une petite fonctionnalité qui permettrait de clarifier un peu plus la vue lorsque le projet contient beaucoup de builds différents. Cette fonctionnalité serait la possibilité de filtrer l&#039;affichage à l&#039;aide d&#039;une expression régulière.<br /><br />L&#039;installation et la configuration sont vraiment simples et rapides : efficace.<br /><br />D&#039;autres fonctionnalités sont disponibles (je n&#039;ai pas pu encore les tester). <br />La documentation du projet est assez claire et permet une prise en main rapide.<br /><br />Toutes les infos disponibles dans le lien attaché au post.<br /><br /> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23plugin">#plugin</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23idea">#idea</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23jenkins">#jenkins</a> ﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>246</wp:post_id>
		<wp:post_date>2013-12-04 22:57:11</wp:post_date>
		<wp:post_date_gmt>2013-12-04 22:57:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>plugin-jenkins-pour-intellij</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="idea"><![CDATA[Idea]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="jenkins"><![CDATA[Jenkins]]></category>
		<category domain="post_tag" nicename="plugin"><![CDATA[Plugin]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scalex : ...doc une nouvelle approche</title>
		<link>https://thecoderwriter.wordpress.com/2013/12/02/scalex-doc-une-nouvelle-approche/</link>
		<pubDate>Mon, 02 Dec 2013 22:51:55 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/2013/12/02/scalex-doc-une-nouvelle-approche/</guid>
		<description></description>
		<content:encoded><![CDATA[ <br /><br />La documentation est une ressource précieuse pour comprendre et appréhender une librairie, une api, ou un projet. <br />Il existe différents formats de documentation adaptés à différents besoins. Pour le langage Java, la ressource principale est la <b>Javadoc</b>. <br /><br />Celle-ci est générée directement à partir du code. Elle se base sur des commentaires et annotations particulières et adopte une template spécial. <br /><br />Ce template n&#039;a quasiment pas évolué depuis sa création. La manière de naviguer est toujours la même. récemment, la CSS a évolué pour donner un coup de jeune (et aussi marquer le passage de Sun à Oracle).<br /><br />J&#039;évoquais précédemment que la navigation au sein de la documentation n&#039;a pas évolué. Après un certain temps d&#039;utilisation on arrive à retrouver (ou découvrir) les informations cherchées. Néanmoins, le côté très statique implique de bien connaitre sa structure et ne permet pas d&#039;accéder rapidement à une information inconnue. <br /><br />Par exemple, si un collègue vous indique le nom d&#039;une méthode d&#039;une classe répondant à la problématique à laquelle vous êtes confronté depuis quelques semaines . S&#039;il ne vous précise pas les informations sur le package ou le nom de la classe, il va falloir chercher et tâtonner (exemple tiré un peu par les cheveux :) ).<br /><br />Les nouveautés arrivent avec les nouveaux langages tournant sur la JVM. Par exemple le langage Scala (comme par hasard...) propose des fonctionnalités intéressantes et pratiques au sein de sa documentation (scaladoc). En effet, la scaladoc met à disposition deux moteurs de recherche. <br />le premier permet de rechercher dans les types (soit en tapant le nom du type, ou en sélectionnant la première lettre du type recherché).<br />Le deuxième permet de faire une recherche directement au sein d&#039;un type sur les fonctions qui le compose.<br /><br />Une nouvelle approche est mise en place par le projet <br />nommé <b>Scalex</b>. Ce projet propose de manipuler la documentation au travers d&#039;une recherche <i>fulltext</i>. Cette approche permet d&#039;être (selon moi) beaucoup plus efficace dans l&#039;utilisation de la documentation sous-jacente.<br />Pour l&#039;instant, le projet permet d&#039;accéder à deux indexes de documentation : <br /><br />Scala 2.9.1-1<br />Scalaz 6.0.4<br /><br />La recherche se fait à partir de l&#039;expression de mots ou alors à l&#039;aide d&#039;un pseudo langage permettant d&#039;affiner sa recherche.<br /><br />L&#039;outil propose plusieurs moyens pour l&#039;utiliser (ou s&#039;interfacer). Le service est accessible via : <br />-La ligne de commande<br />-IRC<br />-Web (javascript)<br />-XMPP<br />-SBT<br /><br />Scalex s&#039;est inspiré de <b>Hoogle</b>, le moteur utilisé pour Haskell.<br /><br />Vous trouverez l&#039;accès au moteur de recherche ainsi qu&#039;à des détails sur le pseudo-langage en regardant le lien attaché à ce post.<br /><br /><a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23java">#java</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23documentation">#documentation</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23javadoc">#javadoc</a> <a rel="nofollow" class="ot-hashtag" href="https://plus.google.com/s/%23scalex">#scalex</a>.﻿]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2013-12-02 22:51:55</wp:post_date>
		<wp:post_date_gmt>2013-12-02 22:51:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scalex-doc-une-nouvelle-approche</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="documentation"><![CDATA[Documentation]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="javadoc"><![CDATA[Javadoc]]></category>
		<category domain="post_tag" nicename="scalex"><![CDATA[Scalex]]></category>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[39291]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Une entreprise libérée, c&#039;est quoi?</title>
		<link>https://thecoderwriter.wordpress.com/2015/03/20/une-entreprise-liberee-cest-quoi/</link>
		<pubDate>Fri, 20 Mar 2015 23:40:07 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=369</guid>
		<description></description>
		<content:encoded><![CDATA[Voila une vidéo expliquant en 1mn ce qu'est une entreprise libérée.
C'est un concept intéressant, à découvrir...

&nbsp;

[embed]https://www.youtube.com/watch?v=ZrAFpPbz7O4[/embed]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date>2015-03-20 23:40:07</wp:post_date>
		<wp:post_date_gmt>2015-03-20 23:40:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>une-entreprise-liberee-cest-quoi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="apprendre"><![CDATA[apprendre]]></category>
		<category domain="post_tag" nicename="entreprise"><![CDATA[entreprise]]></category>
		<category domain="post_tag" nicename="liberee"><![CDATA[libérée]]></category>
		<category domain="post_format" nicename="post-format-video"><![CDATA[Vidéo]]></category>
		<category domain="post_tag" nicename="societe"><![CDATA[société]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13519837834]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Data Science spécialisation - Coursera</title>
		<link>https://thecoderwriter.wordpress.com/2015/04/04/data-science-specialisation-coursera/</link>
		<pubDate>Sat, 04 Apr 2015 13:56:00 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=372</guid>
		<description></description>
		<content:encoded><![CDATA[Aujourd'hui on entend souvent parler des mots clef suivants :

<ul>
<li>BigData,</li>
<li>data scientist,</li>
<li>Data Engineer,</li>
<li>Machine Learning,</li>
<li>NoSQL</li>
<li>...</li>
</ul>

En règles générales, ils sont associés à des outils comme :

<ul>
<li>Hadoop,</li>
<li>Spark,</li>
<li>storm,</li>
<li>Kafka,</li>
<li>Cassandra,</li>
<li>MongoDB,</li>
<li>et bien d'autres encore.</li>
</ul>

Un grand nombre de meetups ou de users groups sont consacrés à ces outils. Les connaitre et les maitriser est une chose importante mais je pense que ce n'est pas une fin en soi.

Exploiter des sources de données, nettoyer un jeu de données approximatif, savoir corréler des informations entre elles ne sont pas des choses forcément intuitives.
Je veux parler de l'aspect théorique qui se cache derrière les mots clefs et outils évoqués ci-dessus.

Je suis depuis début janvier les cours de la formation en ligne <a href="https://www.coursera.org/specialization/jhudatascience/1?utm_medium=listingPage"><strong>Data Science</strong></a> disponible sur <strong>Coursera</strong>.
Cette formation se décompose en 9 modules :

<ul>
<li>The Data Scientist’s Toolbox</li>
<li>R Programming</li>
<li>Getting and Cleaning Data</li>
<li>Exploratory Data Analysis</li>
<li>Reproducible Research</li>
<li>Statistical Inference</li>
<li>Regression Models</li>
<li>Practical Machine Learning</li>
<li>Developing Data Products</li>
</ul>

et se finalise par la réalisation d'un projet permettant de valider le cursus.

Les thèmes abordés se focalisent sur des aspects théoriques (analyse, statistique). Ces outils théoriques permettent de travailler plus efficacement et surtout de manière plus formelle face à un jeu de données (quel que soit son volume).

Je viens de terminer le troisième module. La progression au travers des différents modules est facile. Les concepts sont introduits au fur et à mesure. Ils sont accompagnés d'exercices pratiques tirés de use cases concrets.

L'ensemble des exercices se basent sur le langage R. Ce langage, orienté manipulation de data, propose un environnement de développement très complet permettant de travailler dans de bonnes conditions. La prise en main est très aisée pour un développeur.

Aussi les ressources par rapport à cette plateforme sont très nombreuses.

Chaque module se décompose en 4 semaines de cours + exercices. Le temps consacré pour travailler doit être d'environ 4h à 5h par semaine.

Cette formation peut être suivie soit gratuitement ou bien en payant 43Euros/module ce qui permet d'obtenir un certificat vérifié.

Aujourd'hui j'ai déjà le sentiment d'avoir acquis des bases solides dans ce domaine. Je projette de finaliser le cursus (encore 6 modules + le projet).

Si vous êtes intéressé par le sujet de la data, je vous recommande vivement cette formation en ligne.

<em>N'hésitez pas à poser des questions si vous voulez plus de précision sur cette formation.</em>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>372</wp:post_id>
		<wp:post_date>2015-04-04 13:56:00</wp:post_date>
		<wp:post_date_gmt>2015-04-04 13:56:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>data-science-specialisation-coursera</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="coursera"><![CDATA[Coursera]]></category>
		<category domain="post_tag" nicename="datascience"><![CDATA[datascience]]></category>
		<category domain="category" nicename="training"><![CDATA[training]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IMG_20150302_185356~2</title>
		<link>https://thecoderwriter.wordpress.com/img_20150302_1853562/</link>
		<pubDate>Sat, 04 Apr 2015 13:32:30 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/04/img_20150302_1853562.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>375</wp:post_id>
		<wp:post_date>2015-04-04 13:32:30</wp:post_date>
		<wp:post_date_gmt>2015-04-04 13:32:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>img_20150302_1853562</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/04/img_20150302_1853562.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:4160;s:6:"height";i:3120;s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/img_20150302_1853562.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";d:2;s:6:"credit";s:0:"";s:6:"camera";s:7:"Nexus 6";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1425322438;s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"3.82";s:3:"iso";s:3:"592";s:13:"shutter_speed";s:17:"0.083333333333333";s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/img_20150302_1853562.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-img_20150302_1853562.jpg</title>
		<link>https://thecoderwriter.wordpress.com/cropped-img_20150302_1853562-jpg/</link>
		<pubDate>Sat, 04 Apr 2015 13:32:52 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/04/cropped-img_20150302_1853562.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://thecoderwriter.files.wordpress.com/2015/04/cropped-img_20150302_1853562.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>376</wp:post_id>
		<wp:post_date>2015-04-04 13:32:52</wp:post_date>
		<wp:post_date_gmt>2015-04-04 13:32:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cropped-img_20150302_1853562-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/04/cropped-img_20150302_1853562.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/sobe]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_custom_header_last_used_pub/sobe</wp:meta_key>
			<wp:meta_value><![CDATA[1428154908]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1500;s:6:"height";i:886;s:4:"file";s:104:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/cropped-img_20150302_1853562.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/cropped-img_20150302_1853562.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devoxx France 2015 - Keynotes</title>
		<link>https://thecoderwriter.wordpress.com/2015/04/13/devoxx-france-2015-keynotes/</link>
		<pubDate>Mon, 13 Apr 2015 23:22:48 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=378</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://thecoderwriter.files.wordpress.com/2015/04/capture-dc3a9cran-2015-04-19-19-48-38.png"><img src="https://thecoderwriter.files.wordpress.com/2015/04/capture-dc3a9cran-2015-04-19-19-48-38.png?w=300" alt="Capture d&#039;écran 2015-04-19 19.48.38" width="300" height="128" class="aligncenter size-medium wp-image-419" /></a>

<h2>Devoxx France 2015 - 4 ième édition</h2>

<h3>Les préparatifs</h3>

Mercredi 8 avril 2015 au soir, préparation aux deux jours de conférence. La check list n'a pas beaucoup changé par rapport à l'année dernière :

<ul>
<li>Batterie du téléphone portable chargée à bloque,</li>
<li>Batterie du lap top idem,</li>
<li>Bloc-notes + stylos,</li>
<li>Tenue confortable,</li>
<li>Lunette (ça c'est nouveau! :)),</li>
<li>Mail permettant de retirer mon badge.</li>
</ul>

Ensuite vient l'organisation de la journée, établir le programme des conférences auquel je souhaite assister. Et c'est là que tout se complique.
En effet le grand changement, par rapport à 2014, c'est le lieu ou se tiendra la conférence.

L'année dernière, Devoxx France se tenait au <strong>Marriott</strong>, cette année c'est au <strong>palais des Congrès</strong> que se déroule l'évènement.

Beaucoup plus de conférences proposées. les choix deviennent difficiles :). En effet là ou l'année dernière 5 conférences se déroulaient en même temps, cette année, il y aura jusqu'à 8 conférences en parallèle.

Après un arbitrage sévère, le programme est enfin prêt (même si je sais que tout est encore mutable. :P)

Il ne me reste plus qu'à me coucher tôt pour être frais et dispo le lendemain du grand jour.

L'arrivée porte Maillot fait son petit effet. Lorsque l'on rentre dans le palais des Congrès que l'on monte au niveau 2, la conférence prend une nouvelle dimension par rapport aux années précédentes, c'est impressionnant.

2200 développeurs passionnés sont réunis, cela représente 300 personnes supplémentaires par rapport à l'année dernière. L'augmentation du nombre de convives ne se récent pas trop étant donné l'espace disponible.

<h2>Les Keynotes</h2>

<h3>Keynote de l'équipe Devoxx France</h3>

Bref, rentrons dans le vif du sujet. La journée commence par une première keynote tenue par <strong>Nicolas Martignole</strong>, <strong>Antonio Goncalves</strong> et <strong>Zouheir Cadi</strong>, les fondateurs de la conférence française.
Durant cette keynote, ils font un bilan le chemin parcouru pour aboutir à cette édition 2015.

Ils font également une annonce importante.. La famille des conférences Devoxx va s'agrandir, en effet la conférence

La Conférence <strong>JMaghreb</strong> rejoint la famille Devoxx et devient <strong>Devoxx Maroc</strong>. Comme les autres membres de la famille cette conférence sera un rendez-vous incontournable des développeurs, passionnés et entrepreneurs.

Au programme des sessions, des ateliers pratiques, des tables rondes, hackaton autour des sujets techniques liés au web, mobile, devops, gaming, sécurité.

Devoxx Maroc se tiendra au Mégarama de Casablanca du 16 au 18 novembre 2015.

Pour ceux qui souhaiterait tenter l'aventure de Devoxx Maroc en tant que speaker, le CFP ouvre le 1er mai prochain.

<h3>Le futur de la robotique personnelle</h3>

La seconde keynote, intitulé <em>robot humanoïde pour tout le monde</em>, a été présentée par <strong>Rodolphe Gelin</strong> sur le thème du futur de la robotique personnelle.

Il est directeur de la recherche dans la société Aldebaran.

Il commence par présenter différents robots développés par Aldebaran Nao, Pepper, Romeo.

Pour illustrer le thème de sa keynote, il nous propose une vidéo mettant en situation le premier robot de la liste (Nao). On voit une grand-mère interagir le robot.
Elle commence par l'appeler et lui demander de venir. Ensuite, elle lui demande les dernières informations importantes de l'actualité. Le robot s'exécute et lui énumère la liste. Lorsque la dame veut avoir plus de détails sur un titre, elle le demande naturellement au robot qui lui donne plus d'informations.

Cette scénette montre comment les robots pourront être utiles dans un futur proche dans le cadre de personne âgée pouvant être isolée socialement.
Au-delà de la diffusion des informations, Nao pourra aussi service de boîte mail interactive et aussi répondre au téléphone. Sur ce dernier point, Rodolphe Gelin insiste sur le fait, que cette fonctionnalité peut, par exemple, éviter des accidents.

En règle générale, les personnes agées se précipitent sur le téléphone lorsqu'elles reçoivent un appel et que c'est une des causes principales de chute. Avec le robot, cela limitera ces situations puisqu'il pourra prendre l'appel et éviter à la personne de faire un déplacement précipité.

A la fin de cette vidéo (fiction), le speaker précise que la situation montrée n'est pas encore possible. Aujourd'hui, le principal frein à la fluidité dans les interactions entre humain et robot dans une situation courante de la vie de tous les jours est la difficulté pour le robot à entendre et interpréter les messages oraux qui ne lui sont pas adressé explicitement.

Par exemple, vous êtes dans votre canapé, le robot est dans une autre pièce vous lui demandez quelque chose, il aura des difficultés à savoir qu'on s'adresse à lui directement et surtout entendre l'ordre. La raison principale à ce problème est <em>la pollution sonore</em> (ventilateur CPU, lorsqu'il parle, les bruits périphériques, etc).

Rodolphe Gelin se veut rassurant, ces obstacles ne sont évidemment pas insurmontable mais il reste tout de même du travail pour atteindre cette cible.

Les perspectives des travaux menés permettront de faire en sorte que le robot puisse évoluer au contact de la personne qu'il accompagnera. Il apprendra au fur et à mesure du comportement de la personne et à termes à <em>réfléchir</em> par rapport à ses habitudes.
Il pourra également, surveiller des comportements suspects comme une chute, un endormissement trop fréquent, etc) et dans ces situations critiques prévenir autrui.

D'ailleurs les organismes d'assurance s'intéressent particulièrement à ce projet. Il permettra de rationaliser les situations d'urgence.

Un point sur lequel Rodolphe a insisté est que l'on pourrait penser que ce petit robot pourrait créer un isolement social pour les personnes âgées. A cela, il répond que bien au contraire, le robot pourrait également se soucier de cet aspect et créer ce lien social en créant le contact avec d'autres personnes (proposer des appels, proposer des envois de mail, etc).

Ensuite, il nous a montré plusieurs petites vidéos présentant comment le robot pourrait apprendre de son environnement (au niveau des sons, des mouvements, etc)

Enfin, Rodolphe Gelin conclut par le fait que tous les apprentissages réalisés par les robots devront être partagé pour permettre de capitaliser sur ces connaissances précieuses.

Aussi, il a mis en avant les problématiques de sécurité et le fait que les robots devaient absolument être protéger d'une manière ou d'une autre du piratage étant donné la place qu'il prendrait dans le quotidien des humains.
Sur ce dernier sujet, il implique la responsabilité du <strong>développeur</strong> par rapport au fait qu'un robot est un outil et comme tous outils, il peut servir à faire des choses bien, ou pas...

Bien qu'elle est une teinture de science-fiction (assez proche) cette keynote était très intéressante et ouvre beaucoup de perspectives sur l'avenir.

<h3>La problématique du contrôle des technologies de l'information</h3>

La troisième keynote est présentée par <strong>Eric Filiol</strong>. Directeur du centre de recherche de l'ESIEA, il est un expert français en cryptologie et virologie informatique. Il a été lieutenant-colonel de l'armée de terre française.

On entend de plus en plus de faits mettant en cause les libertés d'expression et les actions visant à imposer un contrôle sur les technologies de l'information.

Eric rappelle, que depuis 60ans les technologies de l'information sont faites par des développeurs ... mais que depuis 15 ans, elles sont régies par des personnes n'y comprenant rien, les Hommes politiques.

Si l'on regarde l'histoire passée, la gouvernance était organisée de façon pyramidale ou le sommet envoyait des ordres à la base. Les technologies de l'information (internet) ont changé cette organisation verticale; L'information circule beaucoup plus facilement et peu à peu s'impose un mode <strong>collaboratif</strong>.

Les strates politiques n'arrivent pas à prendre le train marche et plutôt que de s'adapter et d'accompagner ce mouvement, ils préfèrent en prendre le contrôle et de mettre sous surveillance les agissements des citoyens. Pour un état cette prise de contrôle abusive est un aveu de faiblesse.

Plusieurs faits marquant de tentatives de contrôle comme Cocom, Itar, arrangements de Wassenaar, etc.

Toutes ces actions sont légitimées, par nos politiques, par les faits terroristes et autres tragédies marquantes de l'actualité.

Eric Filiol cite une phrase historique du Cardinale de Richelieu : "<em>Qu'on me donne 6 lignes écrites à la main de n'importe quel honnête homme j'y trouverai de quoi le faire pendre</em>".

En laissant les choses faire par les groupes politiques, on s'expose à une dictature de la donnée, une perte des valeurs démocratiques fondamentales et <strong>une perte du libre arbitre</strong>.

Eric Filiol nous donne une nouvelle citation : "<em>Pas de libre arbitre -&gt; pas de liberté ... Pas de vie privée -&gt; pas de libre arbitre</em>".

Par cette phrase, il nous invite à rester vigilant sur l'importance de garder un droit sur sa vie privée et de défendre fermement nos données privées. (même si l'on peut considérer que l'on n'a rien à cacher).

Il note les évolutions positives qu'il faudrait engager pour aller dans ce sens :

<ul>
<li>Le respect de la vie privée,</li>
<li>Inscription de ce respect dans la constitution,</li>
<li>Renforcer le rôle du juge d'instruction,</li>
<li>Créer un comité d'éthique.</li>
</ul>

Enfin il conclut en remettant au centre le <strong>développeur</strong>.

Il explique que le développeur à une part de responsabilité dans cette '<em>bataille</em>'. Il est le gardien de la technologie (limiter les bugs, les backdoors, la qualité, etc) dans ce sens une responsabilité morale.

<h3>Reading and Writing in 20 Years</h3>

Le dernière keynote est présentée par <strong>Dan Allen</strong> project leader sur le projet <a href="http://asciidoctor.org/">asciidoctor</a>.

Dan est venue parler de l'importance des écrits dans l'histoire de l'humanité.
Toutes les formes d'écritures depuis la nuit des temps ont permit de comprendre comment nos ancêtres vivaient.

Au tout début, les écrits étaient des dessins, puis l'écriture est arrivée, ensuite c'est l'imprimerie et maintenant l'ère du numérique avec les outils informatiques.
Jusqu'à une vingtaine d'années en arrière, les livres étaient la source principale de la connaissance, aujourd'hui ce support physique est en '<em>déclin</em>'.

Ce déclin n'est absolument pas synonyme que l'homme s'est arrêté d'écrire bien au contraire, il n'a jamais été autant productif en matière d'écriture. Ce qui a changé c'est le support d'écriture.

Au-delà du simple faite d'écrire, ce qui permet de conserver cette mémoire à travers les âges c'est le partage de cette information.

Aujourd'hui, si le partage des écrits est facilité par le support numérique, il se pose quand même la question du format de partage. Le standard adopté (en général) est le format PDF, bien que celui-ci a été créé plus pour l'impression. Ce que Dan propose est plutôt la mise en place d'un format pivot permettant l'écriture, l'échange et à terme l'impression. Mais quel pourrait être ce format ? ;)

Un autre problème pouvant interférer est le langage. En effet, un écrit rédigé dans une langue, peut-être traduit dans plusieurs autres languages. Le problème est la précision avec laquelle la traduction est faite. On peut perdre du sens sur l'idée originelle et par conséquent induire des erreurs pour les générations futures.

En conclusion, Dan Allen encourage l'écrivain qui est en nous a continuer d'écrire et partager sans retenue. (l'idéal serait aussi de la faire en <em>Asciidoctor</em> :P )]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>378</wp:post_id>
		<wp:post_date>2015-04-13 23:22:48</wp:post_date>
		<wp:post_date_gmt>2015-04-13 23:22:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devoxx-france-2015-keynotes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="2015"><![CDATA[2015]]></category>
		<category domain="post_tag" nicename="agilite"><![CDATA[agilité]]></category>
		<category domain="category" nicename="conference"><![CDATA[conférence]]></category>
		<category domain="category" nicename="devoxx"><![CDATA[Devoxx]]></category>
		<category domain="post_tag" nicename="devoxxfrance"><![CDATA[DevoxxFrance]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpenDataCamp 2015</title>
		<link>https://thecoderwriter.wordpress.com/2015/04/28/opendatacamp-2015/</link>
		<pubDate>Tue, 28 Apr 2015 22:53:38 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=385</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://thecoderwriter.files.wordpress.com/2015/04/opendatacamppict.png"><img class="  wp-image-426 aligncenter" src="https://thecoderwriter.files.wordpress.com/2015/04/opendatacamppict.png?w=300" alt="OpendatacampPict" width="528" height="132" /></a>

Cette année encore la réunion des amoureux de la donnée à fait l'ouverture de la conférence Devoxx organisé par Etalab, la startup d'état ménée par Pierre Pezziardi](https://twitter.com/ppezziardi).

L'objectif de cette conférence est de mettre dans une même pièce des personnes passionnées par la data et de les faire travailler ensemble.
Les travaux traités au cours de cette journée visent à améliorer les données de la plate-forme <strong>data.gouv.fr. </strong>J'ai participé à l'édition de l'année dernière et ça été une très bonne expérience.

<h2>Retrospective : édition 2014</h2>

L'année dernière j'avais travaillé sur un jeu de données sur l'évolution du nombre d'accidents sur une période données. Nous étions un groupe d'une dizaine de personnes à nous creuser la cervelle sur la manière d'exploiter ce jeu de données brutes. Durant la journée nous nous étions répartie en petit groupe pour travailler sur des axes différents.
L'objectif de la journée était de publier sur le site data.gouv.fr une visualisation des données sous un certain angle.
Avec <a href="https://twitter.com/antoine_roux">Antoine Roux</a> nous avons formé un binôme et publier cette <a href="https://www.data.gouv.fr/fr/reuses/impact-des-conditions-des-accidents-corporels-de-la-circulation-sur-la-frequence-et-la-gravite/">visualisation</a>

L'événement est gratuit et se déroule en marge de la conférence Devoxx France. On retrouve tout type de profil parmi mes participants : le développeur, le datascientist, le porteur d'un projet, etc.

L'expérience de l'année dernière était très intéressante malgré le fait que je sois complètement débutant dans l'art et ma manière de <em>jouer</em> avec des données. Lors de la session de 2014 j'ai appris plein de choses :D. 
Fort d'une formation suivie du coursera : (data science)[https://thecoderwriter.wordpress.com/2015/04/04/data-science-specialisation-coursera/], je venais plus confiant à l'édition de 2015 en me disant que j'allais mettre à profit ces connaissances.

<h2>Edition 2015</h2>

Mercredi 8 avril 2015, 9h30 début de l'OpenDataCamp dans une petite salle du palais des Congres. Lorsque j'arrive, les sujets sont en cours de présentation.

<ul>
<li><em>Transition énergétique</em> : Spécifier une application type <strong>mes-aides.org</strong>, permettant de mettre avant les aides disponibles pour permettre aux ménages de faire leurs transitions énergétiques.</li>
<li><em>Netflix emploi</em> : Création d'un moteur permettant d'identifier les offres d'emplois cachés. Le moteur se baserait sur des informations statistiques, économiques, géographiques des entreprises pour essayer de détecter des postes à pouvoir.</li>
<li>Api RDF : Création d'une API permettant la transformation de fichier au format CSV au format RDF (Web sémantique)</li>
<li>Création/enrichissement d'APIs de moissonnage de données.</li>
</ul>

Parmi tous ces sujets, j'ai choisi la transition énergétique. Pour être tout à fait honnête, j'ai choisi ce sujet sans vraiment réfléchir. Ce qui m'a motivé, c'est la possibilité de travailler avec P. Pezziardi, qui était à l'origine de cette proposition.

L'objectif du travail que nous allions réaliser était de définir un workflow de questions que l'on pourrait poser à un internaute afin d'identifier ces besoins en matière de transition énergétiques. Ensuite, lui proposer les aides (ex crédit d'impot) auquel il peut avoir recours pour faire ses travaux.

L'idée est de pouvoir également le maximum d'informations contextuelles par rapport aux réponses apportées au fur et à mesure. 
Dans cet exercice nous partions d'une feuille blanche.  La première heure n'a pas été productive, effectivement le sujet est un peu vaste. Puis armé d'un feutre et d'un paperboard nous avons commencé à construire progressivement les questions. Face à ces questions, il fallait identifier les sources de données permettant de contextualiser la réponse.

Par exemple, la première question posée est naturellement, l'adresse postale de la personne. En fonction, de la localisation géographique on est capable de déterminer : 
 * Climat, 
 * potentiel solaire,
 * température (max/min),
 * thermographie aérienne,
 * altitude.
 * à partir du cadastre : affichage d'une petite carte avec visualisation des polygones de bâti / sélection en cas d’erreur

L'ensemble des questions posées feront aboutir à un profil énergétique et par rapport à la moyenne nationale l'internaute pourra se situer.

Cette journée de brainstorming a permis de créer une première version de spécifications avec lesquels Pierre pourra aller voir les ministères pour défendre et expliquer le projet. C'est à peu près la même démarche qui avait été mise en place pour le site <a href="https://mes-aides.gouv.fr/">mes-aides</a>.

Je pensais manipuler et traiter de la donnée lors de cette journée.  Au final, j'ai passé la journée à réfléchir et concevoir une interface et un workflow. 
Nous étions au final 3 personnes travailler sur le sujet. Cette analyse a été très intéressante et l'aboutissement une certaine satisfaction. 
Si le projet voit le jour, le code source sera accessible sur le dépôt github d'Etalab.

La fin de journée, c'est soldée par une présentation de l'avancement de chacun des sujets présentés le matin.

Si l'année prochaine vous n'avez pas la possibilité d'avoir un billet pour l'université Devoxx, je vous recommande la participation à l'évènement OpenDataCamp.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>385</wp:post_id>
		<wp:post_date>2015-04-28 22:53:38</wp:post_date>
		<wp:post_date_gmt>2015-04-28 22:53:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>opendatacamp-2015</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IMG_20150410_093109~2</title>
		<link>https://thecoderwriter.wordpress.com/2015/04/13/devoxx-france-2015-keynotes/img_20150410_0931092/</link>
		<pubDate>Mon, 13 Apr 2015 23:19:54 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/04/img_20150410_0931092.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date>2015-04-13 23:19:54</wp:post_date>
		<wp:post_date_gmt>2015-04-13 23:19:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>img_20150410_0931092</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>378</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/04/img_20150410_0931092.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:3623;s:6:"height";i:1811;s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/img_20150410_0931092.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";d:2;s:6:"credit";s:0:"";s:6:"camera";s:7:"Nexus 6";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1428658269;s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"3.82";s:3:"iso";s:3:"117";s:13:"shutter_speed";s:18:"0.0083333333333333";s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/img_20150410_0931092.jpg]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mix-IT édition 2015</title>
		<link>https://thecoderwriter.wordpress.com/2015/04/19/mix-it-edition-2015/</link>
		<pubDate>Sun, 19 Apr 2015 17:45:18 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=389</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://thecoderwriter.files.wordpress.com/2015/04/logo-mixit.png"><img src="https://thecoderwriter.files.wordpress.com/2015/04/logo-mixit.png?w=300" alt="Mix-IT 2015" width="300" height="76" class="aligncenter size-medium wp-image-390" /></a>

Cette année la conférence Mix-It s'est déroulée les 16 et 17 avril 2015. C'est la première fois que je participais à cette conférence lyonnaise. D'ailleurs je me suis retrouvé la-bas presque par hasard, il faut que je vous raconte.

<h1>Pour la petite histoire</h1>

Pendant les appels à orateurs, j'avais soumis un sujet sur les lighting talks (LT). Un sujet que j'avais déjà présenté sur d'autres conférences.
Le principe des LT est assez simple. Il vous donne accès à une tribune pour présenter un sujet pendant la pause déjeuné du premier jour de la conférence.

L'ensemble des sujets proposés est ensuite soumis à un vote des conférenciers. Seuls les sujets arrivés dans le top 5 pourront passer. Une chose importante pour la suite est que le LT ne donne pas accès à une place automatiquement.

Le sujet était proposé, je n'avais qu'à patienter jusqu'à l'ouverture de la billetterie...
Le jour dit arrive.. et manque de chance.. je n'ai pas pu avoir de place, elles sont parties trop vite. Donc adieu à mes rêves de gloire en présentant mon sujet ;).

Malgré le fait que je n'ai pas eu de billet, je continuais à surveiller les votes sur les LT. Le mien conservait une bonne place dans le classement.

A ma grande surprise, je reçois dans la nuit de lundi à mardi précédant la conférence, un mail des organisateurs m'indiquant que mon sujet était dans le top 10 et que celui-ci avait de bonnes chances de passer et que pour cette raison, il me proposait exceptionnellement un billet pour assister à la conférence.

Bien sûr j'acceptais la proposition et je n'avais plus qu'à prendre un billet de train, réserver un hôtel, avoir l'accord de ma femme, de mon client et de ma boîte... tout ça en moins de 2 jours.. J'aime le sport ;)

Je vous passe les détails, mais jeudi matin, j'étais dans le train à 6h58 (levé à 4h15) en partance pour Lyon et la conférence Mix-IT... quelle histoire!

<h1>Jour 1</h1>

Je suis arrivé au milieu de la keynote d'ouverture. Après un passage au café et croissant. Je suis allé saluer mes collègues Lyonnais de Zenika j'ai attaqué les conférences.

<h2>Changer d'avis sur Javascript</h2>

Cette conférence présentée par <strong>Damien Feugas</strong> portait sur la nouvelle version de la spécification ECMAScript, la version 6.

Damien nous a présenté toutes les nouvelles features de cette nouvelle mouture.
D'une manière générale, c'est un tournant pour le langage. Beaucoup de choses ont été améliorées au niveau de la syntaxe.

<ul>
<li>Il sera possible de créer des classes</li>
<li>Gestion des strings - Interpolation</li>
<li>Une gestion plus rationnelle des scopes</li>
<li>Heritage avec le mot clef <em>extends</em></li>
<li>Faire des fonctions anonymes simplifiées</li>
<li>plus de perte du this</li>
</ul>

D'une manière générale, le code est plus concis et plus clair.

Cette liste est loin d'être exhaustive, mais n'hésitez pas à aller voir la spec.

<h2>Apprenez les ficelles de Marionette</h2>

Cette deuxième conférence a été présentée par <strong>Romain Maton</strong>.
Il est venue nous présenter le framework Marionette qui vient compléter le célèbre autre framework Backbone.js.

Aujourd'hui, backbone souffre de critique autour du problème de fuite mémoire, d'un manque de composant de haut niveau.

Marionette.js est la solution à ces problèmes et évitera la migration vers un autre framework web type Angular ou Ember.

Romain a présenté son sujet sous la forme d'un live coding. La construction de 0 d'une application todolist.
A chaque étape, il nous a expliqué les tenants et les aboutissants de ce qu'il était en train de faire.
sa présentation était très intéressante et m'a réellement donné envie d'approfondir le sujet.

<h2>Les lightning Talks</h2>

Pendant l'heure du déjeuner, on a pu assister à des lightings talk, présentation de 5 mn. La mienne n'a finalement pas été retenue.

Le premier talk était sur l'utilisation des Raspberry dans une maison!. <strong>Johan Poirier</strong> est venue nous présenter sa passion pour ces petits boitiers.

Le deuxième talk faisait état des difficultés que les développeurs ayant plus d'expérience (un peu plus vieux avec une situation personnelle plus contraignante) à faire de la veille technique. Ce que <strong>Thibault Jouannic</strong> entendait par là c'est qu'il avait moins de temps à consacrer à cette veille technique et il ne pouvait plus tester par lui-même tous les <em>buzzwords</em> émergents.
Aujourd'hui il devait rationaliser sa veille en se posant des questions sur:

<ul>
<li>La pérennité de tel ou tel framework,</li>
<li>Est-ce que cet outil est mature pour partir en prod,</li>
<li>Est-ce que je peux adresser mon problème avec cet outil?</li>
<li>etc.</li>
</ul>

En ayant cette réflexion en amont, il s'assure de mettre à profit son précieux temps sur des choses qui lui seront vraiment utiles.

Le speaker du troisième talk est venue nous expliquer comment HTML5 allait révolutionner les CMS de demain. <strong>Mickaël Andrieux</strong> est plus venu faire un petit coup de pub sur le produit de sa société. Je n'ai pas trouvé la valeur ajoutée de son talk.

L'avant-dernière présentation était sur un sujet vraiment très intéressant auquel je suis particulièrement sensibilisé aujourd'hui : <em>"les entreprises libérées"</em>. Il venait nous présenter les choix qui avaient été pris dans sa société et les axes sur lesquels ils avaient joué pour améliorer le situation au quotidien.

La première chose, c'est la suppression du <strong>comment</strong>, c'est à dire, qu'il avait éradiqué le fait que les strates managériales indiquaient à ceux qui réalisent comment travailler. Une présentation vraiment originale qui montre qu'il est possible d'améliorer son quotidien au travail.

Le dernier talk présenté par <strong>Agnés Haasser</strong> traitait des PCS : Projets Créatifs Stupides. L'idée d'un projet de ce type est de se fixer un objectif très très ambitieux à réaliser en un minimum de temps. Par exemple, la création d'un jeux vidéo en 48h. L'objectif est atteint si le jeu est jouable. Un autre exemple est l'écriture d'un roman de 500pages en 1 mois.

Le bilan dressé par Agnes est que ce genre d'exercice lui a permis d'apprendre à optimiser son temps de travail, d'apprendre à apprendre et d'être capable de garder le focus sur un sujet pendant une période donnée. Très intéressant, c'est un sujet à creuser.

<h2>24 minutes pour bâtir une appli mobile</h2>

Cette conférence était présentée par <strong>Sébastien Blanc</strong>. L'objectif de Sébastien était de développer sous nos yeux une application mobile <em>todo liste</em> déployable indifféremment sur toutes les plateformes mobiles du marché (IOS, Android et même windows mobile). Cette application se basera sur les frameworks suivants : Cordova, Ionic et comme bonus elle sera sécurisée via le framework Keycloak. Sébastien veut réaliser tout ça en 24 minutes.

Dans les grandes lignes il a atteint son objectif, malgré des soucis de taille d'écran...
La présentation était <em>pêchue</em> et son le ton de l'humour.

Après cette conférence, je me suis retranché dans mon hôtel. La fatigue était trop présente et je n'arrivais plus à garder les yeux ouverts.

<h1>jour2</h1>

<h2>Introduction à l’IoT: du capteur à la donnée</h2>

Philippe Antoine et Sameh Ben Fredj nous ont fait un état de l'art de l'Internet Of Things (IoT). L'idée était de donner une vision globale des tenants et aboutissant de l'IOT. 
La présentation commence par une énumération des endroits ou l'on trouve l'IoT, quels sont les services proposés par les objets connectés. On peut s'apercevoir que les objets connectés sont déjà pas mal présents dans notre quotidien. 
Ensuite, ils nous présentent les services qu'ils pourront rendre notamment dans le cadre de l'aide aux personnes âgées. 
La deuxième partie de la conférence, nous permet de rentrer dans les détails techniques et architecturaux de l'IoT. On découvre les différentes briques composant l'Internet of Things.

Cette présentation a été très instructive et m'a permis de mieux comprendre ce qu'il se cachait derrière ce buzzword.

Plus d'informations <a href="http://fr.slideshare.net/SamehBENFREDJ/introduction-liot-du-capteur-la-donnepresentation-mixit2015">ici</a> avec les slides de la présentation

J'ai consacré la deuxième partie de la journée à des workshops.

<h2>Initiation au Machine Learning avec Spark</h2>

Actuellement je suis très investie sur tout ce qui touche au <em>BigData</em>. J'ai suivi pas mal de conférences et hand's on sur le sujet. C'est naturellement que je me suis dirigé vers celui-là.

La première chose importante pour évaluer la qualité d'un <em>hand's on</em> est la facilité de mise en place de l'environnement de travail. Pour celui-ci je mettrais 10/10 (malgré un petit problème de conf au démarrage).

Le bilan de ce workshop est très positif. Le sujet a vraiment été bien traité. Nous nous sommes focalisé sur les différents algorithmes liés au machine learning et les exemples au niveau du code permettaient de vraiment bien comprendre comment les utiliser. Contrairement à d'autres ateliers, celui-ci n'était pas une énième formation à Spark. Un grand bravo à <strong>Alban Phélip</strong> et <strong>Yoann Benoit</strong>

<h2>Prise en main des outils JDK:jstat, jstack et jmap</h2>

Ce workshop portait sur des outils livrés avec java que l'on n'a pas forcément l'habitude d'utiliser. 
Les outils en question sont : 
 * jstat,
 * jstask,
 * jmap.

Ils permettent de faire une analyse fine du comportement de la JVM au runtime du point de vue de la mémoire utilisée. Ils sont très pratiques pour effectuer cette analyse directement sur les serveurs de production sans avoir besoin d'UI. En règle générale on est plus habitué aux outils comme JVisualVM ou Jconsole. 
Le hand's on était très bien fait. Tout l'environnement était packagé dans une VM avec une recette de cuisine à suivre pas à pas. 
Cela a permis de se concentrer sur l'essentiel de l'atelier et d'apprendre plein de choses. Merci à <strong>Angelique Henry</strong> pour la qualité de ce hand's on.

Et voilà le deuxième jour touche à sa fin et il est déjà l'heure pour moi de me diriger vers la gare de Lyon la part Dieu pour prendre mon train.

Je garderai une très bonne impression de cette première participation à la conférence Mix-IT. J'y ai vu des talks très intéressants et tout ça dans une ambiance conviviale.
Un grand bravo aux organisateurs et j'espère pouvoir être présent l'année prochaine.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>389</wp:post_id>
		<wp:post_date>2015-04-19 17:45:18</wp:post_date>
		<wp:post_date_gmt>2015-04-19 17:45:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mix-it-edition-2015</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="agilite"><![CDATA[agilité]]></category>
		<category domain="category" nicename="conference"><![CDATA[conférence]]></category>
		<category domain="post_tag" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>1</wp:comment_id>
			<wp:comment_author><![CDATA[angeliquehenry]]></wp:comment_author>
			<wp:comment_author_email>angelique.jard@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.215.132.114</wp:comment_author_IP>
			<wp:comment_date>2015-04-20 08:51:54</wp:comment_date>
			<wp:comment_date_gmt>2015-04-20 08:51:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci pour ce retour très positif sur mon atelier :). Pour information c'est Damien Feugas le speaker sur javascript.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429519914.925671100616455078125;s:7:"message";s:47:"Akismet a revérifié et validé ce commentaire";s:5:"event";s:9:"check-ham";s:4:"user";s:14:"angeliquehenry";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1429520322]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1429520322]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429520322.6742188930511474609375;s:7:"message";s:45:"fabszn changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"fabszn";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Fabrice Sznajderman]]></wp:comment_author>
			<wp:comment_author_email>fabszn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://thecoderwriter.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>163.116.6.12</wp:comment_author_IP>
			<wp:comment_date>2015-04-20 08:59:25</wp:comment_date>
			<wp:comment_date_gmt>2015-04-20 08:59:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Merci Angélique pour ton retour, j'ai corrigé la coquille.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>14541453</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1429520365]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429520365.3674190044403076171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"fabszn";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1429520365]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Mix-IT 2015</title>
		<link>https://thecoderwriter.wordpress.com/2015/04/19/mix-it-edition-2015/logo-mixit/</link>
		<pubDate>Sun, 19 Apr 2015 13:55:35 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/04/logo-mixit.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>390</wp:post_id>
		<wp:post_date>2015-04-19 13:55:35</wp:post_date>
		<wp:post_date_gmt>2015-04-19 13:55:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>logo-mixit</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>389</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/04/logo-mixit.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/logo-mixit.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:700;s:6:"height";i:178;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/logo-mixit.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Capture d&#039;écran 2015-04-19 19.48.38</title>
		<link>https://thecoderwriter.wordpress.com/2015/04/13/devoxx-france-2015-keynotes/capture-decran-2015-04-19-19-48-38/</link>
		<pubDate>Sun, 19 Apr 2015 17:48:57 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/04/capture-dc3a9cran-2015-04-19-19-48-38.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date>2015-04-19 17:48:57</wp:post_date>
		<wp:post_date_gmt>2015-04-19 17:48:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>capture-decran-2015-04-19-19-48-38</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>378</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/04/capture-dc3a9cran-2015-04-19-19-48-38.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:508;s:6:"height";i:216;s:4:"file";s:113:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/capture-dc3a9cran-2015-04-19-19-48-38.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/capture-dc3a9cran-2015-04-19-19-48-38.png]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Processing Instruction Target Matching « [xX][mM][lL] » is Not Allowed</title>
		<link>https://thecoderwriter.wordpress.com/2015/06/29/the-processing-instruction-target-matching-xxmmll-is-not-allowed/</link>
		<pubDate>Mon, 29 Jun 2015 11:14:24 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=423</guid>
		<description></description>
		<content:encoded><![CDATA[<em>J'ai récupéré cet article de mon blog précédent <a href="https://fsznajderman.wordpress.com/page/2/">ici</a></em>

Quel titre barbare! En fait c'est le message d'erreur remonté lorsque l'on essaye de parser un fichier xml.

C‘est le genre d‘erreur, je trouve, qui peut faire perdre pas mal de temps :

<blockquote>The Processing Instruction Target Matching « [xX][mM][lL] » is Not Allowed</blockquote>

Bizarrement dans mon IDE favori (Eclipse, à l'époque) je l’ai eu en francais :

<blockquote>La cible de l’instruction de traitement correspondant à « [xX][mM][lL] » est interdite</blockquote>

Cette erreur est du au fait qu’il y ai un espace, ou une ligne, avant la ligne entête :

En référence le site ou j’ai trouvé la solution : ici]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>423</wp:post_id>
		<wp:post_date>2015-06-29 11:14:24</wp:post_date>
		<wp:post_date_gmt>2015-06-29 11:14:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-processing-instruction-target-matching-xxmmll-is-not-allowed</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="error"><![CDATA[Error]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="parsing"><![CDATA[parsing]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<category domain="post_tag" nicename="xml"><![CDATA[Xml]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[12145945213]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>OpendatacampPict</title>
		<link>https://thecoderwriter.wordpress.com/2015/04/28/opendatacamp-2015/opendatacamppict/</link>
		<pubDate>Tue, 28 Apr 2015 06:36:04 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/04/opendatacamppict.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>426</wp:post_id>
		<wp:post_date>2015-04-28 06:36:04</wp:post_date>
		<wp:post_date_gmt>2015-04-28 06:36:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>opendatacamppict</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>385</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/04/opendatacamppict.png</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/opendatacamppict.png]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:636;s:6:"height";i:159;s:4:"file";s:92:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/opendatacamppict.png";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Future et Promise en Scala</title>
		<link>https://thecoderwriter.wordpress.com/?p=442</link>
		<pubDate></pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=442</guid>
		<description></description>
		<content:encoded><![CDATA[Cet article a pour objectif de clarifier les deux notions suivantes que sont les Futures et les Promises. 
Ne vous fiez par au titre, l'idée est de donner une vision (j'espère) plus pragmatique pour en comprendre les tenants et les aboutissants.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>442</wp:post_id>
		<wp:post_date>2015-05-03 07:16:34</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devoxx France 2015 - 4 ième édition</title>
		<link>https://thecoderwriter.wordpress.com/2015/06/09/devoxx-france-2015-4-ieme-edition/</link>
		<pubDate>Tue, 09 Jun 2015 18:23:06 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=444</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Les préparatifs</h2>

Mercredi 8 avril 2015 au soir, préparation aux deux jours de conférence. La check list n'a pas beaucoup changé par rapport à l'année dernière :

<ul>
<li>Batterie du téléphone portable chargée à bloc,</li>
<li>Batterie du lap top idem,</li>
<li>Bloc-notes + stylos,</li>
<li>Tenue confortable,</li>
<li>Lunette (ça c'est nouveau! :)),</li>
<li>Mail permettant de retirer mon badge.</li>
</ul>

Ensuite vient l'organisation de la journée, établir le programme des conférences auquel je souhaite assister. Et c'est là que tout se complique. 
En effet le grand changement, par rapport à 2014, c'est le lieu ou se tiendra la conférence.

L'année dernière, Devoxx France se tenait au <strong>Marriott</strong>, cette année c'est au <strong>palais des  Congrès</strong> que se déroule l'évènement.

Beaucoup plus de conférences proposées. les choix deviennent difficiles :). En effet  là ou l'année dernière 5 conférences se déroulaient en même temps, cette année, il y aura jusqu'à 8 conférences en parallèle.

Après un arbitrage sévère, le programme est enfin prêt (même si je sais que tout est encore mutable. :P)

Il ne me reste plus qu'à me coucher tôt pour être frais et dispo le lendemain du grand jour.

L'arrivée porte Maillot fait son petit effet. Lorsque l'on rentre dans le palais des Congrès que l'on monte au niveau 2, la conférence prend une nouvelle dimension par rapport aux années précédentes, c'est impressionnant.

1800 développeurs passionnés sont réunis, cela représente 300 personnes supplémentaires par rapport à l'année dernière. L'augmentation du nombre de convives ne se ressent pas trop étant donné l'espace disponible.

<h2>Les Keynotes</h2>

<h3>Keynote de l'équipe Devoxx France</h3>

Bref, rentrons dans le vif du sujet. La journée commence par une première keynote tenue par <strong>Nicolas Martignole</strong>, <strong>Antonio Goncalves</strong> et <strong>Zouheir Cadi</strong>, les fondateurs de la conférence française. 
Durant cette keynote, ils font un bilan sur le chemin parcouru pour aboutir à cette édition 2015.

Ils font également une annonce importante; la Conférence <strong>JMaghreb</strong> rejoint la famille Devoxx et devient <strong>Devoxx Maroc</strong>. Comme les autres membres de la famille cette conférence sera un rendez-vous incontournable des développeurs, passionnés et entrepreneurs.

Au programme des sessions, des ateliers pratiques, des tables rondes, hackatons autour des sujets techniques liés au web, mobile, devops, gaming, sécurité.

Devoxx Maroc se tiendra au Mégarama de Casablanca du 16 au 18 novembre 2015.

Pour ceux qui souhaiterait tenter l'aventure de Devoxx Maroc en tant que speaker, le CFP ouvre le 1er mai prochain.

<h3>Le futur de la robotique personnelle</h3>

La seconde keynote, intitulé <em>robot humanoïde pour tout le monde</em>, a été présentée par <strong>Rodolphe Gelin</strong> sur le thème du futur de la robotique personnelle.

Il est directeur de la recherche dans la société Aldebaran.

Il commence par présenter différents robots développés par Aldebaran Nao, Pepper, Romeo.

Pour illustrer le thème de sa keynote, il nous propose une vidéo mettant en situation le premier robot de la liste (Nao). On voit une grand-mère interagir avec le robot. 
Elle commence par l'appeler et lui demander de venir. Ensuite, elle  lui demande les dernières informations importantes de l'actualité. Le robot s'exécute et lui énumère la liste. Lorsque la dame veut avoir plus de détails sur un titre, elle le demande naturellement au robot qui lui donne plus d'informations.

Cette saynète montre comment les robots pourront être utiles dans un futur proche dans le cadre de personne âgées pouvant être isolée socialement. 
Au-delà de la diffusion des informations, Nao pourra aussi servir de boîte mail interactive et aussi répondre au téléphone. Sur ce dernier point, Rodolphe Gelin insiste sur le fait, que cette fonctionnalité peut, par exemple, éviter des accidents.

En règle générale, les personnes agées se précipitent sur le téléphone lorsqu'elles reçoivent un appel et que c'est une des causes principales de chute. Avec le robot, cela limitera ces situations puisqu'il pourra prendre l'appel et éviter à la personne de faire un déplacement précipité.

A la fin de cette vidéo (fiction), le speaker précise que la situation montrée n'est pas encore possible. Aujourd'hui, le principal frein à la fluidité dans les interactions entre humain et robot dans une situation courante de la vie de tous les jours est la difficulté pour le robot à entendre et interpréter les messages oraux qui ne lui sont pas adressés explicitement.

Par exemple, vous êtes dans votre canapé, le robot est dans une autre pièce vous lui demandez quelque chose, il aura des difficultés à savoir qu'on s'adresse à lui directement et surtout entendre l'ordre. La raison principale à ce problème est <em>la pollution sonore</em> (ventilateur CPU, lorsqu'il parle, les bruits périphériques, etc).

Rodolphe Gelin se veut rassurant, ces obstacles ne sont évidemment pas insurmontable mais il reste tout de même du travail pour atteindre cette cible.

Les perspectives des travaux menés permettront de faire en sorte que le robot puisse évoluer au contact de la personne qu'il accompagnera. Il apprendra au fur et à mesure du comportement de la personne et à termes à <em>réfléchir</em> par rapport à ses habitudes. 
Il pourra également, surveiller des comportements suspects comme une chute, un endormissement trop fréquent, etc) et dans ces situations critiques prévenir autrui.

D'ailleurs les organismes d'assurance s'intéressent particulièrement à ce projet. Il permettra de rationaliser les situations d'urgence.

Un point sur lequel Rodolphe a insisté est que l'on pourrait penser que ce petit robot isolerai socialement les personnes âgées. A cela, il répond que bien au contraire, le robot pourrait également se soucier de cet aspect et créer ce lien social en créant le contact avec d'autres personnes (proposer des appels, proposer des envois de mail, etc).

Ensuite, il nous a montré plusieurs petites vidéos présentant comment le robot pourrait apprendre de son environnement (au niveau des sons, des mouvements, etc)

Enfin, Rodolphe Gelin conclut par le fait que tous les apprentissages réalisés par les robots devront être partagés pour permettre de capitaliser sur ces connaissances précieuses.

Aussi, il a mis en avant les problématiques de sécurité et le fait que les robots devaient absolument être protégé  d'une manière ou d'une autre du piratage étant donné la place qu'il prendrait dans le quotidien des humains.
Sur ce dernier sujet, il implique la responsabilité du <strong>développeur</strong> par rapport au fait qu'un robot est un outil et comme tous outils, il peut servir à faire des choses bien, ou pas...

Bien qu'elle ait une teinture de science-fiction (assez proche) cette keynote était très intéressante et ouvre beaucoup de perspectives sur l'avenir.

<h3>La problématique du contrôle des technologies de l'information</h3>

La troisième keynote est présentée par <strong>Eric Filiol</strong>. Directeur du centre de recherche de l'ESIEA, il est un expert français en cryptologie et virologie informatique. Il a été lieutenant-colonel de l'armée de terre française.

On entend de plus en plus de faits mettant en cause les libertés d'expression et les actions visant à imposer un contrôle sur les technologies de l'information.

Eric rappelle, que depuis 60ans les technologies de l'information sont faites par des développeurs ... mais que depuis 15 ans, elles sont régies par des personnes n'y comprenant rien, les Hommes politiques.

Si l'on regarde l'histoire passée, la gouvernance était organisée de façon pyramidale ou le sommet envoyait des ordres à la base. Les technologies de l'information (internet) ont changé cette organisation verticale; L'information circule beaucoup plus facilement et peu à peu s'impose un mode <strong>collaboratif</strong>.

Les strates politiques n'arrivent pas à prendre le train marche et plutôt que de s'adapter et d'accompagner ce mouvement, ils préfèrent en prendre le contrôle et de mettre sous surveillance les agissements des citoyens. Pour un état cette prise de contrôle abusive est un aveu de faiblesse.

Plusieurs faits marquant de tentatives de contrôle comme Cocom, Itar, arrangements de Wassenaar, etc.

Toutes ces actions sont légitimées, par nos politiques, par les faits terroristes et autres tragédies marquantes de l'actualité.

Eric Filiol cite une phrase historique du Cardinal de Richelieu : "<em>Qu'on me donne 6 lignes écrites à la main de n'importe quel honnête homme j'y trouverai de quoi le faire pendre</em>".

En laissant les choses faire par les groupes politiques, on s'expose à une dictature de la donnée, une perte des valeurs démocratiques fondamentales et <strong>une perte du libre arbitre</strong>.

Eric Filiol nous donne une nouvelle citation : "<em>Pas de libre arbitre -&gt; pas de liberté ... Pas de vie privée -&gt; pas de libre arbitre</em>".

Par cette phrase, il nous invite à rester vigilant sur l'importance de garder un droit sur sa vie privée et de défendre fermement nos données privées. (même si l'on peut considérer que l'on n'a rien à cacher).

Il note les évolutions positives qu'il faudrait engager pour aller dans ce sens :

<ul>
<li>Le respect de la vie privée,</li>
<li>Inscription de ce respect dans la constitution,</li>
<li>Renforcer le rôle du juge d'instruction,</li>
<li>Créer un comité d'éthique.</li>
</ul>

Enfin il conclut en remettant au centre le <strong>développeur</strong>.

Il explique que le développeur à une part de responsabilité dans cette '<em>bataille</em>'. Il est le gardien de la technologie (limiter les bugs, les backdoors, la qualité, etc) dans ce sens une responsabilité morale.

###Reading and Writing in 20 Years

Le dernière keynote est présentée par <strong>Dan Allen</strong> project leader sur le projet <a href="http://asciidoctor.org/">asciidoctor</a>.

Dan est venue parler de l'importance des écrits dans l'histoire de l'humanité. 
Toutes les formes d'écritures depuis la nuit des temps ont permit de comprendre comment nos ancêtres vivaient.

Au tout début, les écrits étaient des dessins, puis l'écriture est arrivée, ensuite c'est l'imprimerie et maintenant l'ère du numérique avec les outils informatiques.
Jusqu'à une vingtaine d'années en arrière, les livres étaient la source principale de la connaissance, aujourd'hui ce support physique est en '<em>déclin</em>'.

Ce déclin n'est absolument pas synonyme que l'homme s'est arrêté d'écrire bien au contraire, il n'a jamais été autant productif en matière d'écriture. Ce qui a changé c'est le support d'écriture.

Au-delà du simple faite d'écrire, ce qui permet de conserver cette mémoire à travers les âges c'est le partage de cette information.

Aujourd'hui, si le partage des écrits est facilité par le support numérique, il se pose quand même la question du format de partage. Le standard adopté (en général) est le format PDF, bien que celui-ci a été créé plus pour l'impression. Ce que Dan propose est plutôt la mise en place d'un format pivot permettant l'écriture, l'échange et à terme l'impression. Mais quel pourrait être ce format ? ;)

Un autre problème pouvant interférer est le langage. En effet, un écrit rédigé dans une langue, peut-être traduit dans plusieurs autres languages. Le problème est la précision avec laquelle la traduction est faite. On peut perdre du sens sur l'idée originelle et par conséquent induire des erreurs pour les générations futures.

En conclusion, Dan Allen encourage l'écrivain qui est en nous a continuer d'écrire et partager sans retenue. (l'idéal serait aussi de la faire en <em>Asciidoctor</em> :P )

<h2>Les conférences</h2>

Voici une synthèse des conférences auxquelles j'ai assisté. Le thème global des conférences que j'ai pu suivre s'oriente sur des sujets Big Data :

<ul>
<li>Machine learning et régulation numérique</li>
<li>Algorithmes distribués pour le Big Data</li>
<li>Machine Learning avec Spark, MLLib et D3.js</li>
<li>Un Spotify à la maison avec Spark &amp; Cassandra (Hands on)</li>
<li>Stockage et analyse temps réel d'événements avec Riak chez Booking.com</li>
</ul>

ainsi que des sujets l'agilité et le dev front:

<ul>
<li>Développeur sous influence,</li>
<li>Stratégie de mise en place de revues de code (Quickies),</li>
<li>L'expérience utilisateur est importante pour nous,</li>
<li>React, une autre façon de penser vos composants graphiques</li>
</ul>

et enfin deux sujets plus orientés tools et dev backend :

<ul>
<li>Les monoïdes démystifiés, en Java et avec des verres de bière</li>
<li>Applications Concurrentes Polyglottes avec Vert.x</li>
</ul>

Ci-dessous différents compte-rendus des conférences que j'ai tout particulièrement apprécié.

<h3>Machine learning et régulation numérique</h3>

C'est la première présentation à laquelle j'ai assisté. Autant dire que cela commençait très très bien. Aux commandes, deux excellents speakers : <a href="https://twitter.com/glaforge">Guillaume Laforge</a> et <a href="https://twitter.com/DidierGirard">Didier Girard</a>. 
Ils sont venues nous parler du <em>machine learning</em> et nous présenter ses concepts ainsi que les rouages de cette discipline.

En introduction, ils ont montré que chaque jour nous <em>subissons</em> le machine learning au travers de nos services favoris :

<ul>
<li>Gmail et la gestion du spam,</li>
<li>Amazon et son système de recommandations,</li>
<li>Netflix et la gestion de leur catalogue, un système de recommandations également (50% du contenu regardé est issu d'une recommandation),</li>
<li>FaceBook sélectionne l'information proposée par un moteur de recommandations.</li>
</ul>

<strong>Donc qu'est-ce que le machine learning?</strong> 
Le machine learning est la science qui permet à un algorithme d’apprendre sans avoir été explicitement programmé pour cela. Cette science se base sur un ensemble d'algorithmes permettant de classifier, regrouper, détecter des comportements communs entre des données.

Ils ont fait une présentation synthétique des différents types d'algorithmes mis en jeu :

<ul>
<li>Algo Supervisé : Regression,  Classification</li>
<li>Algo Non supervisé : Clusterisation, séparation des sources</li>
</ul>

La présentation s'est articulée autour de plusieurs commandements qui font le coeur de cette matière.

<strong>1er commandement - Tout Données tu collecteras</strong>

Il important d'avoir un jeu de données très important pour la création d'un modèle fiable qui puisse être généralisé.

<strong>2ième commandement - Les données tu analyseras</strong>

Une fois collectées, les données doivent être analysées pour leur donner un sens. Durant cette phase il ne faut pas tomber dans le piège de la corrélation et de la causalité. Comme par exemple le lien entre la consommation de chocolat et le faite d'obtenir un prix Nobel.

<strong>3ième commandement - N'apprend pas ce que tu sais déjà</strong>

Un modèle va apprendre au plus facile. Plutôt que de dire à mon modèle apprend les choses évidentes. On va supprimer les données que l'on connait déjà, ainsi le modele apprendra ce que je n'arrive pas à modéliser.

<strong>4ième commandement -  Tes données tu pré traiteras</strong>

Il est important de pré traiter les données afin de faciliter l'analyse. Par exemple, pour faire de la reconnaissance faciale. On va appliquer à la photo un traitement avant de lancer la reconnaissance (enlever la couleur, faire crop, redimensionner, augmentation des contrastes)

<strong>5ième commandement -  Ton algorithme tu choisiras</strong>

Pour faire l'analyse des données, il faudra choisir l'algorithme le plus adapté à la situation :

<ul>
<li>les plus proches voisins</li>
<li>Support vector machine</li>
<li>Random forest - Decision tree</li>
<li>Neutral network</li>
<li>Back propagation</li>
<li>Deep learning</li>
</ul>

<strong>6ième commandement - De l'intuition tu auras</strong>

En visualisant les données,le data scientiste, sur la base de son expérience, va être capable de percevoir des tendances.

<strong>7ième commandement : Ton système tu entraineras</strong>

Lorsque l'on créé un modèle il faut être capable de l'entrainer. Sur l'ensemble du jeu de données à disposition il faut faire une répartition : 60% pour l'apprentissage et 40% pour faire la généralisation (c'est proportion peuvent varier en fonction du contexte).

<strong>8ième commandement : Par coeur tu n'apprendras pas</strong>

Il faut faire attention au sur-apprentissage. Si le système apprend trop longtemps, il risque de finir par apprendre par coeur et les résultats seront faussés lors de la généralisation.

Didier et Guillaume nous ont énuméré une liste d'outils utilisés pour le machine learning :

<ul>
<li>R, </li>
<li>Weka</li>
<li>Octave</li>
<li>Google Prediction</li>
<li>Apache Mahout</li>
<li>Prediction.io</li>
<li>Mad.io</li>
<li>Scikit Learn</li>
</ul>

Avec cette présentation, le tour d'horizon est complet et peut servir de base pour commencer à aborder la science du machine learning.

Ils nous rappeler au terme de cette présentation le slogan suivant : <strong>BigData is scoring you</strong>. 
Donc il faut rester vigilant face aux informations que l'on nous suggère. Elles ont tendance à nous cloisonner dans l'information que l'on perçoit.

<h3>Développeur sous influence</h3>

Cette conférence était proposée par <a href="https://twitter.com/duquesnay">Guillaume Duquesnay</a>. Guillaume est un coach agile @ dévelopeur vétéran.

Fort de son rôle de coach agile, Guillaume a fait un état de lieu des problèmes que l'on peut rencontrer au sein d'une équipe. La frustration qu'un développeur peut ressortir parce que les chefs ne sont pas réceptifs à la nécessité d'investir sur tel ou tel sujet ou lorsque le vétéran de l'équipe impose une dictature technique au sein de l'équipe sans prendre en compte les idées de chacun.

Ces situations amènent des points de blocage ou le développeur sent qu'il est cantonné à son périmètre et ne peut en aucun cas influencer son entourage.

<strong>Être influent, c'est quoi? : l'art de changer les choses au quotidien, faire changer la trajectoire</strong>
Pour cela, il faut :

<ul>
<li>Avoir quelque chose à dire,</li>
<li>Savoir confronter son avis avec les autres,</li>
<li>Savoir à qui s'adresser, ou quand <em>l'ouvrir</em>,</li>
<li>Savoir ce que l'on fait là.</li>
</ul>

Savoir être influent va de pair avec l'expérience acquise.

Il nous décrit ensuite les différents points en y appliquant des bonnes pratiques.

<strong>Ai je quelque chose à dire ?</strong>

Il faut parler dans l'intérêt du projet. Maitriser les impacts sur le projet des propositions que l'on est en train de faire.

<strong>Se confronter aux autres avis?</strong>

Il est important de toujours dire ce que l'on pense, et ne surtout pas intérioriser. Cette transparence impose de respecter <strong>des règles de diplomatie</strong> :

<ul>
<li>Parler du code et uniquement du code,</li>
<li>Ne pas parler des gens,</li>
<li>Pas de reproches,</li>
<li>Plus on s'approche des coupables plus on s'éloigne de de la solution.</li>
</ul>

Une règle importante à retenir : <strong>est que si l'on attaque quelqu'un, il va se défendre.</strong>

<strong>Quand tenir sa position?</strong>

Une nouvelle lié à l'intégrité, ne pas changer d'avis sous l'influence d'un manager. Egalement, s'il n'y a pas de nouvel élément rationnel dans la discussion alors il n'y a pas de raison de changer d'avis.

<strong>Savoir et apprendre à avoir tord</strong>

Reconnaitre son erreur, c'est accepter d'apprendre de nouvelles choses. C'est être également capable de sortir de sa zone de confort. Savoir avoir tord c'est également oublier la pression sociale, avoir tord c'est être faible.

Guillaume nous donne quelques références pour améliorer nos échanges.

<ul>
<li>Chercher à comprendre avant d'être compris</li>
<li>Observer l'autre pour s'observer soi</li>
<li>La conscience de soi</li>
</ul>

<strong>Parler aux chefs?</strong>

Pour s'adresser à l'instance décisionnaire, il faut savoir identifier qui pourrait être un sponsor de poids à même de défendre votre projet.
Pour accrocher la personne, commencer par la conclusion, en proposant de développer s'il elle le souhaite.
Trouver les endroits stratégiques pour rencontrer la personne cible <em>par pure coïncidence</em> (pause cigarette, pause café, etc).

<strong>Pas de démarche en sous marin</strong>

Il ne faut surtout pas mettre les gens au pied du mur, en ayant fait tout seul dans son coin. Les personnes se sentiraient pas impliquées et vous n'auriez pas leurs soutiens pour la suite.

<strong>Que fais je là ? / quelle est ma position?</strong>

Il est important dans cette démarche de savoir ce que l'on fait là. Guillaume fait état de deux raisons :

<ul>
<li>Dépendance à la situation (Financiere, affective)

vs</p></li>
<li><p>Recherche de performance</p></li>
</ul>

<p>Il faut savoir trancher.

<strong>Je veux tout changer!</strong>

Il ne faut pas se disperser et choisir ses batailles. Tout mener de front ne sert à rien. Il faut également savoir apprécier les succès qu'ils soient grands ou petits.

En conclusion, devenir influent est un travail de longue haleine. c'est quasiment un choix de carrière qu'il faut bâtir patiemment.

###L'expérience utilisateur est importante pour nous

Cette conférence a été présentée par <a href="https://www.linkedin.com/in/florenceherrou">Florence Herrou</a>. L'objectif de cette présentation est de nous faire découvrir l'expérience utilisateur lors de la conception d'applications métier.

Pour commencer Florence par nous rappeler l'UX n'est pas liée uniquement à l'ergonomie. Ce domaine est plus vaste et touche directement le besoin métier. La mise en place d'une UX est un processus itératif (prototype présenté aux utilisateurs, récolte des impressions, boucle).

Elle cite d'ailleurs Steeve Jobs en donnant sa définition : <strong>l'UX c'est répondre au besoin</strong>

Pour illustrer ses propos, Florence nous montre un exemple ou deux professeurs (issus du monde star wars) tentent d'utiliser un outil ou le design a été bien pensé d'un côté et mal de l'autre. Elle met en évidence les conséquences d'un mauvais design et les difficultés que cela engendre dans l'expérience utilisateur.

Ensuite, elle présente l'approche cycle en V d'un projet. Elle explique que cette méthode conduit généralement le projet à l'échec. L'effet tunnel entre l'analyse du besoin et la livraison empêche tout évolution du besoin potentiel ou pire ne permet pas de détecter une incompréhension de la demande.

L'approche agile permet d'identifier rapidement s'il y a une divergence de compréhension entre le besoin exprimé et ce qui a été réalisé.

Ce qu'il est important de garder à l'esprit, c'est que l'utilisateur à toujours raison, il est le seul à pouvoir valider si l'UX répond au besoin ou non.

Par conséquent il faut absolument le garder au centre des débats.

Pour savoir si le design que l'on est en train de mettre en place est correcte ou non, il faut en permanence le tester. Pour cela il existe plusieurs techniques :

<ul>
<li>En commençant par du papier/crayon avec les utilisateurs</li>
<li>Soumettre au user/PO où quelqu'un pour voir si déjà c'est bien compris et clair.</li>
<li>Faire de l'AB testing</li>
<li>Après lancement, faire des questionnaires simples et rapides aux utilisateurs.</li>
</ul>

Florence nous des conseils sur comment susciter l'interêt (conscient ou inconscient) chez l'utilisateur avec un bon design.

Obtenir un comportement désiré :<br />
 * En proposant un workflow évident de décision dans l'application 
 * Agir sur des déclencheurs internes ou externes de l'utilisateur
 * Gamifier l'application (créer de l'engagement, faciliter la progression, créer de nouvelle habitude, quête de niveaux et de gratifications), par contre un excès peut entrainer une décrédibilisation.
 * Le storytelling : présenter l'application comme une histoire.

En conclusion, Florence nous rappelle l'importance de ne pas négliger l'UX et d'avoir à coeur de bien adresser le besoin exprimé par les utilisateurs. Sans quoi, l'application aura vocation à rester au stade de projet.

<h3>Machine Learning avec Spark, MLLib et D3.js</h3>

Cette conférence a été présenté par <a href="https://www.linkedin.com/in/hayssams">Hayssam Saleh</a>. Les slides de la présentation sont disponibles <a href="http://fr.slideshare.net/hayssamsaleh1/machine-learning-46850153">ici</a>

En introduction, Hayssam nous explique au travers d'un exemple concret les motivations à mettre en oeuvre du machine learning. Il commence par nous exposer la liste des cas d'utilisation classiques :

<ul>
<li>Faire de la recommandation de produit,</li>
<li>Classification de contenu en groupe prédéfinis,</li>
<li>Regroupement de contenu similaire,</li>
<li>Recherche d'association/pattern dans les actions et le comportement,</li>
<li>détection de fraude et d'anomalie,</li>
<li>Identification de topic clefs (politique).</li>
</ul>

Pour accompagner son propos, il nous propose de dérouler un exemple concret. Le cas d'utilisation qu'il a pris est le suivant :

<strong>Estimer si je peux prêter de l'argent à quelqu'un dans le cadre d'un prêt bancaire</strong>

Ci-dessous les paramètres du problème :

<ul>
<li>Entrée : Prédicteurs /vars indépendantes (salaire, statut marital, propriétaire...)</li>
<li>Sortie : Réponse / label (variable dépendante).</li>
</ul>

Si l'on devait répondre à cette question pour une personne, la démarche serait simple. Mais dans notre cas, il faut traiter un volume de personne très important.

Les solutions envisageables :

<ul>
<li>1 ) embaucher beaucoup de gens pour faire l'analyse (chère, beaucoup d'attente)</li>
<li>2 ) Mise en place d'un moteur de règles Jboss rules (les règles se multiplient et sont difficiles à maintenir, évolution des clients, maintenance)</li>
<li>3 ) <strong>Machine Learning</strong> (précis, autonome, scalable)</li>
</ul>

Pour mettre en place cette solution, l'outil retenu est Spark associé à la librairie MLib. Pourquoi cet outil?

Dans le monde du BigData, deux univers se côtoient : celui du Data Scientist et celui du développeur.

Dans le cas du data Scientist on parlera <strong>d'analyse d'investigation</strong> et pour le développeur <strong>d'analyse opérationnelle</strong>. Selon les cas, les besoins ne sont pas les mêmes :

<table>
<thead>
<tr>
  <th>Analyse d'investigation</th>
  <th>Analyse opérationnelle</th>
</tr>
</thead>
<tbody>
<tr>
  <td>Echantillon de données</td>
  <td>Données de production</td>
</tr>
<tr>
  <td>Poste de travail</td>
  <td>Cluster serveur</td>
</tr>
<tr>
  <td>Requête Ad hoc offline</td>
  <td>Sollicitation online continue</td>
</tr>
<tr>
  <td>Métrique : la précision</td>
  <td>Métrique : le temps de réponse</td>
</tr>
<tr>
  <td>Facilité de développement</td>
  <td>Performance</td>
</tr>
</tbody>
</table>

Spark permet de rapprocher ces deux mondes par la simplicité de sa mise en oeuvre.

Ensuite, il est nécessaire de préparer les échantillons de données.

<ol>
<li>Phase cruciale, elle doit être faite de façon très rigoureuse,</li>
<li>Prendre un échantillon des données des scoring qui ont déjà été réalisés,</li>
<li>Diviser en 2 lots d'échantillons,

<ul>
<li>Un lot pour le développeur pour construire un modele et tester son modele,</li>
<li>L'autre à destination du statisticien pour vérifier la validité du modèle créé</li>
</ul></li>
</ol>

<em>Le modele est considéré satisfaisant lorsque le niveau de précision est satisfaisant.</em>

<strong>Si la performance du modèle n'est pas bonne, il y a trois causes possibles :</strong>

<ul>
<li>Les prédicteurs sont mal choisis (<strong>biaisé</strong>) -&gt; Changer les prédicteurs</li>
<li>L'échantillon n'est pas représentatif ou l'algo de ML n'est pas représentatif (<strong>overfitting</strong>) 

<ul>
<li>Solution : réduire les prédicteurs car il n'a aucun rôle et perturbe l'algorithme,</li>
</ul></li>
<li>L'algo de ML est inadapté (<strong>underfitting</strong>) -&gt; passer par une étape de visualisation</li>
<li>Aussi, le cumul des trois. </li>
</ul>

Pour détecter qu'un algorithme est inadapté il faut passer par une étape de visualisation.

Hayssam a poursuivi sa présentation en nous donnant des informations sur les algorithmes disponibles dans MLLib.

<ul>
<li><strong>Classification</strong> &amp; <strong>Regression</strong>

<ul>
<li>Prédire le label de nouvelles données à partir des labels des données existantes.</li>
</ul></li>
<li><strong>Clustering</strong> : apprentissage non supervisé

<ul>
<li>Prédire le label de donnée existant à partir de leurs prédicteurs</li>
</ul></li>
<li><strong>Collaboratif filtering</strong> 

<ul>
<li>Prédire l'intérêt d'un utilisateur pour un item (eg Amazon).</li>
</ul></li>
<li><strong>Frequent pattern matching</strong>

<ul>
<li>Extraire les produits les plus souvents achetés ensemble dans le même panier.</li>
</ul></li>
<li><strong>decision Tree</strong> (arbre de décision)

<ul>
<li>Recherche de la meilleure condition de segmentation en s'appuyant sur l'<strong>impureté</strong>.</li>
</ul></li>
</ul>

(* <strong>Impureté</strong> : Mesure la qualité de la séparation.*)

Ensuite, Hayssam à travers des screenshoots de code, nous montre la simplicité de mettre en oeuvre un algorithme (ici le decision Tree) dans Spark MLLib. Voici les différentes étapes présentées :

<ol>
<li>Chargement des données à partir d'un fichier csv</li>
<li>Recherche de l'arbre</li>
<li>Evaluation de la performance</li>
</ol>

Chaque étape est présentée sous forme d'un slide et à chaque on trouve très peu de ligne de code pour là réaliser.

La dernière partie du talk est consacrée à la visualisation. 
La visualisation est une étape importante dans l'élaboration d'un modèle. Pour avoir la représentation graphique des résultats Hayssam utilise une librairie javascript basée sur D3.js : <a href="http://mih5.github.io/statapps">statapps</a>. 
Cette librairie propose plusieurs types de graphique permettant de comprendre et analyser les données.

En conclusion, le triptyque Spark, MLLib, D3.js sont une base pertinente et efficace pour faire du machine learning. 
Spark/MLLib permet de briser les murs qui sépare le DataScientist et le développeur (une sorte de Devops).

###React, une autre façon de penser vos composants graphiques (Tools in action) **

Ce Tools in Action est proposé par <a href="https://twitter.com/trevorreznik">Mathieu ANCELIN</a>. Les slides sont disponibles <a href="https://speakerdeck.com/mathieuancelin/react-une-autre-maniere-de-penser-vos-composants-graphiques">ici</a>

Il nous présente de cette session la librairie développée par FaceBook : <strong>React</strong>. L'objectif de React est de rendre des vues et répondre à des événements. 
La librairie a été mis en Open Source depuis 2013. Les cibles adressées par React sont de grosses applications javascript avec des données qui changent tout le temps.

Le framework se base sur une approche déclarative et orientée composant <strong>autonome</strong>, <strong>composable</strong>, <strong>réutilisable</strong>.

<h2>Les principaux utilisateurs de React (en prod)</h2>

<ul>
<li>instagram,</li>
<li>FB,</li>
<li>FlipBoard,</li>
<li>Yahoo,</li>
<li>Netflix (Actuellement, c'est une page web surtout les devices. d'ici à la fin de l'année un passage en full React est prévu.)</li>
</ul>

<h2>Les concepts</h2>

<ul>
<li>Virtual DOM : Avant de rafraichir la vue, il prend un snapshot de la vue courante, calcule la nouvelle vue et fait un diff entre les deux.   Ensuite il va '<em>patcher</em>' le DOM avec les choses qui ont changé.</p></li>
<li><p>Synthétic Event : React a un système d'évènement au-dessus du DOM conforme aux recommandations W3C. Cette surcouche a pour objectif de standardiser la gestion des événements de manière transverse à tous les navigateurs.</p></li>
</ul>

<h2>Les fonctionnalités</h2>

<ul>
<li><p>Source de données  : Props &amp; state

<ul>
<li>Props = propriéré d'entrée du composant</li>
<li>State : le composant doit être immutable, s'il y a un changement d'état, alors lancement d'une MAJ de la vue.</li>
</ul></li>
<li>Cycle de vie du composant. Le framework fournit des points d'entrées sur le cycle de vie des composants

<ul>
<li>componentdidMount, </li>
<li>componentdWillMount,</li>
<li>componentdWillUpdate</li>
<li>componentdWillUpdate</li>
</ul></li>
<li>Validation des props du composant

<ul>
<li>En typant les props, React est capable de valider les entrées fournies au composant.</li>
</ul></li>
<li>Gestion des erreurs propre

<ul>
<li>Les messages d'erreurs sont très clair.</li>
</ul></li>
<li>Mixins

<ul>
<li>permet d'ajouter du comportement au composant. </li>
<li>plusieurs mixins peuvent être ajoutés à un composant </li>
<li>ils seront appelés dans l'ordre de la déclaration.</li>
</ul></li>
<li>Test

<ul>
<li>React propose TestUtils pour les tests</li>
</ul></li>
</ul>

En conclusion, cet outil semble très complet et fournit de très bonnes performances comparativement à ses concurrents : 
 * Ember 7 frames par second
 * Angulae : 6-7 frames par second
 * <strong>React</strong> : 14 frame / s (par defaut)
 * Reactive.js 17 frame/s

La dernière version de React support ES6 et supporte également le rendu de WebComponent. L'écosystème est très large  (intégration bootstrap, matériel design, highCharts,etc) et peut-être également utilisé pour du rendu natif sur device mobile.

<h2>Conclusion</h2>

Ces deux jours de conférence ont été très riches et très denses. Les conférences étaient de qualité. La diversité des sujets proposés permettait de couvrir un spectre assez large de connaissance. 
Le deuxième jour, j'ai pu assister à un Hand's on sur Spark et Cassandra, ce qui m'a permis de mettre les mains dans le code.

D'une manière générale, l'organisation de l'événement a été parfaitement menée. La grande nouveauté de cette année, le lieu de la conférence a contribué à la réussite de Devoxx France.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>444</wp:post_id>
		<wp:post_date>2015-06-09 18:23:06</wp:post_date>
		<wp:post_date_gmt>2015-06-09 18:23:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>devoxx-france-2015-4-ieme-edition</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="conference"><![CDATA[conférence]]></category>
		<category domain="post_tag" nicename="conference"><![CDATA[Conference]]></category>
		<category domain="category" nicename="devoxx"><![CDATA[Devoxx]]></category>
		<category domain="post_tag" nicename="devoxxfrance"><![CDATA[DevoxxFrance]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11502344678]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Principles of Reactive Programming  sur Coursera</title>
		<link>https://thecoderwriter.wordpress.com/2015/06/09/principles-of-reactive-programming-sur-coursera/</link>
		<pubDate>Tue, 09 Jun 2015 18:27:07 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=452</guid>
		<description></description>
		<content:encoded><![CDATA[Aujourd'hui se termine la formation en ligne <strong>Principles of reactive programming</strong> proposée par <em>Martin Odersky, Erik Meijer, Roland Kuhn</em>.

C'est la seconde édition de ce MOOC, la première édition avait eu lieu en 2013, autant dire que la deuxième session a su se faire attendre :).

Cette formation est assez complète et propose de voir les différents aspects de ce style de programmation.

<ul>
<li>Utilisation des Futures</li>
<li>Utilisation des Observables</li>
<li>Utilisation des Actors</li>
</ul>

L'ensemble de la formation se déroule sur 7 semaines. Chaque semaine, une série de vidéos sont publiées et un exercice à réaliser.

La première semaine a été consacrée à une montée en compétence sur l'outil de test de Scala
Les 3 semaines suivantes ont été consacrées aux Future/Observable
Les 2 dernières à l'utilisation du framework d'AKKA, les actors

Cette année, le programme a été un peu chamboulé. En effet, la première semaine des personnes se sont plaintes de la difficulté à finaliser les tests dans les temps. Les organisateurs ont pris la décision d'allonger la période de rendu de 1 à 2 semaines.

Cette modification a eu pour effet réduire le nombre de cours. Les vidéos de la dernière semaine ont quand même été fournies.

Pendant cette formation, nous avons 3 intervenants. Chacun avait son style :

<ul>
<li>Martin Odersky : un style monocorde et très académique. un petit peu ennuyeux</li>
<li>Erik Meijer : un style fun et très pragmatique. Très dynamique</li>
<li>Roland Kuhn : un style hybride et très pédagogue. Très clair</li>
</ul>

Les points importants que l'on peut retirer de cette formation:

<ul>
<li>Apprentissage de l'utilisation de Future / Observable. Si l'on part de 0, cela donne un aperçu avancer sur la manière de programmer avec ces composants. </li>
<li>Apprentissage de l'utilisation des Actors : Idem, les deux séries d'exercices proposées, permettent de prendre en main le framework et d'en comprendre les concepts.</li>
</ul>

Les pré-requis pour suivre ce cours ne sont pas nombreux, selon moi :

<ul>
<li>Avoir un vernis sur le langage Scala</li>
</ul>

Je pense que c'est à peu près tout.

Nous avons été plusieurs collègues de Zenika à suivre ce cours en ligne. Nous avions créé sur <em>Slack</em> un groupe de discussion. Cela nous a permis d'échanger et de s'entraider. Durant la formation, nous n'avons pas échangé de code (afin de respecter le code d'honneur de Coursera), mais des conseils, des pistes à explorer.

On prévoit d'organiser une rétro pour échanger sur la formation et partager les différentes solutions que nous avons rendues.

<a href="https://class.coursera.org/reactive-002">Lien vers la formation</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>452</wp:post_id>
		<wp:post_date>2015-06-09 18:27:07</wp:post_date>
		<wp:post_date_gmt>2015-06-09 18:27:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>principles-of-reactive-programming-sur-coursera</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="coursera"><![CDATA[Coursera]]></category>
		<category domain="category" nicename="mooc"><![CDATA[MOOC]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="post_tag" nicename="reactive"><![CDATA[reactive]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="category" nicename="training"><![CDATA[training]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[11502450633]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[tosheer]]></wp:comment_author>
			<wp:comment_author_email>tosheer@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>119.82.83.52</wp:comment_author_IP>
			<wp:comment_date>2017-02-04 23:04:12</wp:comment_date>
			<wp:comment_date_gmt>2017-02-04 23:04:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Fabrice, Thanks for the interesting post. But one thing which is still creating an issue for me is how can deploy the compete Lagom application without conductR. Have you tried on this problem as well? 

~Tosheer]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>111591616</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1486249452.9757230281829833984375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"tosheer";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1486253999.7707641124725341796875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"tosheer";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1551541417]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1551541417]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1551541418.305604;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"fabszn";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Livre : Learning Spark</title>
		<link>https://thecoderwriter.wordpress.com/2015/08/05/livre-learning-spark/</link>
		<pubDate>Wed, 05 Aug 2015 20:25:15 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=456</guid>
		<description></description>
		<content:encoded><![CDATA[Auteurs : Holden Karau, Andy Konwiski, Patrik Wendell, Matei Zaharia
Pendant ces derniers mois j'ai suivi pas mal de MOOC sur des sujets liés au Big Data. Le dernier en date était une introduction au Big Data avec Spark. Pour aller plus loin, je me suis acheté le livre Learning Spark afin d'approfondir le sujet.

Je n'ai pas encore tout à fait terminé la lecture de l'ouvrage, mais je peux déjà donner mes impressions sur les trois quart du livre.

Le livre est très bien, il est un bon complément à cours en ligne que j'ai suivie. Les premiers chapitres du livre se concentrent sur les concepts fondamentaux de Spark. Cette première partie permet de fixer les notions vue d'un point de vue pratique pendant le cours.

Ensuite ce sont les problématiques de chargement et de sauvegarde de données. C'est un point essentiel naturellement car sans données Spark ne sert pas à grand chose :P.

Le chapitre suivant est consacré à la programmation avancée avec Spark. On découvre des tips de programmation que l'on peut mettre en oeuvre selon certains de use cases.

Lorsque l'on arrive à ce moment du livre, on a déjà une vision très claire de comment développer avec Spark.

Spark est un outil permettant de traiter massivement des données dans un environnement distribué. La deuxième partie du livre commence en abordant les capacités de Spark à fonctionner dans un environnement clusterisé et également s'intégrer avec des outils de déploiement comme Meso ou Yarn.

Le livre continue son exploration en abordant les problématiques de configuration avancées et la façon de faire du debugging de programme écrit avec Spark.

La dernière partie du livre est consacrée à la présentation de 3 modules de Spark. Pour l'instant seul le module principal : Spark Core avait été abordé.

Les 3 modules sont

<ul>
<li><strong>Spark SQL</strong> : Librairie permettant de requêter des sources de données en se basant sur la - -language SQL.</li>
<li><strong>Spark Streaming</strong> : Librairie permettant de traiter des flux en temps réel</li>
<li><strong>Spark MLib</strong> : Librairie dédiée au Machine Learning
Le tour d'horizon proposé par l'ouvrage donne une vision très claire sur Spark. Le spectre couvert est large et approfondi et permet de démarrer très rapidement un projet.</li>
</ul>

Bien que l'outil soit écrit en Scala, l'outil est polyglotte. Il est possible d'écrire ses programmes sur la base de 3 langages :

<ul>
<li>Scala</li>
<li>Python</li>
<li>Java</li>
</ul>

Etant complètement partial... Je préfère écrire mes programmes en Scala ;) plus concis, expressif, etc... (troll ;))

En résumé, un très bon ouvrage qui se lit très bien. Pas de prérequis nécessaire pour lire ce livre. Je recommande se livre à qui veut se plonger dans l'univers de Spark!

Suite à la lecture de ce livre, j'ai commandé le livre : Advanded Analytics with Spark pour aller plus loin.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>456</wp:post_id>
		<wp:post_date>2015-08-05 20:25:15</wp:post_date>
		<wp:post_date_gmt>2015-08-05 20:25:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>livre-learning-spark</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="livre"><![CDATA[Livre]]></category>
		<category domain="category" nicename="livre"><![CDATA[livre]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="category" nicename="spark"><![CDATA[spark]]></category>
		<category domain="post_tag" nicename="spark"><![CDATA[Spark]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13439870967]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scala - Self type</title>
		<link>https://thecoderwriter.wordpress.com/?p=461</link>
		<pubDate></pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=461</guid>
		<description></description>
		<content:encoded><![CDATA[Nous allons parler dans cet article d'une feature intéressante du language Scala: le self type. 
Cette fonctionnalité permet une conception plus aisée. 
Pour expliquer ce concept, je vais m'appuyer sur un use case assez classique, mais qui montrera bien l'intérêt du self type.

<h2>Posons le décor</h2>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>461</wp:post_id>
		<wp:post_date>2015-08-18 22:57:55</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Kata : GildedRose-Refactoring(Scala)</title>
		<link>https://thecoderwriter.wordpress.com/2015/08/11/kata-gildedrose-refactoringscala/</link>
		<pubDate>Tue, 11 Aug 2015 12:24:58 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=466</guid>
		<description></description>
		<content:encoded><![CDATA[<h1>Qui Que Quoi Ou?</h1>

Je me suis lancé récemment dans le kata <strong>GildedRose-Refactoring</strong>.
Bien que le kata soit connu, un petit rappel s'impose. L'idée de ce défi est de refactoriser une méthode extraite d'une vaste application de gestion d'item. Avec le bout de code, on a un embryon de spécification.

Dans la spécification on nous précise que le développeur à l'origine de ce code est parti pour de nouvelles aventures et qu'il ne reste que le code dont je passerai sous silence la qualité. Bien entendu, aucun test. Eh oui, la devise du développeur précédent : <em>Tester c'est douter</em> et franchement vu le code, il ne doutait de rien :).

Ce kata est proposé par <strong>Emily Bache</strong> sur son dépôt <a href="https://github.com/emilybache/GildedRose-Refactoring-Kata">github</a>. L'exercice est disponible dans plusieurs languages dont Scala que j'ai choisi pour faire le challenge.

Bon rentrons dans le vif du sujet :)

Dans ce post, je vous présente le résultat du refactoring que j'ai réalisé en faisant le kata. J'expliquerai les choix faits dans la solution. N'hésitez pas à remonter vos remarques dans les commentaires.

<h1>Base de travail</h1>

Voici le code à partir duquel je vais travailler :

[code language="scala"]
package com.gildedrose

class GildedRose(val items: Array[Item]) {


  def updateQuality() {
    for (i &lt;- 0 until items.length) {
      if (!items(i).name.equals(&quot;Aged Brie&quot;)
        &amp;&amp; !items(i).name.equals(&quot;Backstage passes to a TAFKAL80ETC concert&quot;)) {
        if (items(i).quality &gt; 0) {
          if (!items(i).name.equals(&quot;Sulfuras, Hand of Ragnaros&quot;)) {
            items(i).quality = items(i).quality - 1
          }
        }
      } else {
        if (items(i).quality &lt; 50) {
          items(i).quality = items(i).quality + 1

          if (items(i).name.equals(&quot;Backstage passes to a TAFKAL80ETC concert&quot;)) {
            if (items(i).sellIn &lt; 11) {
              if (items(i).quality &lt; 50) {
                items(i).quality = items(i).quality + 1
              }
            }

            if (items(i).sellIn &lt; 6) {
              if (items(i).quality &lt; 50) {
                items(i).quality = items(i).quality + 1
              }
            }
          }
        }
      }

      if (!items(i).name.equals(&quot;Sulfuras, Hand of Ragnaros&quot;)) {
        items(i).sellIn = items(i).sellIn - 1
      }

      if (items(i).sellIn &lt; 0) {
        if (!items(i).name.equals(&quot;Aged Brie&quot;)) {
          if (!items(i).name.equals(&quot;Backstage passes to a TAFKAL80ETC concert&quot;)) {
            if (items(i).quality &gt; 0) {
              if (!items(i).name.equals(&quot;Sulfuras, Hand of Ragnaros&quot;)) {
                items(i).quality = items(i).quality - 1
              }
            }
          } else {
            items(i).quality = items(i).quality - items(i).quality
          }
        } else {
          if (items(i).quality &lt; 50) {
            items(i).quality = items(i).quality + 1
          }
        }
      }
    }
  }
}
[/code]

On notera une grande complexité avec l'imbrication des structures conditionnelles. Enfin un beau terrain de jeu en perspective ;)
La spécification est disponible <a href="https://github.com/emilybache/GildedRose-Refactoring-Kata/blob/master/GildedRoseRequirements.txt">ici</a>

<h1>Les problèmes constatés</h1>

En lisant le code, j'ai détecté les problèmes suivants :

<ul>
<li>complexité dans le code (structures conditionnelles)</li>
<li>les règles métiers sont éparpillées et sont difficilement identifiables</li>
<li>utilisation de <strong>magic number</strong></li>
<li>méthode contenant beaucoup trop de ligne de code</li>
</ul>

<h1>Couverture du code par les tests</h1>

La première étape a été d'ajouter les tests unitaires permettant de couvrir le code que j'allais refactorer. Cette ceinture de sécurité est indispensable pour commencer à modifier du code existant sans risquer d'introduire des bugs et régressions.

Pour créer ces tests, je me suis appuyé sur l'outil permettant de visualiser la couverture de test proposé par IntelliJ. Cet outil permet de visualiser graphiquement les lignes de code couvertes (ou pas) par les tests.
Au fur et à mesure que je crée des tests, je peux voir quelles sont les lignes de code impactées par mon code.

A partir de la spec. et du code existant j'ai écrit les tests suivants :

[code language="scala"]

package com.gildedrose

import org.scalatest._

class GildedRoseTest extends FlatSpec with Matchers {
  &quot;item(s)&quot; should &quot;foo&quot; in {
    val items = Array[Item](Item(&quot;foo&quot;, 0, 0))
    val app = new GildedRose(items)
    app.updateQuality()
    (app.items(0).name) should equal(&quot;foo&quot;)
  }

  it should &quot;foo &amp;amp; bar&quot; in {
    val items = Array[Item](Item(&quot;foo&quot;, 0, 0),Item(&quot;bar&quot;, 0, 0))
    val app = new GildedRose(items)
    app.updateQuality()
    (app.items(0).name) should equal(&quot;foo&quot;)
    (app.items(1).name) should equal(&quot;bar&quot;)
  }

  &quot;Quality&quot; should &quot;increased by one for Aged Brie &amp;amp; Backstage passes to a TAFKAL80ETC concert &quot; in {
    val items = Array[Item](Item(&quot;Aged Brie&quot;, 8, 15)
      , new Item(&quot;Backstage passes to a TAFKAL80ETC concert&quot;, 35, 20))
    val app = new GildedRose(items)
    app.updateQuality()
    (app.items(0).quality) should equal(16)
    (app.items(1).quality) should equal(21)

  }

  it should &quot;increased by 2 for Backstage passes to a TAFKAL80ETC concert &quot; in {
    val items = Array[Item](Item(&quot;Backstage passes to a TAFKAL80ETC concert&quot;, 10, 20))
    val app = new GildedRose(items)
    app.updateQuality()
    (app.items(0).quality) should equal(22)


  }

  it should &quot;drops to 0 after the concert &quot; in {
    val items = Array[Item](Item(&quot;Backstage passes to a TAFKAL80ETC concert&quot;, 0, 20))
    val app = new GildedRose(items)
    app.updateQuality()
    (app.items(0).quality) should equal(0)


  }
  it should &quot;increased by 3 for Backstage passes to a TAFKAL80ETC concert &quot; in {
    val items = Array[Item](Item(&quot;Backstage passes to a TAFKAL80ETC concert&quot;, 5, 20))
    val app = new GildedRose(items)
    app.updateQuality()
    (app.items(0).quality) should equal(23)
  }

  it should &quot;decreased by two&quot; in {
    val items = Array[Item](Item(&quot;foo&quot;, 0, 2))
    val app = new GildedRose(items)
    app.updateQuality()
    (app.items(0).quality) should equal(0)
  }

  &quot;Sulfuras, Hand of Ragnaros&quot; must  &quot;never has to be sold or decreases in Quality&quot; in {
    val items = Array[Item](Item(&quot;Sulfuras, Hand of Ragnaros&quot;, 0, 20))
    val app = new GildedRose(items)
    app.updateQuality()
    app.updateQuality()
    app.updateQuality()

    (app.items(0).quality) should equal(20)
    (app.items(0).sellIn) should equal(0)
  }

  &quot;Aged Brie&quot; should  &quot;increases in Quality the older it gets&quot; in {
    val items = Array[Item](Item(&quot;Aged Brie&quot;, 0, 20))
    val app = new GildedRose(items)
    app.updateQuality()
    app.updateQuality()
    app.updateQuality()

    (app.items(0).quality) should equal(26)
    (app.items(0).sellIn) should equal(-3)
  }
}
[/code]

<h1>Refactoring, c'est parti!!</h1>

Démarrage du refactoring de la classe. En analysant le code, on peut s'apercevoir que l'on ne manipule des items précis, c'est-à-dire que chaque item à ses propres règles métiers pour la gestion de sa qualité. En voyant ça, ma première approche sera d'extraire les règles métiers de chaque item et de les isoler.

<em>Dans cet exercice, on a quelques contraintes, la première étant que la classe Item ne doit pas être modifiée. La seconde moins explicite est que l'on touche à un sous-ensemble de l'application.   Donc c'est plus difficile d'avoir une approche globale et de changer profondément l'architecture.</em>

Pour réaliser cette isolation je vais utiliser les traits et une feature sympathique du langage : les <strong>implicits</strong>.
L'idée est de tenter d'abstraire de chaque item un sens un peu plus générique :

<ul>
<li><strong>Aged Brie</strong> : FoodItem</li>
<li><strong>Backstage passes to a TAFKAL80ETC concert</strong> : ConcertItem </li>
<li><strong>Sulfuras, Hand of Ragnaros</strong> : LegendaryItem</li>
<li>Implémentation par défaut : DefaultItem</li>
</ul>

Chaque trait défini ci-dessus étendra un autre trait : <strong>ItemService</strong>, qui permet de définir le contrat qu'un item doit fournir. Dans chaque trait, je vais pouvoir définir les règles métiers correspondantes de la manière suivante :

[code language="scala"]

trait ItemService {

    val item: Item

    def updateQuality() {}

    def updateSellin() {}

    def incQuality() = {
      if (item.quality &lt; MAX_QUALITY) {
        item.quality += 1
      }
    }
  }

  trait ConcertItem extends ItemService {

    override def updateQuality() = {
      incQuality()

      if (item.sellIn &lt; ELEVEN_STEP_SELLIN) {
        incQuality()
      }

      if (item.sellIn &lt; SIX_STEP_SELLIN) {
        incQuality()
      }
    }

    override def updateSellin() = {
      item.sellIn = item.sellIn - 1
      if (item.sellIn &lt; 0) {
        item.quality = 0
      }
    }
  }

  trait LegendaryItem extends ItemService {

  }

  trait FoodItem extends ItemService {

    override def updateQuality() = {
      incQuality()
    }

    override def updateSellin() = {
      item.sellIn = item.sellIn - 1

      if (item.sellIn &lt; 0) {
        incQuality()
      }
    }
  }

  trait DefaultItem extends ItemService {

    override def updateQuality() = {
      if (item.quality &gt; 0) {
        item.quality = item.quality - 1
      }
    }

    override def updateSellin() = {
      item.sellIn = item.sellIn - 1
      if (item.sellIn &lt; 0) {
        item.quality = item.quality - 1
      }
    }
  }
[/code]

Maintenant que les règles sont isolées il va falloir faire en sorte que chaque item soit lié à la bonne implémentation. Je rappelle que je ne peux pas modifier la classe Item. Pour lier, un item à l'implémentation qui lui correspond, je vais passer pas un wrapper qui va venir encapsuler l'item. pour cela je définis la case classe suivante :

[code language="scala"]
case class Wrapper(item: Item)
[/code]

Ce wrapper va me permettre de créer le lien entre l'item et le bon trait correspondant. Pour ce faire, je vais utiliser une factory qui à partir d'un item va me renvoyer un item <em>wrappé</em> avec la bonne implémentation. Ci-dessous la factory en question :

[code language="scala"]
def convertToWrapper(item: Item): ItemService = {

    item.name match {
      case &quot;Aged Brie&quot; =&gt; new Wrapper(item) with FoodItem
      case &quot;Backstage passes to a TAFKAL80ETC concert&quot; =&gt; new Wrapper(item) with ConcertItem
      case &quot;Sulfuras, Hand of Ragnaros&quot; =&gt; new Wrapper(item) with LegendaryItem
      case _ =&gt; new Wrapper(item) with DefaultItem
    }

  }

[/code]

Cette factory prend donc en paramètre un Item et nous renvoie une instance du type de trait le plus générique : <strong>ItemService</strong>.

Pour ceux qui ne connaissance pas Scala, je pense que l'encapsulation de l'item mérite quelques explications !

[code language="scala"]
new Wrapper(item) with FoodItem
[/code]

Le début de la ligne est clair, on crée une instance de la case classe wrapper en lui passant en paramètre l'item courant. Jusque-là pas de problème. C'est la deuxième partie qui s'obscurcit un peu. 
Pour mémoire, un trait est approximativement la représentation d'une interface en java avec en plus la possibilité de fournir une implémentation par défaut pour les méthodes définies. Ceci étant dit, Scala permet d'appliquer le comportement d'un trait directement à l'instanciation d'une classe avec le mot-clef <strong>with</strong>.

Donc la conséquence de la ligne de code ci-dessus, permettra d'invoquer sur le wrapper les méthodes du trait FoodItem. Aussi comme il y a une relation d'héritage entre <strong>FoodItem</strong> et <strong>ItemService</strong> je peux coercer l'instance de la classe Wrapper dans le type ItemService (pour rendre le résultat de l'invocation de la factory complètement générique).

Maintenant chaque item porte ses propres règles métiers. A cet instant, le code de la méthode updateQuality() pourrait se résumer à ceci :

[code language="scala"]

 def updateQuality() {
    items.foreach(item =&gt; {
      convertToWrapper(item) updateQuality()
      convertToWrapper(item) updateSellin()
    })
  }
[/code]

<h1>Et les implicits alors?</h1>

En introduction, j'ai évoqué l'utilisation d'implicit. En effet, on peut aller un peu plus loin et réduire encore un peu plus le code ci-dessus. Pour cela, on va utiliser le mécanisme des <strong>implicits</strong>.

Pour rappel, implicit est un mécanisme permettant d'ajouter des comportements à des types de manière dynamique (entre autres je ne vais pas approfondir ici le concept en matière d'explication).

Pour utiliser le mécanisme, il me suffit d'ajouter de la méthode <strong>convertToWrapper</strong> le mot-clef <strong>implicit</strong> de la façon suivante :

[code language="scala"]
implicit def convertToWrapper(item: Item): ItemService = {

    item.name match {
      case &quot;Aged Brie&quot; =&gt; new Wrapper(item) with FoodItem
      case &quot;Backstage passes to a TAFKAL80ETC concert&quot; =&gt; new Wrapper(item) with ConcertItem
      case &quot;Sulfuras, Hand of Ragnaros&quot; =&gt; new Wrapper(item) with LegendaryItem
      case _ =&gt; new Wrapper(item) with DefaultItem
    }

  }
[/code]

En mettant implicit à cet endroit, j'indique au compilateur que s'il rencontre un type Item dans le scope de cet implicit, alors qu'il lui applique la méthode <strong>convertToWrapper</strong>. Cela aura pour effet que sur une instance de la classe Item je pourrai invoquer les méthodes définies par le trait Itemservice et par extension dans le trait correspondant à l'item manipulé.

L'impact au niveau du code donne le résultat suivant :

[code language="scala"]
 def updateQuality() {
    items.foreach(item =&gt; {
      item updateQuality()
      item updateSellin()
    })
  }
[/code]

<h1>Implémentation finale</h1>

[code language="scala"]

package com.gildedrose


import com.gildedrose.ItemFactory._

class GildedRose(val items: Array[Item]) {

  def updateQuality() {

    items.foreach(item =&gt; {
      item updateQuality()
      item updateSellin()
    })
  }
}
[/code]

Finalement, l'ajout d'un nouvel item passera par la modification de la classe de factory et éventuellement l'ajout d'un nouveau trait. Sur le long terme, cette solution ne serait pas satisfaisante et il faudrait envisager une refonte plus élargie du système (cf remarques)

<h1>Remarques</h1>

Dans cette nouvelle implémentation, on pourra remarquer que l'OpenClose principle n'est pas respecté. Dans ce kata, on n'a pas la main sur l'ensemble de l'application, donc avec les règles imposées il était difficile de respecter ce principe (très important). Je trouve que la solution proposée est assez élégante malgré la dérogation à ce principe.

L'utilisation des implicites doit être maîtrisée. La portée d'un implicit doit toujours être minimale au possible sous peine de gros ralentissement au moment de la compilation.

<h1>Conclusion</h1>

Le code résultant du refactoring est disponible sur mon github <a href="https://github.com/Fabszn/GildedRose-Refactoring-Kata/tree/master/scala">ici</a>
Ce kata était intéressant à faire, si vous avez des remarques (constructives), n'hésitez pas à la mettre en commentaire.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>466</wp:post_id>
		<wp:post_date>2015-08-11 12:24:58</wp:post_date>
		<wp:post_date_gmt>2015-08-11 12:24:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kata-gildedrose-refactoringscala</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="apprendre"><![CDATA[apprendre]]></category>
		<category domain="post_tag" nicename="gildedrose"><![CDATA[GildedRose]]></category>
		<category domain="post_tag" nicename="kata"><![CDATA[Kata]]></category>
		<category domain="post_tag" nicename="refactoring"><![CDATA[Refactoring]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="category" nicename="training"><![CDATA[training]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[13619577372]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-img_20150302_18535621.jpg</title>
		<link>https://thecoderwriter.wordpress.com/cropped-img_20150302_18535621-jpg/</link>
		<pubDate>Tue, 18 Aug 2015 22:09:47 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/04/cropped-img_20150302_18535621.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://thecoderwriter.files.wordpress.com/2015/04/cropped-img_20150302_18535621.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date>2015-08-18 22:09:47</wp:post_date>
		<wp:post_date_gmt>2015-08-18 22:09:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-img_20150302_18535621-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/04/cropped-img_20150302_18535621.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/cropped-img_20150302_18535621.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1500;s:6:"height";i:384;s:4:"file";s:105:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/04/cropped-img_20150302_18535621.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_custom_header_last_used_pub/blogum</wp:meta_key>
			<wp:meta_value><![CDATA[1439935788]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/blogum]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>PANO_20150811_081022</title>
		<link>https://thecoderwriter.wordpress.com/pano_20150811_081022/</link>
		<pubDate>Tue, 18 Aug 2015 22:46:03 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/08/pano_20150811_081022.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>510</wp:post_id>
		<wp:post_date>2015-08-18 22:46:03</wp:post_date>
		<wp:post_date_gmt>2015-08-18 22:46:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>pano_20150811_081022</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/08/pano_20150811_081022.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/08/pano_20150811_081022.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:6448;s:6:"height";i:1912;s:4:"file";s:96:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/08/pano_20150811_081022.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:7:"Nexus 6";s:7:"caption";s:0:"";s:17:"created_timestamp";i:1439280657;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:1;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-pano_20150811_081022.jpg</title>
		<link>https://thecoderwriter.wordpress.com/cropped-pano_20150811_081022-jpg/</link>
		<pubDate>Tue, 18 Aug 2015 22:46:27 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/08/cropped-pano_20150811_081022.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://thecoderwriter.files.wordpress.com/2015/08/cropped-pano_20150811_081022.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>511</wp:post_id>
		<wp:post_date>2015-08-18 22:46:27</wp:post_date>
		<wp:post_date_gmt>2015-08-18 22:46:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-pano_20150811_081022-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/08/cropped-pano_20150811_081022.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/08/cropped-pano_20150811_081022.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1500;s:6:"height";i:230;s:4:"file";s:104:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/08/cropped-pano_20150811_081022.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_custom_header_last_used_pub/baskerville</wp:meta_key>
			<wp:meta_value><![CDATA[1439938091]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/baskerville]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-pano_20150811_0810221.jpg</title>
		<link>https://thecoderwriter.wordpress.com/cropped-pano_20150811_0810221-jpg/</link>
		<pubDate>Tue, 18 Aug 2015 22:49:23 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/08/cropped-pano_20150811_0810221.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[http://thecoderwriter.files.wordpress.com/2015/08/cropped-pano_20150811_0810221.jpg]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>512</wp:post_id>
		<wp:post_date>2015-08-18 22:49:23</wp:post_date>
		<wp:post_date_gmt>2015-08-18 22:49:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-pano_20150811_0810221-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/08/cropped-pano_20150811_0810221.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/08/cropped-pano_20150811_0810221.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:1440;s:6:"height";i:221;s:4:"file";s:105:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/08/cropped-pano_20150811_0810221.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_custom_header_last_used_pub/baskerville</wp:meta_key>
			<wp:meta_value><![CDATA[1439938186]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/baskerville]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Scala : equals vs ==</title>
		<link>https://thecoderwriter.wordpress.com/2015/08/30/scala-equals-vs/</link>
		<pubDate>Sun, 30 Aug 2015 13:57:31 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=515</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="https://thecoderwriter.files.wordpress.com/2015/08/equalitysign.jpg"><img class="size-medium wp-image-519 alignleft" src="https://thecoderwriter.files.wordpress.com/2015/08/equalitysign.jpg?w=300" alt="EqualitySign" width="300" height="141" /></a>

<h1>De quoi parle t'on?</h1>

Il est parfois nécessaire de comparer deux instances afin de vérifier si celle-ci sont équivalentes. La notion d'équivalence peut se voir sous différent angle.

On peut souhaiter comparer les deux instances afin de savoir s'il s'agit de la même instance ( même référence en mémoire) ou alors vérifier si d'un point de vue fonctionnel les deux instances comparées représentent la même entité fonctionnelle. Nous allons voir dans cet article comment ça se passe en Scala. Avant d'aborder l'approche Scala nous ferons un rappel sur ce qui se passe en Java.

&nbsp;

<h1>Petit rappel</h1>

En Java, chaque classe hérite de deux méthode permettant d'une part comparer deux objets et d'autre part d'optimiser la recherche d'une instance stockée dans une collection.

Les deux méthodes en question sont les méthodes <strong>equals()</strong> et  <strong>hashcode()</strong>.

L'implémentation par défaut est fournie par le type <strong>Object</strong>, classe parente de toutes les classes du JDK.

&nbsp;

<h2>Exemple</h2>

Prenons comme exemple la classe <em>Person</em> :

[code language="java"]
public class Person {

 private String name;
 private int age;


 public Person(String name, int age) {
  this.name = name;
  this.age = age;
 }

 public String getName() {
  return name;
 }

 public int getAge() {
  return age;
 }
}
[/code]

<em>J'utilise la librairie FunSuite de ScalaTest pour écrire mes tests, je trouve qu'elle est plus lisible et plus pratique à utiliser</em>

Le test suivant vérifie bien que p1 et p2 ne sont pas égaux :

[code language="scala"]
test(&quot;p1 et p2 are not equals&quot;) {
 val p1 = new Person(&quot;Louis&quot;, 10)
 val p2 = new Person(&quot;Louis&quot;, 10)

 p1.equals(p2)

}
[/code]

Par défaut, en Java, la méthode <strong>equals()</strong> va comparer les références des deux objets. Si l'on souhaite faire une comparaison fonctionnelle des deux instances (basée sur la représentation interne de l'objet, en l'occurrence l'attribut name et age) il faut redéfinir les méthodes la méthode <strong>equals</strong> ainsi que la méthode <strong>hashcode()</strong>.

<h2>Les règles de redéfinition</h2>

Pour que ce rappel soit complet, il faut énoncer les règles à suivre pour redéfinir ces deux méthodes.

Elle doit être :

<ul>
<li><strong><em>Symétrique</em></strong> : pour deux références a et b, si a.equals(b) alors il faut obligatoirement que b.equals(a)</p></li>
<li><p><strong><em>Réflexive</em></strong> : pour toute référence non null, a.equals(a) doit toujours renvoyer true</p></li>
<li><p><strong><em>Transitive</em></strong> : si a.equals(b) et b.equals(c) alors a.equals(c)</p></li>
<li><p><strong><em>Consistante</em></strong> avec la méthode hashCode() : si deux objets sont égaux en invoquant la méthode equals() alors leur méthode hashCode() doit renvoyer la même valeur pour les deux objets</p></li>
<li><p>Pour toute référence non null, a.equals(null) doit toujours renvoyer false</p></li>
</ul>

<p>(Référence : <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)">Class Object - JavaDoc</a> )

<h2>Exemple de redéfinition pour la classe Person</h2>

A partir de la plupart des IDEs, il est possible de générer le code  automatiquement des deux méthodes. Ci-dessous, un exemple de génération à parti d'IntelliJ :

[code language="java"]
@Override
public boolean equals(Object o) {
 if (this == o) return true;
 if (o == null || getClass() != o.getClass()) return false;

 Person person = (Person) o;

 if (age != person.age) return false;
 if (name != null ? !name.equals(person.name) : person.name != null) return false;

 return true;
}

@Override
public int hashCode() {
 int result = name != null ? name.hashCode() : 0;
 result = 31 * result + age;
 return result;
}
[/code]

&nbsp;

<h1>En Java, ça se passe comme ça</h1>

Suite à la redéfinition  de ces deux méthodes on va pouvoir comparer d'un point de vue fonctionnel les deux instances.

Si l'on exécute à nouveau le test précédent alors celui-ci se finira avec succès. En effet, en java, la méthode <em>equals</em>  permet d'effectuer une comparaison fonctionnelle tandis que l'opérateur <em>==</em> va seulement comparer les références mémoires des deux objets.

Soit les deux instances suivantes de la classe Person :

[code language="scala"]
test(&quot;p1 et p2 are not ==&quot;) {
 val p1 = new Person(&quot;Louis&quot;, 10)
 val p2 = new Person(&quot;Louis&quot;, 10)

 p1 == p2 // false
}


test(&quot;p1 et p2 are equals&quot;) {
 val p1 = new Person(&quot;Louis&quot;, 10)
 val p2 = new Person(&quot;Louis&quot;, 10)

 p1.equals(p2) //true
}
[/code]

<h1>En Scala, ça se passe autrement</h1>

En Scala, le comportement est différent. L'opérateur <em>==</em> s'appuie sur la méthode  <em>equals</em> pour effectuer la comparaison.

Par conséquent, tant que la méthode <em>equals</em> n'a pas été redéfinie, alors l'opérateur <em>==</em> fera une comparaison sur la référence des objets.

Une fois la méthode redéfinie, l'opérateur fera une comparaison fonctionnelle.

Dans du code, l'utilisation du <em>==</em>, à la place de <em>equals</em> est plus naturel.

Dans le cas de notre classe <em>Person</em> le comportement des tests sera le suivant :

[code language="scala"]
test(&quot;p1 et p2 are not ==&quot;) {
 val p1 = new Person(&quot;Louis&quot;, 10)
 val p2 = new Person(&quot;Louis&quot;, 10)

 p1 == p2 // true
}

test(&quot;p1 et p2 are equals&quot;) {
 val p1 = new Person(&quot;Louis&quot;, 10)
 val p2 = new Person(&quot;Louis&quot;, 10)

 p1.equals(p2) //true
}[/code]

Vous me direz mais comment je peux faire une comparaison par référence après redéfinition de la méthode <em>equals</em> ?? Et bien je vous répondrais que Scala met à disposition (via la superclasse <em>AnyRef</em>) deux méthodes

<ul>
    <li>eq : égalité entre deux objets par rapport à leurs références</li>
    <li>ne : équivalent à !(a eq b).</li>
</ul>

<h1>Conclusion</h1>

Vous me direz c'est bien étrange d'avoir fait ce choix par rapport à Java. Si on y regarde de plus près, je trouve que l'utilisation de l'opérateur <em>==</em> pour effectuer des comparaisons métiers n'est pas si mauvaise que cela. A l'écriture du code ça parait plus naturel et le résultat apporte de la concision au code en restant très lisible.

Quand on vient du monde Java, ça peut être un peu déstabilisant mais au final lorsque l'on sait comment ça fonctionne, l'approche parait plus naturelle et les habitudes viennent rapidement.

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>515</wp:post_id>
		<wp:post_date>2015-08-30 13:57:31</wp:post_date>
		<wp:post_date_gmt>2015-08-30 13:57:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>scala-equals-vs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="equals"><![CDATA[equals]]></category>
		<category domain="post_tag" nicename="hashcode"><![CDATA[hashcode]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a7bdcf88b49b585151dc419cececaa26</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6952dad2e12141656c5db119385e4eaa</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[17667084900]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>EqualitySign</title>
		<link>https://thecoderwriter.wordpress.com/2015/08/30/scala-equals-vs/equalitysign/</link>
		<pubDate>Fri, 21 Aug 2015 12:07:09 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2015/08/equalitysign.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>519</wp:post_id>
		<wp:post_date>2015-08-21 12:07:09</wp:post_date>
		<wp:post_date_gmt>2015-08-21 12:07:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>equalitysign</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>515</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2015/08/equalitysign.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/08/equalitysign.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:340;s:6:"height";i:160;s:4:"file";s:88:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2015/08/equalitysign.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SBT et java sont sur un bateau..</title>
		<link>https://thecoderwriter.wordpress.com/?p=517</link>
		<pubDate></pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=517</guid>
		<description></description>
		<content:encoded><![CDATA[Utiliser sbt dans avec un projet Java : 
définir la version de Java utilisée pour compiler vs la version du runtime]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>517</wp:post_id>
		<wp:post_date>2015-12-31 16:01:49</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Brown Bag Lunch</title>
		<link>https://thecoderwriter.wordpress.com/brown-bag-lunch/</link>
		<pubDate>Sat, 26 Dec 2015 19:40:30 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?page_id=565</guid>
		<description></description>
		<content:encoded><![CDATA[[caption id="" align="aligncenter" width="1000"]<a href="http://www.brownbaglunch.fr/img/villes/BBL.jpg"><img class="" src="http://www.brownbaglunch.fr/img/villes/BBL.jpg" alt="" width="1000" height="400" /></a> Brown Bag Lunch - Paris[/caption]

&nbsp;

Je fais parti de la communauté des baggers. Si vous ne connaissez pas le principe, vous avez tous les détails <a href="http://www.brownbaglunch.fr/" target="_blank">ici</a>.

Dans le cadre des BBL, je propose deux présentations :

<ul class="icons">
    <li id="Fabrice_Sznajderman_Paris-scala-de-0-a-l'infini" class="session"><i class="icon-caret-right"></i> <strong>Scala de 0 à l'infini</strong>
Cette présentation a pour objectif de poser les bases du language Scala et de monter graduellement dans les tours pour aborder des fonctionnalités plus avancées du languages. Après cette présentation, les termes implicit, monade, fonction partielle, pattern matching et closure ne devrait plus avoir de secret pour vous. Le seul pré-requis est de connaitre un language de programmation.</li>
    <li id="Fabrice_Sznajderman_Paris-sbt-et-pourquoi-pas" class="session"><strong>SBT et pourquoi pas?</strong>
SBT est un outil de build mais pas que,l'idée de cette présentation est de mettre en avant ce que SBT peut apporter en plus dans le quotidien du développeur comparé aux outils reconnus tel que maven. Nous parlerons ici de son utilisation au sein de projets Java même s'il s'est développé conjointement avec le language Scala. Durant cette présentation, nous verrons les fonctionnalités clefs qui pourront influencer vos choix sur vos projets présents ou futurs.</li>
</ul>

Si l'un des deux sujets vous intéresse, n'hésitez pas à me contacter pour déjeuner :)

@Bientôt

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>565</wp:post_id>
		<wp:post_date>2015-12-26 19:40:30</wp:post_date>
		<wp:post_date_gmt>2015-12-26 19:40:30</wp:post_date_gmt>
		<wp:comment_status>closed</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>brown-bag-lunch</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lagom with Scala for impatients</title>
		<link>https://thecoderwriter.wordpress.com/2016/07/13/lagom-with-scala-for-impatients/</link>
		<pubDate>Wed, 13 Jul 2016 15:24:54 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=569</guid>
		<description></description>
		<content:encoded><![CDATA[Do you hear about Lagom framework? It is a framework that eases you development of system of microservices based on the reactive principles. You can find more details about it <a href="lagomframework.com">here</a>.

Although the core of Lagom has been written in Scala, the framework API is proposed in Java. The Java API is nice and provides a good experience for the developer but, as a Scala developer, i am really impatient to play with the Scala API. This version of API is planned to be available soon (there is one dedicated issue on the github of project)

Well, during the waiting time, you can start to develop your service based on Scala language. To do this, You have to used one hack that you will allow to work with Scala from now.

The purpose of this article is to explain what you have to do! :)

Hack is based on implicit conversion of the Scala type into the Java type. This conversion will keep the compliant with the Java API.

To avoid long explanations, I will show you an example of code. Example is based on Lagom project that available <a href="https://github.com/dotta/activator-lagom-scala-chirper">here</a>. It is written by Mirco Dotta, one of the lead developer on the Lagom project.

This article assumes that you are familiar with the Lagom architecture and all classes that are involved in one service.

First of all, we are starting with interface of service, below implementation :

[code lang=scala]
import akka.stream.javadsl.Source

import akka.NotUsed
import com.lightbend.lagom.javadsl.api.Descriptor
import com.lightbend.lagom.javadsl.api.ScalaService._
import com.lightbend.lagom.javadsl.api.Service
import com.lightbend.lagom.javadsl.api.ServiceCall

trait MyScalaService extends Service {

def serviceSample(): ServiceCall[NotUsed, String]

override def descriptor(): Descriptor = {
named(&quot;MyScalaService&quot;)
.withCalls(namedCall(&quot;/api/sample/&quot;, serviceSample _))
.withAutoAcl(true)
}
}

[/code]

Where we implement an interface in Java, here we provide one Trait. It extend the Service's interface as we do it in Java. The main thing different, except syntax, it is the import of the object <strong>ScalaService</strong>
This object provide several implicit conversion as you can see <a href="https://github.com/lagom/lagom/blob/master/api/src/main/scala/com/lightbend/lagom/javadsl/api/ScalaServiceSupport.scala">here</a>

Now, we're looking for the implementation part:

[code lang=scala]
class MyScalaServiceImpl @inject() ()(implicit ex: ExecutionContext) extends MyScalaService {

import converter.ServiceCallConverter._

override def serviceSample(): ServiceCall[NotUsed, String] = {
notUsed =&gt; {
Future.successful(&quot;Hello world&quot;)
}
}

[/code]

Overall, there is no fundamental difference with Java approach.
However, you have to take care about few details.
- you must put the <strong>@inject()</strong> annotation on the constructor.
- the curried constructor where the second parameter define an implicit parameter required by the class Future.
- add the following import :

[code lang=scala]
import converter.ServiceCallConverter._
[/code]

This import provided some implicits conversion that are useful for the compliance with the Java Api. Those converters translate type Future to type CompletionStage (and reversely), below the (non standard) implementation found in the project sample <a href="https://github.com/dotta/activator-lagom-scala-chirper/tree/master/utils/src/main/scala/converter">here</a>.
You have to used it, or implement your version.
- And in the module's definition of service implementation you have to add an option on settings :

[code lang=scala]
scalacOptions in Compile += &quot;-Xexperimental&quot;
[/code]

This option enables Scala lambdas to be passed as Java SAMs <a href="https://github.com/scala/scala/pull/3037">more details here</a>

<em>Remember, this article describe one hack to write your service based on Scala language. Today, the Lagom's Scala API is not available yet. For this sample, we are using many implicit conversion to achieve this goal</em>

The last thing that I have to show you, how write the module (that aim to bind interface and implementation class). Here also, the difference will subtle :

[code lang=scala]
import com.google.inject.AbstractModule
import com.lightbend.lagom.javadsl.server.ServiceGuiceSupport

import MyScalaService

class MyScalaServiceModule extends AbstractModule with ServiceGuiceSupport {

protected override def configure(): Unit =
bindServices(serviceBinding(classOf[MyScalaService], classOf[MyScalaServiceImpl]))
}
[/code]

In summary, if you follow steps described above, you can enable Scala language in Lagom.

To help you to start after reading this article you could follow one of the three links below (or all if you want :D).

<ol>
    <li>A helloworld project sample that is written in with Scala language and contains just the minimal code that is described above <a href="https://github.com/Fabszn/lagom-scala-helloworld">Helloworld-scala-lagom</a></li>
    <li>This project contains more. It has been written by Mirco Dotta as example. <a href="https://github.com/dotta/activator-lagom-scala-chirper">activator-lagom-scala-chirper </a></li>
    <li>Here this is a plugin that eases the generation of Lagom service. It can generate the service in Java and in Scala (as described below) : <a href="https://github.com/Fabszn/scaffolding-plugin-lagom">scaffolding-plugin-lagom</a></li>
</ol>

Feel free to ask me any questions you may have about details.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>569</wp:post_id>
		<wp:post_date>2016-07-13 15:24:54</wp:post_date>
		<wp:post_date_gmt>2016-07-13 15:24:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lagom-with-scala-for-impatients</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="lagom"><![CDATA[lagom]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="category" nicename="tips"><![CDATA[tips]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[24749447232]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Tools</title>
		<link>https://thecoderwriter.wordpress.com/?p=570</link>
		<pubDate></pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=570</guid>
		<description></description>
		<content:encoded><![CDATA[En tant que développeur j'ai une boite à outil que je trimbale de projet en projet.

Ces outils]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>570</wp:post_id>
		<wp:post_date>2016-03-31 14:48:32</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Lagom : Architecture micro-service réactive</title>
		<link>https://thecoderwriter.wordpress.com/2016/04/09/lagom-architecture-micro-service-reactive/</link>
		<pubDate>Sat, 09 Apr 2016 06:31:14 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=573</guid>
		<description></description>
		<content:encoded><![CDATA[<p class="p1">Au mois de mars, <strong>Lightbend</strong> (ex <em>Typesafe</em>) sortait son framework de micro service. Un de plus me direz-vous? oui peut être.. mais, car il y a toujours un mais :) Ce framework propose quelques petites choses intéressantes. Je vous propose dans ce cours article de faire le point!</p>

<p class="p1">Le créateur du Lagom, *Jonas Boner*, met en avant les points suivants pour parler de son framework et décrire les différenciateurs par rapport à l'écosystème existant :</p>

<ul>
    <li class="p1"> par défaut la communication est asynchrone entre chaque service. Evidemment, il est possible de faire du synchrone également si nécessaire.</li>
    <li class="p1"> côté persistence, le framework se base sur les patterns d'<strong>Event sourcing</strong> et <strong>CQRS</strong>. Par défaut.</li>
    <li class="p1"> Lagom offre un environnement de développement ou l'on peut travailler efficacement. C'est-à-dire que l'on peut démarrer l'ensemble de ses microservices à l'aide d'une seule commande. Au lancement, Lagom lance une base Cassandra (embeded, un service locator et un service gateway, par défaut.</li>
    <li class="p1">Lagom supporte le rechargement à chaud du code après modification.</li>
</ul>

<p class="p1">*(liste non exhaustive)*</p>

<p class="p1">D'une manière générale, Lagom a été bati selon les principes réactifs (décrit dans le <a href="http://www.reactivemanifesto.org/">reactive manifesto</a>.</p>

<p class="p1">D'un point de vue technique, la première version de Lagom est développée sur une base Java. Néanmoins, lorsque l'on rentre dans les entrailles de la bête, on croise du code Scala (ouf ! :) ).</p>

<p class="p1">Prochainement, une version Scala sera proposée.</p>

<p class="p1">Lagom met en oeuvre pas mal de librairies externes pour adresser les différentes problématiques techniques. Voici une liste des librairies que l'on peut trouver :</p>

<ul>
    <li class="p1"><strong>Immutable</strong> &gt; Objet immuable</li>
    <li class="p1"><strong>Play framework</strong> &gt; Web</li>
    <li class="p1"><strong>SBT</strong><span class="Apple-converted-space"> &gt; </span>Build</li>
    <li class="p1"><strong>Guice</strong><span class="Apple-converted-space"> &gt; </span>IOC</li>
    <li class="p1"><strong>Akka</strong> &gt; Clustering, message, Stream</li>
    <li class="p1"><strong>SLF4J/LogBack</strong> &gt; Logging</li>
    <li class="p1"><strong>Jackson</strong> &gt; Sérialisation</li>
    <li class="p1"><strong>Cassandra</strong> &gt; Stockage</li>
    <li class="p1"><strong>ConductR</strong> &gt; Déploiement, service locator</li>
</ul>

<p class="p1">J'ai commencé à jouer avec pour découvrir et comprendre la philosophie de l'outil. Comme on peut le voir, beaucoup de concepts et de composants techniques sont utilisés, ce qui rend l'environnement riche et intéressant.</p>

<p class="p1">Une fois le tour du propriétaire fait, on se rend compte que l'écriture et le déploiement d'un service sont très simple.</p>

<p class="p1">Le principal concurrent de ce framework serait <strong>SpringBoot</strong>.</p>

<p class="p1">Actuellement, la documentation est vraiment centrée sur l'essentiel et on ne trouve pas tout; mais il est facile d'obtenir des informations notamment au chat mis en place sur Gitter ou l'on peut discuter facilement avec les contributeurs du projet.</p>

<p class="p1">Le projet est accessible <a href="https://www.lightbend.com/lagom">ici</a>. Si le sujet vous intéresses, je vous recommande d'y jeter un oeil.</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>573</wp:post_id>
		<wp:post_date>2016-04-09 06:31:14</wp:post_date>
		<wp:post_date_gmt>2016-04-09 06:31:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lagom-architecture-micro-service-reactive</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="apprendre"><![CDATA[apprendre]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="scala"><![CDATA[Scala]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[21606766633]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My Steps to become Scala developer!</title>
		<link>https://thecoderwriter.wordpress.com/?p=593</link>
		<pubDate></pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=593</guid>
		<description></description>
		<content:encoded><![CDATA[Today, I want to look at over my shoulder and make a summary of the different steps that allowed me to become a Scala developer.

According to me, there was ... steps

<h1>Step one : The 'Kezako" phase</h1>

<h1>Step two : The hands on from scratch</h1>

<h1>Step three : Ok, but how does it works</h1>

<h1>Step four : Now, I know, I can explain to newbie</h1>

<h1>Step Five : Become trainer</h1>

<h1>Step Five : Wouah I understand a source code of open source project</h1>

#]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>593</wp:post_id>
		<wp:post_date>2016-07-16 19:11:11</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Run a Lagom service standalone with Zookeeper</title>
		<link>https://thecoderwriter.wordpress.com/2016/09/24/run-a-lagom-service-standalone-with-zookeeper/</link>
		<pubDate>Sat, 24 Sep 2016 19:17:31 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=623</guid>
		<description></description>
		<content:encoded><![CDATA[We know that Lagom doesn't prescribe any particular environment, although Lagom provide out of the box ConductR, an integrated environment that provide several services to deploy and manage your services. It would be interesting, in some cases, to be able to deploy a service in standalone fashion.

<em>This article start with idea that you know how write and run a Lagom service in dev environment.</em>

We know that one microservice cannot live without service locator. In development environment, Lagom's plugin provided one service locator out of the box. It exclusively dedicated to the <em>dev mode</em>. The unique thing required to run a Lagom microservice in standalone mode is a service Locator.

Here we will see how run a Lagom service in standalone mode.

<em>To follow this guide, this imply you have one Zookeeper instance accessible. Please look at <a href="https://zookeeper.apache.org/doc/trunk/zookeeperStarted.html">here</a> to learn how running zookeeper instance</em>

As service locator registry, we will used Zookeeper. For that, we will use the <a href="https://github.com/jboner/lagom-service-locator-zookeeper">James Boner's project</a> that implements service Locator interface of Lagom for Zookeeper.

This guide will explain how to :

<ul>
<li>integrate the zookeeper service locator in your Lagom's project</li>
<li>package a service to run it in standalone manner</li>
</ul>

We will use the following service implementation :

Service interface

[code language="java"]
import com.lightbend.lagom.javadsl.api.Descriptor;
import com.lightbend.lagom.javadsl.api.Service;
import com.lightbend.lagom.javadsl.api.ServiceCall;

import static com.lightbend.lagom.javadsl.api.Service.named;
import static com.lightbend.lagom.javadsl.api.transport.Method.POST;

public interface HelloWorldService extends Service {

    ServiceCall&lt;String, String&gt; sayHello();

    @Override
    default Descriptor descriptor() {

        return named(&quot;helloWorld&quot;).withCalls(Service.restCall(POST, &quot;/msg&amp;amp&quot;, this::sayHello)).withAutoAcl(Boolean.TRUE);
    }
}
[/code]

Service implementation

[code language="java"]
import com.lightbend.lagom.javadsl.api.ServiceCall;

import static java.util.concurrent.CompletableFuture.completedFuture;

public class HelloWorldServiceImpl implements HelloWorldService {

    @Override
    public ServiceCall&lt;String, String&gt; sayHello() {
        return request -&gt; completedFuture(&quot;Hello&quot; + request );
    }
}
[/code]

&nbsp;

<h2>How integrate the zookeeper service locator in your Lagom's project</h2>

First step will be to add an implementation of the zookeeper service locator into your Lagom service.
For that, we have to build locally the lagom-zookeeper-service-locator project.
We have to do that because the project is under snapshot version.
Well, clone the project with the command below :

<pre>git clone https://github.com/jboner/lagom-service-locator-zookeeper.git</pre>

then publish locally the project as below :

<pre> &gt; sbt publishLocal</pre>

Once is published, we have to add the project as dependencies in your service, open your <em>build.sbt</em> file et add line as below :

<pre> libraryDependencies in ThisBuild += "com.lightbend.lagom" % "lagom-service-locator-zookeeper_2.11" % "1.0.0-SNAPSHOT"</pre>

Now the service locator must be activate. We have to declare the module's class in the service configuration file (by default, application.conf). Informations below indicated to the service Locator how reach zookeeper instance :

<pre>lagom {
  discovery {
    zookeeper {
      server-hostname = "127.0.0.1"   # hostname or IP-address for the ZooKeeper server
      server-port     = 2181          # port for the ZooKeeper server
      uri-scheme      = "http"        # for example: http or https
      routing-policy  = "round-robin" # valid routing policies: first, random, round-robin
    }
  }
}</pre>

Here, your service is able to work with the service locator but it is not yet localizable. We going to modify the service module class to ensure that the service becomes localizable.

[code language="java"]
public class HelloWorldServiceModule extends AbstractModule implements ServiceGuiceSupport {

    private Environment environment;

    @Inject
    public HelloWorldServiceModule(Environment environment, Configuration configuration) {
        this.environment = environment;
    }

    @Override
    protected void configure() {

        bindServices(serviceBinding(HelloWorldService.class, HelloWorldServiceImpl.class));

        if (environment.mode() == Mode.Prod()) {

            try {
                ZooKeeperServiceRegistry registry = new ZooKeeperServiceRegistry(
                        ZooKeeperServiceLocator.zkUri(),
                        ZooKeeperServiceLocator.zkServicesPath());
                registry.start();

                // create the service instance for the service discovery
                // needs to be held on to to be able to unregister the service on shutdown
                ServiceInstance&lt;String&gt; serviceInstance = ServiceInstance.&lt;String&gt;builder()
                        .name(&quot;helloWorld&quot;)
                        .id(&quot;helloWorldId&quot;)
                        .address(&quot;localhost&quot;)
                        .port(8080)
                        .uriSpec(new UriSpec(&quot;{scheme}://{serviceAddress}:{servicePort}&quot;))
                        .build();

                // register the service
                registry.register(serviceInstance);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
}
[/code]

The code above, record the service reference into zookeeper. You noticed that the code will be enabled only in production environment to avoid any conflict with service locator from dev environment. name and id parameters need a little explanation. Name parameter is the name os the microservice while id parameter is the reference of the instance of the microservice.

Now your service is ready to be used in standalone manner. Next, we will see how packaged and run the service.

<h2>How package a service to run in standalone manner</h2>

This step is very simple. To package your service, from sbt console you should select service implementation project by the command :

<pre>&gt; project helloWorld-imp</pre>

Once, it is selected, simply run the following command :

<pre> &gt; dist</pre>

Then to start your service in standalone manner, go into the following path:

<pre>/helloworld/helloWorld-impl/target/universal/</pre>

Here, you will find an archive named by the service implementation name, in our case <strong>helloworldimpl-[current_version].zip</strong>
In our case, name should be

<pre>helloworldimpl-1.0-SNAPSHOT.zip</pre>

This archive contains all elements require to run in standalone manner.

Unzip archive :

<pre>unzip helloworldimpl-1.0-SNAPSHOT.zip</pre>

and finally, run the script localized in bin directory :

<pre> ./helloworldimpl-1.0-SNAPSHOT/bin/helloworldimpl</pre>

Now, your Lagom service started in standalone manner. It can be interact with all your others services.

If you connect to your zookeeper instance by the zookeeper client (zkCli.sh). With the following command you will get all service's information (path corresponds to the configuration that we put into class' module) :

<pre>get /lagom/services/helloWorld/helloWorldId</pre>

Result that you will obtain :

<pre>{"name":"helloWorld","id":"helloWorldId","address":"localhost",
"port":8080,"sslPort":null,"payload":null,
"registrationTimeUTC":1474744298139,"serviceType":"DYNAMIC",
"uriSpec":{"parts":[{"value":"scheme","variable":true},
{"value":"://","variable":false},
{"value":"serviceAddress","variable":true},
{"value":":","variable":false},{"value":"servicePort","variable":true}]}}</pre>

This configuration should be add in all yours services that compose your microservices system. After, your services can localize all others services through the service locator.

I hope this article will give you a clear understanding of relation between Lagom service and service Locator.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>623</wp:post_id>
		<wp:post_date>2016-09-24 19:17:31</wp:post_date>
		<wp:post_date_gmt>2016-09-24 19:17:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>run-a-lagom-service-standalone-with-zookeeper</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="apprendre"><![CDATA[apprendre]]></category>
		<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="category" nicename="lagom"><![CDATA[lagom]]></category>
		<category domain="post_tag" nicename="scala"><![CDATA[Scala]]></category>
		<category domain="post_tag" nicename="zookeeper"><![CDATA[zookeeper]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_job_id</wp:meta_key>
			<wp:meta_value><![CDATA[27172594870]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[tosheer]]></wp:comment_author>
			<wp:comment_author_email>tosheer@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>119.82.83.52</wp:comment_author_IP>
			<wp:comment_date>2017-02-04 23:05:42</wp:comment_date>
			<wp:comment_date_gmt>2017-02-04 23:05:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Fabrice, Thanks for the interesting post. But one thing which is still creating an issue for me is how can deploy the compete Lagom application without conductR. Have you tried on this problem as well?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>111591616</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1486249543.3811891078948974609375;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"tosheer";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1486496810]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1486253999.847034931182861328125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"tosheer";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1486496810]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1486496810.2098751068115234375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"fabszn";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Fabrice Sznajderman]]></wp:comment_author>
			<wp:comment_author_email>fabszn@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://thecoderwriter.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>78.197.40.17</wp:comment_author_IP>
			<wp:comment_date>2017-02-07 20:25:17</wp:comment_date>
			<wp:comment_date_gmt>2017-02-07 20:25:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hey Tosheer,

Thanks for your feedback. 
I worked on one solution to deploy Lagom application without ConductR. You will find here one solution based on docker/consul/treafik : https://github.com/Lagom-community/Lagom-docker-deployment/tree/implemen_with_treafik/lagom-scala-hello-consul/docker

Feel free to ask any question you may have about this.

Fabrice]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>5</wp:comment_parent>
			<wp:comment_user_id>14541453</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1486499117]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1486499117.4998300075531005859375;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"fabszn";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1486499117]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Samuel Sayag]]></wp:comment_author>
			<wp:comment_author_email>samuelsayag@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>https://plus.google.com/103176830426874589054</wp:comment_author_url>
			<wp:comment_author_IP>62.0.119.180</wp:comment_author_IP>
			<wp:comment_date>2017-06-12 06:26:31</wp:comment_date>
			<wp:comment_date_gmt>2017-06-12 06:26:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Fabrice, thanks for the interesting post. I am trying to deploy by hand for the moment a set of services based on Lagom, however contrary to Play application it doest not seem to accept any prod configuration when launching the packaged service at runtime, that is to say (after the dist command) launching the following file:

#!/usr/bin/env bash
myprojectdir/bin/my-project-script -Dconfig.file=/absolute/path/to/prod.conf

... does not take into account the prod conf file. Have you encounter the problem and have you any solution for this problem ?

Many thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>hc_foreign_user_id</wp:meta_key>
				<wp:meta_value><![CDATA[103176830426874589054]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1497253043.52995395660400390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_post_as</wp:meta_key>
				<wp:meta_value><![CDATA[googleplus]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_avatar</wp:meta_key>
				<wp:meta_value><![CDATA[https://lh5.googleusercontent.com/-DcQjzoa7NjI/AAAAAAAAAAI/AAAAAAAAAbI/BzZJD651enQ/photo.jpg?sz=50]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1497248792.4743010997772216796875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[28197890848]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1551541321]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1551541321]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1551541321.670265;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"fabszn";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[Shikher]]></wp:comment_author>
			<wp:comment_author_email>shikher@pivotusventures.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>50.247.103.130</wp:comment_author_IP>
			<wp:comment_date>2017-10-10 22:10:19</wp:comment_date>
			<wp:comment_date_gmt>2017-10-10 22:10:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi 

Can you tell me how to package the service for maven? The project is made in Java and uses maven for building project. Is there a way to create a standalone executable jar.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1507677212.6904850006103515625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1507673420.150085926055908203125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[28197890058]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1551541318]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1551541319]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1551541319.682277;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"fabszn";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Processed with Snapseed.</title>
		<link>https://thecoderwriter.wordpress.com/processed-with-snapseed/</link>
		<pubDate>Sat, 24 Sep 2016 16:41:38 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">http://thecoderwriter.files.wordpress.com/2016/09/3ad6211d-35d9-464c-a3e7-accb51e95256.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[Processed with Snapseed.]]></excerpt:encoded>
		<wp:post_id>679</wp:post_id>
		<wp:post_date>2016-09-24 16:41:38</wp:post_date>
		<wp:post_date_gmt>2016-09-24 16:41:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>processed-with-snapseed</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2016/09/3ad6211d-35d9-464c-a3e7-accb51e95256.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2016/09/3ad6211d-35d9-464c-a3e7-accb51e95256.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:2698;s:6:"height";i:1471;s:4:"file";s:112:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2016/09/3ad6211d-35d9-464c-a3e7-accb51e95256.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:3:"2.2";s:6:"credit";s:0:"";s:6:"camera";s:14:"iPhone 6s Plus";s:7:"caption";s:24:"Processed with Snapseed.";s:17:"created_timestamp";s:10:"1472222997";s:9:"copyright";s:0:"";s:12:"focal_length";s:4:"4.15";s:3:"iso";s:2:"40";s:13:"shutter_speed";s:17:"0.058823529411765";s:5:"title";s:24:"Processed with Snapseed.";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:2260666;}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>cropped-3ad6211d-35d9-464c-a3e7-accb51e95256.jpg</title>
		<link>https://thecoderwriter.wordpress.com/cropped-3ad6211d-35d9-464c-a3e7-accb51e95256-jpg/</link>
		<pubDate>Sat, 24 Sep 2016 16:42:47 +0000</pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.files.wordpress.com/2016/09/cropped-3ad6211d-35d9-464c-a3e7-accb51e95256.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>680</wp:post_id>
		<wp:post_date>2016-09-24 16:42:47</wp:post_date>
		<wp:post_date_gmt>2016-09-24 16:42:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>cropped-3ad6211d-35d9-464c-a3e7-accb51e95256-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://thecoderwriter.files.wordpress.com/2016/09/cropped-3ad6211d-35d9-464c-a3e7-accb51e95256.jpg</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2016/09/cropped-3ad6211d-35d9-464c-a3e7-accb51e95256.jpg]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_context</wp:meta_key>
			<wp:meta_value><![CDATA[custom-header]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:6:{s:5:"width";i:1440;s:6:"height";i:543;s:4:"file";s:120:"/home/wpcom/public_html/wp-content/blogs.dir/cfe/84621306/files/2016/09/cropped-3ad6211d-35d9-464c-a3e7-accb51e95256.jpg";s:5:"sizes";a:0:{}s:10:"image_meta";a:12:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";s:11:"orientation";s:1:"0";s:8:"keywords";a:0:{}}s:8:"filesize";i:210786;}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_custom_header_last_used_pub/baskerville</wp:meta_key>
			<wp:meta_value><![CDATA[1474735367]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_is_custom_header</wp:meta_key>
			<wp:meta_value><![CDATA[pub/baskerville]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Securing Lagom services with JWT</title>
		<link>https://thecoderwriter.wordpress.com/?p=729</link>
		<pubDate></pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=729</guid>
		<description></description>
		<content:encoded><![CDATA[In this article we going to talk about how introduce one security layer on your Lagom services. The purpose of this article is introduce you the manner of how manipulate a JWT token in your service and how make it transparency.

<h2>What is JWT?</h2>

Before started, a little reminder about what is JWT.

<em>"JSON Web Token (JWT) is an open standard (<a href="https://tools.ietf.org/html/rfc7519">RFC 7519</a>) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the <strong>HMAC</strong> algorithm) or a public/private key pair using <strong>RSA</strong>."</em>

Definition above come from the official web site <a href="https://jwt.io/introduction/">jwt.io</a>. You will find there all details that you need to understand what is JWT.

Now, how integrate it in our services?

<h1>Secured our service</h1>

<h2>Environment</h2>

As example, we take a traditional <em>hello-world </em>service.

First step, create the project with the Lagom service named <em>helloWorld. </em>for that, you can use the <a href="https://github.com/Fabszn/scaffolding-plugin-lagom">scaffolding sbt plugin</a> to ease this step.

<pre>|____helloWorld-api
| |____src
| | |____main
| | | |____scala
| | | | |____com
| | | | | |____jwt
| | | | | | |____lagom
| | | | | | | |____HelloWorldService.scala
|____helloWorld-impl
| |____.DS_Store
| |____src
| | |____.DS_Store
| | |____main
| | | |____resources
| | | | |____application.conf
| | | |____scala
| | | | |____com
| | | | | |____jwt
| | | | | | |____lagom
| | | | | | | |____HelloWorldServiceImpl.scala
| | | | | | | |____HelloWorldServiceModule.scala
| | | | |____converter
| | | | | |____CompletionStageConverters.scala
| | | | | |____ServiceCallConverter.scala</pre>

Above, only code source files

Our project contains two modules :

<ul>
    <li>API</li>
    <li>implementation</li>
</ul>

We are going to protect access of this service with JWT token, for that we focused our attention on the implementation part :

<pre>class HelloWorldServiceImpl @Inject()(implicit ex: ExecutionContext) extends HelloWorldService {

    override def hi(name: String): ServiceCall[NotUsed, String] =
          notused =&gt; CompletableFuture.completedFuture("Hello " + name)
}
</pre>

In traditional implementation, a service return a <strong>ServiceCall, </strong>a functional interface that define <strong>invoke()</strong> method, here represented by the lambda :

<pre>notused =&gt; CompletableFuture.completedFuture("Hello " + name)</pre>

This interface give an access to the request body and response. Also, we know that the token is carried by http header, then we have to modify our service to have an access to http headers.

<span style="text-decoration:underline;">The question is</span> : <em>How I can access to the headers with Lagom framework? </em>

To get a reference on Http headers, instead of using <em>ServiceCall</em> interface as return type, you have to used <em>ServerServiceCall</em> and <em>HeaderServiceCall</em> interface.  We won't dive into details but both interfaces aim to provide an access to http request/response Headers. More informations <a href="http://www.lagomframework.com/documentation/1.2.x/java/ServiceImplementation.html#handling-headers">here</a>.

We going to replace return type of service as follow :

<pre>override def hi(name: String): <strong>ServerServiceCall</strong>[NotUsed, String] = ???
</pre>

To respect the contract defined by <strong>ServerServiceCall </strong>interface, we used the <em>HeaderServiceCall</em> interface with the method <em>of(..) </em>as follow :

<pre>override def hi(name: String): <strong>ServerServiceCall</strong>[NotUsed, String] = 
    HeaderServiceCall.of[String,String]((header:RequestHeader, req:String) 
                =&gt; {
   //do something with request headers
   CompletableFuture.completedFuture(Pair.create(ResponseHeader.OK,"Hello " + name))); 
}

</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>729</wp:post_id>
		<wp:post_date>2016-12-05 21:59:21</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[14541453]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>I want to learn Scala, but how?</title>
		<link>https://thecoderwriter.wordpress.com/?p=876</link>
		<pubDate></pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=876</guid>
		<description></description>
		<content:encoded><![CDATA[Scala language cala

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>876</wp:post_id>
		<wp:post_date>2016-12-19 08:22:05</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Why i am passionate by job?</title>
		<link>https://thecoderwriter.wordpress.com/?p=880</link>
		<pubDate></pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=880</guid>
		<description></description>
		<content:encoded><![CDATA[Here, I want to talk about my job. Actually, this is not only my job, this is more than just my job. In fact, my job is just an extension of my passion.

My job is developer. From my point of view, this job could be a little bit myterious for whose are not developers.

Even if developer required some technical knowledges]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>880</wp:post_id>
		<wp:post_date>2017-03-24 18:12:50</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>42 ans, encore développeur...</title>
		<link>https://thecoderwriter.wordpress.com/?p=886</link>
		<pubDate></pubDate>
		<dc:creator>fabszn</dc:creator>
		<guid isPermaLink="false">https://thecoderwriter.wordpress.com/?p=886</guid>
		<description></description>
		<content:encoded><![CDATA[Il y a 2 mois de cela, je soufflais ma 42ième bougies, 42 ans l'age un peu magique pour un développeur :D

Et oui, je viens d'avoir 42ans et je suis <del>encore </del>toujours  développeur. Alors échec ou réussite?

si je remonte quelques années en arrière, je me rends compte que la réponse n'a pas toujours été aussi évidente.

J'ai commencé ma carrière dans de développeur en 1999/2000. Tombé tardivement dans le bain du développement informatique, je commençais comme développeur Visual Basic (pour dépanner) / Java chez un éditeur d'un logiciel de CRM.

Déjà passionné par le sujet, je m'investissais à 200% dans les travaux qui mettait confié. Après 1,5 ans de bons et loyaux services, je quittais cette entreprise pour rejoindre une toute petite société de service dans laquelle je resterais 2ans avant d'être débauché par une structure plus grande.

C'est dans cette nouvelle entreprise que j'ai connu mon premier gros et difficile projet. Estimé à 6mois à deux (1 CDP / 1]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>886</wp:post_id>
		<wp:post_date>2018-04-24 23:36:22</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
